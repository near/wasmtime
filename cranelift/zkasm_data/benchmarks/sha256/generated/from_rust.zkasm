start:
  zkPC + 2 => RR
  :JMP(function_1)
  :JMP(finalizeExecution)
function_1:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 17 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  CTX :MSTORE(SP - 5)
  CTX => E
  CTX :MSTORE(SP)
  $ => A :MLOAD(MEM:E + 8)
  240n => B  ;; LoadConst32
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 80)
  A :MSTORE(MEM:E + 8)
  8n => B  ;; LoadConst32
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  8n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 32)
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  16n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 24)
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  24n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 16)
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  40n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 8)
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  40n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 72)
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  53n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 64)
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  0n => CTX  ;; LoadConst64
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 8)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  24n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 56)
  0n => E  ;; LoadConst32
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1048600)
  $ => E :MLOAD(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  16n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 56)
  0n => E  ;; LoadConst32
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1048592)
  $ => E :MLOAD(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  8n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 56)
  0n => E  ;; LoadConst32
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1048584)
  $ => E :MLOAD(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  111n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 56)
  0n => E  ;; LoadConst32
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1048615)
  $ => E :MLOAD(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  0n => E  ;; LoadConst32
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1048576)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 64)
  0n => CTX  ;; LoadConst64
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 96)
  0n => E  ;; LoadConst32
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1048608)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 104)
  115n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 56)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 8)
  $ => E :MLOAD(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => E :MLOAD(SP)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  123n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 32)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  131n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 24)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  139n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 16)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  147n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 8)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  155n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 72)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  160n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  $ => E :MLOAD(SP + 64)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  11n => CTX  ;; LoadConst32
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 168)
  172n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E :MSTORE(SP + 48)
  4n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E)
  $ => E :MLOAD(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => CTX :MLOAD(MEM:E + 1)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 169)
  128n => CTX  ;; LoadConst32
  $ => E :MLOAD(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 96)
  A :MSTORE(SP + 48)
  9n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  88n => B  ;; LoadConst64
  CTX => A
  $ => E :OR
  E :MSTORE(SP + 40)
  65024n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 40)
  $ => B :AND
  B => C
  40n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 32)
  16711680n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 40)
  $ => B :AND
  B => C
  24n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  4278190080n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 40)
  $ => A :AND
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  $ => A :MLOAD(SP + 24)
  E => B
  $ => B :OR
  $ => A :MLOAD(SP + 32)
  $ => A :OR
  A :MSTORE(SP + 24)
  1n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4278190080n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 16)
  15n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  16711680n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 16)
  31n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  65280n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8)
  56n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8)
  $ => B :OR
  $ => A :MLOAD(SP + 16)
  $ => B :OR
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  A => C
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  40n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 8)
  0n => B  ;; LoadConst32
  B => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_1_1)
  :JMP(label_1_2)
label_1_1:
  :JMP(label_1_3)
label_1_2:
  11n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  0n => B  ;; LoadConst32
  52n => D  ;; LoadConst32
  SP + 1 => SP
  D :MSTORE(SP)
  $ => CTX :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_4)
  SP - 1 => SP
  :JMP(label_1_3)
label_1_3:
  6341068275337658368n => B  ;; LoadConst64
  C => A
  $ => B :OR
  B :MSTORE(SP + 72)
  11n => A  ;; LoadConst32
  56n => B  ;; LoadConst32
  $ => A :XOR
  8n => B  ;; LoadConst32
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_1_5)
  160n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => C :MLOAD(SP + 72)
  C :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => B  ;; LoadConst32
  SP + 1 => SP
  B :MSTORE(SP)
  $ => B :MLOAD(SP + 8)
  $ => CTX :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP - 1 => SP
  $ => E :MLOAD(SP + 80)
  :JMP(label_1_6)
label_1_5:
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => D  ;; LoadConst32
  SP + 1 => SP
  D :MSTORE(SP)
  $ => B :MLOAD(SP + 8)
  $ => CTX :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP - 1 => SP
  224n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  216n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  208n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  200n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  192n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  184n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  0n => CTX  ;; LoadConst64
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  0n => CTX  ;; LoadConst64
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 176)
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => C :MLOAD(SP + 72)
  C :MSTORE(MEM:E + 232)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  176n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  1n => C  ;; LoadConst32
  SP + 1 => SP
  C :MSTORE(SP)
  D => A
  $ => CTX :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP - 1 => SP
  $ => E :MLOAD(SP + 80)
  :JMP(label_1_6)
label_1_6:
  $ => E :MLOAD(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 92)
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 72)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 88)
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 64)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 84)
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 56)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 80)
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 48)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 76)
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 40)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 72)
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 32)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 64)
  A :MSTORE(SP + 24)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => CTX
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 24)
  $ => E :AND
  E => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :OR
  B => CTX
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 16)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => E :OR
  $ => A :MLOAD(SP + 8)
  B => D
  E => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => E :AND
  E :MSTORE(SP + 8)
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A :MSTORE(SP + 8)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 16)
  $ => A :AND
  $ => E :MLOAD(SP + 80)
  A :MSTORE(SP + 16)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 68)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A :MSTORE(SP + 16)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => E :AND
  E => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8)
  255n => B  ;; LoadConst32
  CTX => A
  $ => E :AND
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  13352372148217134600n => B  ;; LoadConst64
  $ => CTX :MLOAD(SP)
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => CTX
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :OR
  B => CTX
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 16)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  B => C
  A => B
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => B :AND
  B :MSTORE(SP + 8)
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A :MSTORE(SP + 8)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 16)
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  A => CTX
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 40)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 40)
  $ => E :AND
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  11902541952223915002n => B  ;; LoadConst64
  $ => CTX :MLOAD(SP)
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => CTX
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 48)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :OR
  B => CTX
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 16)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => C :OR
  $ => A :MLOAD(SP + 8)
  C => D
  B => C
  D => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => B :AND
  B :MSTORE(SP + 8)
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A :MSTORE(SP + 8)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 16)
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 56)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  A => CTX
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 56)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 56)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 56)
  $ => E :AND
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  14160706888648589550n => B  ;; LoadConst64
  $ => CTX :MLOAD(SP)
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 64)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => CTX
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 64)
  $ => C :AND
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :OR
  B => CTX
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 64)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 16)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 64)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => C :OR
  $ => A :MLOAD(SP + 8)
  B => D
  C => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => C :AND
  C :MSTORE(SP + 8)
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A :MSTORE(SP + 8)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 16)
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 72)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  A => CTX
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 72)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 72)
  $ => C :AND
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  A => D
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => CTX
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 72)
  $ => E :AND
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  CTX => A
  $ => A :OR
  10414846460208074217n => B  ;; LoadConst64
  $ => CTX :MLOAD(SP)
  B :ASSERT
  240n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP)
  A :MSTORE(MEM:E + 8)
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  $ => CTX :MLOAD(SP - 5)
  SP - 17 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_2:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 2 => SP
  C :MSTORE(SP - 1)
  $ => C :MLOAD(fp + 16)
  SP + 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_3)
  SP - 1 => SP
  $ => C :MLOAD(SP - 1)
  SP - 2 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_3:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 468 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  CTX :MSTORE(SP - 5)
  A :MSTORE(SP)
  B :MSTORE(SP + 8)
  CTX :MSTORE(SP + 16)
  $ => A :MLOAD(fp + 16)
  $ => E :MLOAD(SP)
  A => CTX
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 28)
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 80)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 24)
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 88)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 20)
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 96)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 16)
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 104)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => B :MLOAD(MEM:E + 12)
  $ => E :MLOAD(SP)
  B :MSTORE(SP + 112)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 8)
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 120)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 4)
  $ => E :MLOAD(SP)
  A :MSTORE(SP + 128)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E)
  A :MSTORE(SP + 136)
  0n => B  ;; LoadConst32
  CTX => A
  $ => A :EQ
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_3_1)
  :JMP(label_3_2)
label_3_1:
  $ => E :MLOAD(SP)
  $ => CTX :MLOAD(SP + 80)
  :JMP(label_3_7)
label_3_2:
  6n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => CTX :AND
  CTX :MSTORE(SP + 3688)
  $ => C :MLOAD(SP + 8)
  C :MSTORE(SP + 72)
  $ => C :MLOAD(SP + 96)
  C :MSTORE(SP + 64)
  $ => C :MLOAD(SP + 88)
  C :MSTORE(SP + 56)
  $ => C :MLOAD(SP + 104)
  C :MSTORE(SP + 48)
  $ => C :MLOAD(SP + 80)
  C :MSTORE(SP + 40)
  $ => C :MLOAD(SP + 136)
  C :MSTORE(SP + 32)
  $ => C :MLOAD(SP + 128)
  C :MSTORE(SP + 24)
  $ => C :MLOAD(SP + 120)
  C :MSTORE(SP + 8)
  $ => B :MLOAD(SP + 128)
  $ => A :MLOAD(SP + 120)
  :JMP(label_3_3)
label_3_3:
  $ => C :XOR
  C => A
  $ => B :MLOAD(SP + 32)
  $ => A :AND
  $ => B :MLOAD(SP + 24)
  A => D
  $ => A :MLOAD(SP + 8)
  $ => C :AND
  D => A
  C => B
  $ => A :XOR
  A :MSTORE(SP + 3680)
  30n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3672)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3672)
  $ => A :XOR
  A :MSTORE(SP + 3672)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3672)
  $ => B :XOR
  $ => A :MLOAD(SP + 3680)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3672)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 48)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3664)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 48)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3664)
  $ => A :XOR
  A :MSTORE(SP + 3664)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 48)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3664)
  $ => B :XOR
  $ => A :MLOAD(SP + 40)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 64)
  A => D
  $ => A :MLOAD(SP + 56)
  $ => C :XOR
  C => A
  $ => B :MLOAD(SP + 48)
  $ => A :AND
  $ => B :MLOAD(SP + 56)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A => CTX
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E)
  A :MSTORE(SP + 3664)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3656)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 3664)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3656)
  $ => A :OR
  A :MSTORE(SP + 3656)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3648)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3648)
  $ => B :OR
  $ => A :MLOAD(SP + 3656)
  $ => B :OR
  CTX => A
  $ => A :ADD
  B :MSTORE(SP + 3648)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1116352408n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3672)
  $ => A :ADD
  B :MSTORE(SP + 3640)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3632)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3624)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3632)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3624)
  $ => A :XOR
  A :MSTORE(SP + 3624)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3632)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3624)
  $ => A :XOR
  $ => B :MLOAD(SP + 32)
  A => D
  $ => A :MLOAD(SP + 24)
  $ => C :XOR
  $ => A :MLOAD(SP + 3632)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  B => E
  $ => B :MLOAD(SP + 32)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3624)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 4)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3616)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3616)
  $ => A :OR
  A :MSTORE(SP + 3616)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3608)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3608)
  $ => B :OR
  $ => A :MLOAD(SP + 3616)
  $ => B :OR
  $ => A :MLOAD(SP + 56)
  $ => D :ADD
  D => A
  B :MSTORE(SP + 3608)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 112)
  A => D
  $ => A :MLOAD(SP + 3640)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3600)
  $ => B :MLOAD(SP + 48)
  $ => A :MLOAD(SP + 64)
  $ => C :XOR
  C => B
  $ => A :MLOAD(SP + 3600)
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 64)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3592)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3584)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3584)
  $ => A :XOR
  A :MSTORE(SP + 3584)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3584)
  $ => B :XOR
  $ => A :MLOAD(SP + 3592)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1899447441n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3624)
  $ => A :ADD
  B :MSTORE(SP + 3584)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3576)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3568)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3576)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3568)
  $ => A :XOR
  A :MSTORE(SP + 3568)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3576)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3568)
  $ => A :XOR
  $ => B :MLOAD(SP + 32)
  A => D
  $ => A :MLOAD(SP + 3632)
  $ => C :XOR
  $ => A :MLOAD(SP + 3576)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3632)
  B => E
  $ => B :MLOAD(SP + 32)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3568)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 8)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3560)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3560)
  $ => A :OR
  A :MSTORE(SP + 3560)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3552)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3552)
  $ => B :OR
  $ => A :MLOAD(SP + 3560)
  $ => B :OR
  $ => A :MLOAD(SP + 64)
  $ => D :ADD
  D => A
  B :MSTORE(SP + 3552)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8)
  A => D
  $ => A :MLOAD(SP + 3584)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3544)
  $ => B :MLOAD(SP + 48)
  $ => A :MLOAD(SP + 3600)
  $ => C :XOR
  $ => A :MLOAD(SP + 3544)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 48)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3536)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3528)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3528)
  $ => A :XOR
  A :MSTORE(SP + 3528)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3528)
  $ => B :XOR
  $ => A :MLOAD(SP + 3536)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3049323471n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3568)
  $ => A :ADD
  B :MSTORE(SP + 3528)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3520)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3512)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3520)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3512)
  $ => A :XOR
  A :MSTORE(SP + 3512)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3520)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3512)
  $ => A :XOR
  $ => B :MLOAD(SP + 3632)
  A => D
  $ => A :MLOAD(SP + 3576)
  $ => C :XOR
  $ => A :MLOAD(SP + 3520)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3576)
  B => E
  $ => B :MLOAD(SP + 3632)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3512)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 12)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3504)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3504)
  $ => A :OR
  A :MSTORE(SP + 3504)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3496)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3496)
  $ => B :OR
  $ => A :MLOAD(SP + 3504)
  $ => B :OR
  $ => A :MLOAD(SP + 48)
  $ => D :ADD
  D => A
  B :MSTORE(SP + 3496)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 24)
  A => D
  $ => A :MLOAD(SP + 3528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3488)
  $ => B :MLOAD(SP + 3600)
  $ => A :MLOAD(SP + 3544)
  $ => C :XOR
  $ => A :MLOAD(SP + 3488)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3600)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3480)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3472)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3472)
  $ => A :XOR
  A :MSTORE(SP + 3472)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3472)
  $ => B :XOR
  $ => A :MLOAD(SP + 3480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3921009573n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3512)
  $ => A :ADD
  B :MSTORE(SP + 3472)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3464)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3456)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3464)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3456)
  $ => A :XOR
  A :MSTORE(SP + 3456)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3464)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3456)
  $ => A :XOR
  $ => B :MLOAD(SP + 3576)
  A => D
  $ => A :MLOAD(SP + 3520)
  $ => C :XOR
  $ => A :MLOAD(SP + 3464)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3520)
  B => E
  $ => B :MLOAD(SP + 3576)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3456)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 16)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3448)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3448)
  $ => A :OR
  A :MSTORE(SP + 3448)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3440)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3440)
  $ => B :OR
  $ => A :MLOAD(SP + 3448)
  $ => B :OR
  $ => A :MLOAD(SP + 3600)
  $ => A :ADD
  B :MSTORE(SP + 3440)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 32)
  A => D
  $ => A :MLOAD(SP + 3472)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3432)
  $ => B :MLOAD(SP + 3544)
  $ => A :MLOAD(SP + 3488)
  $ => C :XOR
  $ => A :MLOAD(SP + 3432)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3544)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3424)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3416)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3416)
  $ => A :XOR
  A :MSTORE(SP + 3416)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3416)
  $ => B :XOR
  $ => A :MLOAD(SP + 3424)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  961987163n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3456)
  $ => A :ADD
  B :MSTORE(SP + 3416)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3408)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3400)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3408)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3400)
  $ => A :XOR
  A :MSTORE(SP + 3400)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3408)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3400)
  $ => A :XOR
  $ => B :MLOAD(SP + 3520)
  A => D
  $ => A :MLOAD(SP + 3464)
  $ => C :XOR
  $ => A :MLOAD(SP + 3408)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3464)
  B => E
  $ => B :MLOAD(SP + 3520)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3400)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 20)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3392)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3392)
  $ => A :OR
  A :MSTORE(SP + 3392)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3384)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3384)
  $ => B :OR
  $ => A :MLOAD(SP + 3392)
  $ => A :OR
  $ => B :MLOAD(SP + 3544)
  $ => D :ADD
  A :MSTORE(SP + 3384)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3632)
  A => D
  $ => A :MLOAD(SP + 3416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3376)
  $ => B :MLOAD(SP + 3488)
  $ => A :MLOAD(SP + 3432)
  $ => C :XOR
  $ => A :MLOAD(SP + 3376)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3488)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3368)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3360)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3360)
  $ => A :XOR
  A :MSTORE(SP + 3360)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3360)
  $ => B :XOR
  $ => A :MLOAD(SP + 3368)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1508970993n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3400)
  $ => A :ADD
  B :MSTORE(SP + 3360)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3352)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3344)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3352)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3344)
  $ => A :XOR
  A :MSTORE(SP + 3344)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3352)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3344)
  $ => A :XOR
  $ => B :MLOAD(SP + 3464)
  A => D
  $ => A :MLOAD(SP + 3408)
  $ => C :XOR
  $ => A :MLOAD(SP + 3352)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3408)
  B => E
  $ => B :MLOAD(SP + 3464)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3344)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 24)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3336)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3336)
  $ => A :OR
  A :MSTORE(SP + 3336)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3328)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3328)
  $ => B :OR
  $ => A :MLOAD(SP + 3336)
  $ => A :OR
  $ => B :MLOAD(SP + 3488)
  $ => D :ADD
  A :MSTORE(SP + 3328)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3576)
  A => D
  $ => A :MLOAD(SP + 3360)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3320)
  $ => B :MLOAD(SP + 3432)
  $ => A :MLOAD(SP + 3376)
  $ => C :XOR
  $ => A :MLOAD(SP + 3320)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3432)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3312)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3304)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3304)
  $ => A :XOR
  A :MSTORE(SP + 3304)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3304)
  $ => B :XOR
  $ => A :MLOAD(SP + 3312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2453635748n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3344)
  $ => A :ADD
  B :MSTORE(SP + 3304)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3296)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3288)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3296)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3288)
  $ => A :XOR
  A :MSTORE(SP + 3288)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3296)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3288)
  $ => A :XOR
  $ => B :MLOAD(SP + 3408)
  A => D
  $ => A :MLOAD(SP + 3352)
  $ => C :XOR
  $ => A :MLOAD(SP + 3296)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3352)
  B => E
  $ => B :MLOAD(SP + 3408)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3288)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 28)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3280)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3280)
  $ => A :OR
  A :MSTORE(SP + 3280)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3272)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3272)
  $ => B :OR
  $ => A :MLOAD(SP + 3280)
  $ => A :OR
  $ => B :MLOAD(SP + 3432)
  $ => D :ADD
  A :MSTORE(SP + 3272)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3520)
  A => D
  $ => A :MLOAD(SP + 3304)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3264)
  $ => B :MLOAD(SP + 3376)
  $ => A :MLOAD(SP + 3320)
  $ => C :XOR
  $ => A :MLOAD(SP + 3264)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3376)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3256)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3248)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3248)
  $ => A :XOR
  A :MSTORE(SP + 3248)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3248)
  $ => B :XOR
  $ => A :MLOAD(SP + 3256)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2870763221n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3288)
  $ => A :ADD
  B :MSTORE(SP + 3248)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3240)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3232)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3240)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3232)
  $ => A :XOR
  A :MSTORE(SP + 3232)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3240)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3232)
  $ => A :XOR
  $ => B :MLOAD(SP + 3352)
  A => E
  $ => A :MLOAD(SP + 3296)
  $ => C :XOR
  $ => A :MLOAD(SP + 3240)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3296)
  B => D
  $ => B :MLOAD(SP + 3352)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3232)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 32)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3224)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3224)
  $ => A :OR
  A :MSTORE(SP + 3224)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3216)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3216)
  $ => B :OR
  $ => A :MLOAD(SP + 3224)
  $ => A :OR
  $ => B :MLOAD(SP + 3376)
  $ => D :ADD
  A :MSTORE(SP + 3216)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3464)
  A => D
  $ => A :MLOAD(SP + 3248)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3208)
  $ => B :MLOAD(SP + 3320)
  $ => A :MLOAD(SP + 3264)
  $ => C :XOR
  $ => A :MLOAD(SP + 3208)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3320)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3200)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3192)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3192)
  $ => A :XOR
  A :MSTORE(SP + 3192)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3192)
  $ => B :XOR
  $ => A :MLOAD(SP + 3200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3624381080n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3232)
  $ => A :ADD
  B :MSTORE(SP + 3192)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3184)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3176)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3184)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3176)
  $ => A :XOR
  A :MSTORE(SP + 3176)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3184)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3176)
  $ => A :XOR
  $ => B :MLOAD(SP + 3296)
  A => D
  $ => A :MLOAD(SP + 3240)
  $ => C :XOR
  $ => A :MLOAD(SP + 3184)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3240)
  B => E
  $ => B :MLOAD(SP + 3296)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3176)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 36)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3168)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3168)
  $ => A :OR
  A :MSTORE(SP + 3168)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3160)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3160)
  $ => B :OR
  $ => A :MLOAD(SP + 3168)
  $ => A :OR
  $ => B :MLOAD(SP + 3320)
  $ => D :ADD
  A :MSTORE(SP + 3160)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3408)
  A => D
  $ => A :MLOAD(SP + 3192)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3152)
  $ => B :MLOAD(SP + 3264)
  $ => A :MLOAD(SP + 3208)
  $ => C :XOR
  $ => A :MLOAD(SP + 3152)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3264)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3144)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3136)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3136)
  $ => A :XOR
  A :MSTORE(SP + 3136)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3136)
  $ => B :XOR
  $ => A :MLOAD(SP + 3144)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  310598401n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3176)
  $ => A :ADD
  B :MSTORE(SP + 3136)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3128)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3120)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3128)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3120)
  $ => A :XOR
  A :MSTORE(SP + 3120)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3128)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3120)
  $ => A :XOR
  $ => B :MLOAD(SP + 3240)
  A => D
  $ => A :MLOAD(SP + 3184)
  $ => C :XOR
  $ => A :MLOAD(SP + 3128)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3184)
  B => E
  $ => B :MLOAD(SP + 3240)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3120)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 40)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3112)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3112)
  $ => A :OR
  A :MSTORE(SP + 3112)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3104)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3104)
  $ => B :OR
  $ => A :MLOAD(SP + 3112)
  $ => A :OR
  $ => B :MLOAD(SP + 3264)
  $ => D :ADD
  A :MSTORE(SP + 3104)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3352)
  A => D
  $ => A :MLOAD(SP + 3136)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3096)
  $ => B :MLOAD(SP + 3208)
  $ => A :MLOAD(SP + 3152)
  $ => C :XOR
  $ => A :MLOAD(SP + 3096)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3208)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3088)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3080)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3080)
  $ => A :XOR
  A :MSTORE(SP + 3080)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3080)
  $ => B :XOR
  $ => A :MLOAD(SP + 3088)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  607225278n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3120)
  $ => A :ADD
  B :MSTORE(SP + 3080)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3072)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3064)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3072)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3064)
  $ => A :XOR
  A :MSTORE(SP + 3064)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3072)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3064)
  $ => A :XOR
  $ => B :MLOAD(SP + 3184)
  A => D
  $ => A :MLOAD(SP + 3128)
  $ => C :XOR
  $ => A :MLOAD(SP + 3072)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3128)
  B => E
  $ => B :MLOAD(SP + 3184)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3064)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 44)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3056)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3056)
  $ => A :OR
  A :MSTORE(SP + 3056)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 3048)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3048)
  $ => B :OR
  $ => A :MLOAD(SP + 3056)
  $ => A :OR
  $ => B :MLOAD(SP + 3208)
  $ => D :ADD
  A :MSTORE(SP + 3048)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3296)
  A => D
  $ => A :MLOAD(SP + 3080)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3040)
  $ => B :MLOAD(SP + 3152)
  $ => A :MLOAD(SP + 3096)
  $ => C :XOR
  $ => A :MLOAD(SP + 3040)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3152)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3032)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3024)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3024)
  $ => A :XOR
  A :MSTORE(SP + 3024)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3024)
  $ => B :XOR
  $ => A :MLOAD(SP + 3032)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1426881987n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3064)
  $ => A :ADD
  B :MSTORE(SP + 3024)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3016)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 3008)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3016)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3008)
  $ => A :XOR
  A :MSTORE(SP + 3008)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3016)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 3008)
  $ => A :XOR
  $ => B :MLOAD(SP + 3128)
  A => D
  $ => A :MLOAD(SP + 3072)
  $ => C :XOR
  $ => A :MLOAD(SP + 3016)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3072)
  B => E
  $ => B :MLOAD(SP + 3128)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 3008)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 48)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3000)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3000)
  $ => A :OR
  A :MSTORE(SP + 3000)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 2992)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2992)
  $ => B :OR
  $ => A :MLOAD(SP + 3000)
  $ => A :OR
  $ => B :MLOAD(SP + 3152)
  $ => D :ADD
  A :MSTORE(SP + 2992)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3240)
  A => D
  $ => A :MLOAD(SP + 3024)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2984)
  $ => B :MLOAD(SP + 3096)
  $ => A :MLOAD(SP + 3040)
  $ => C :XOR
  $ => A :MLOAD(SP + 2984)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3096)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2976)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2968)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2968)
  $ => A :XOR
  A :MSTORE(SP + 2968)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2968)
  $ => B :XOR
  $ => A :MLOAD(SP + 2976)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1925078388n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3008)
  $ => A :ADD
  B :MSTORE(SP + 2968)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2960)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2952)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2960)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2952)
  $ => A :XOR
  A :MSTORE(SP + 2952)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2960)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2952)
  $ => A :XOR
  $ => B :MLOAD(SP + 3072)
  A => E
  $ => A :MLOAD(SP + 3016)
  $ => C :XOR
  $ => A :MLOAD(SP + 2960)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3016)
  B => D
  $ => B :MLOAD(SP + 3072)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 2952)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 52)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2944)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2944)
  $ => A :OR
  A :MSTORE(SP + 2944)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 2936)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2936)
  $ => B :OR
  $ => A :MLOAD(SP + 2944)
  $ => A :OR
  $ => B :MLOAD(SP + 3096)
  $ => D :ADD
  A :MSTORE(SP + 2936)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3184)
  A => D
  $ => A :MLOAD(SP + 2968)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2928)
  $ => B :MLOAD(SP + 3040)
  $ => A :MLOAD(SP + 2984)
  $ => C :XOR
  $ => A :MLOAD(SP + 2928)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3040)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2920)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2912)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2912)
  $ => A :XOR
  A :MSTORE(SP + 2912)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2912)
  $ => B :XOR
  $ => A :MLOAD(SP + 2920)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2162078206n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2952)
  $ => A :ADD
  B :MSTORE(SP + 2912)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2904)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2896)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2904)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2896)
  $ => A :XOR
  A :MSTORE(SP + 2896)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2904)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2896)
  $ => A :XOR
  $ => B :MLOAD(SP + 3016)
  A => D
  $ => A :MLOAD(SP + 2960)
  $ => C :XOR
  $ => A :MLOAD(SP + 2904)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2960)
  B => E
  $ => B :MLOAD(SP + 3016)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 2896)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 56)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2888)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2888)
  $ => A :OR
  A :MSTORE(SP + 2888)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 2880)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2880)
  $ => B :OR
  $ => A :MLOAD(SP + 2888)
  $ => A :OR
  $ => B :MLOAD(SP + 3040)
  A :MSTORE(SP + 2880)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3128)
  A => D
  $ => A :MLOAD(SP + 2912)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2872)
  $ => B :MLOAD(SP + 2984)
  $ => A :MLOAD(SP + 2928)
  $ => C :XOR
  $ => A :MLOAD(SP + 2872)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2984)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2864)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2856)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2856)
  $ => A :XOR
  A :MSTORE(SP + 2856)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2856)
  $ => B :XOR
  $ => A :MLOAD(SP + 2864)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2614888103n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2896)
  $ => A :ADD
  B :MSTORE(SP + 2856)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2848)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2840)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2848)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2840)
  $ => A :XOR
  A :MSTORE(SP + 2840)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2848)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2840)
  $ => A :XOR
  $ => B :MLOAD(SP + 2960)
  A => E
  $ => A :MLOAD(SP + 2904)
  $ => C :XOR
  $ => A :MLOAD(SP + 2848)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2904)
  B => D
  $ => B :MLOAD(SP + 2960)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => E :MLOAD(SP + 72)
  A :MSTORE(SP + 2840)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 60)
  A => CTX
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2832)
  65280n => B  ;; LoadConst32
  CTX => A
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2832)
  $ => A :OR
  A :MSTORE(SP + 2832)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 2824)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  CTX => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2824)
  $ => B :OR
  $ => A :MLOAD(SP + 2832)
  $ => A :OR
  $ => B :MLOAD(SP + 2984)
  A :MSTORE(SP + 2824)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3072)
  A => E
  $ => A :MLOAD(SP + 2856)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2816)
  $ => B :MLOAD(SP + 2928)
  $ => A :MLOAD(SP + 2872)
  $ => C :XOR
  $ => A :MLOAD(SP + 2816)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2928)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2808)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2800)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2800)
  $ => A :XOR
  A :MSTORE(SP + 2800)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2800)
  $ => B :XOR
  $ => A :MLOAD(SP + 2808)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3248222580n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2840)
  $ => A :ADD
  B :MSTORE(SP + 2800)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2792)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2784)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2792)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2784)
  $ => A :XOR
  A :MSTORE(SP + 2784)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2792)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2784)
  $ => A :XOR
  $ => B :MLOAD(SP + 2904)
  A => E
  $ => A :MLOAD(SP + 2848)
  $ => C :XOR
  $ => A :MLOAD(SP + 2792)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2848)
  B => D
  $ => B :MLOAD(SP + 2904)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2784)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3608)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2776)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3608)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2776)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3648)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3160)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2776)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2880)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2768)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2880)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2768)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2776)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2928)
  A :MSTORE(SP + 2768)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3016)
  A => D
  $ => A :MLOAD(SP + 2800)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2760)
  $ => B :MLOAD(SP + 2872)
  $ => A :MLOAD(SP + 2816)
  $ => C :XOR
  $ => A :MLOAD(SP + 2760)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2872)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2752)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2744)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2744)
  $ => A :XOR
  A :MSTORE(SP + 2744)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2744)
  $ => B :XOR
  $ => A :MLOAD(SP + 2752)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3835390401n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2784)
  $ => A :ADD
  B :MSTORE(SP + 2744)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2736)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2728)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2736)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2728)
  $ => A :XOR
  A :MSTORE(SP + 2728)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2736)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2728)
  $ => A :XOR
  $ => B :MLOAD(SP + 2848)
  A => E
  $ => A :MLOAD(SP + 2792)
  $ => C :XOR
  $ => A :MLOAD(SP + 2736)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2792)
  B => D
  $ => B :MLOAD(SP + 2848)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2728)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3552)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2720)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3552)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2720)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3608)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3104)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2720)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2824)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2712)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2824)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2712)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2720)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2872)
  A :MSTORE(SP + 2712)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2960)
  A => D
  $ => A :MLOAD(SP + 2744)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2704)
  $ => B :MLOAD(SP + 2816)
  $ => A :MLOAD(SP + 2760)
  $ => C :XOR
  $ => A :MLOAD(SP + 2704)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2816)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2696)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2688)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2688)
  $ => A :XOR
  A :MSTORE(SP + 2688)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2688)
  $ => B :XOR
  $ => A :MLOAD(SP + 2696)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4022224774n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2728)
  $ => A :ADD
  B :MSTORE(SP + 2688)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2680)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2672)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2680)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2672)
  $ => A :XOR
  A :MSTORE(SP + 2672)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2680)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2672)
  $ => A :XOR
  $ => B :MLOAD(SP + 2792)
  A => E
  $ => A :MLOAD(SP + 2736)
  $ => C :XOR
  $ => A :MLOAD(SP + 2680)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2736)
  B => D
  $ => B :MLOAD(SP + 2792)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2672)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3496)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2664)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3496)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2664)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3552)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3048)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2664)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2768)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2656)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2768)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2656)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2664)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2816)
  A :MSTORE(SP + 2656)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2904)
  A => D
  $ => A :MLOAD(SP + 2688)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2648)
  $ => B :MLOAD(SP + 2760)
  $ => A :MLOAD(SP + 2704)
  $ => C :XOR
  $ => A :MLOAD(SP + 2648)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2760)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2640)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2632)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2632)
  $ => A :XOR
  A :MSTORE(SP + 2632)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2632)
  $ => B :XOR
  $ => A :MLOAD(SP + 2640)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  264347078n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2672)
  $ => A :ADD
  B :MSTORE(SP + 2632)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2624)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2616)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2624)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2616)
  $ => A :XOR
  A :MSTORE(SP + 2616)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2624)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2616)
  $ => A :XOR
  $ => B :MLOAD(SP + 2736)
  A => E
  $ => A :MLOAD(SP + 2680)
  $ => C :XOR
  $ => A :MLOAD(SP + 2624)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2680)
  B => D
  $ => B :MLOAD(SP + 2736)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2616)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3440)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2608)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3440)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2608)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3496)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2992)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2608)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2712)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2600)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2712)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2600)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2608)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2760)
  A :MSTORE(SP + 2600)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2848)
  A => D
  $ => A :MLOAD(SP + 2632)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2592)
  $ => B :MLOAD(SP + 2704)
  $ => A :MLOAD(SP + 2648)
  $ => C :XOR
  $ => A :MLOAD(SP + 2592)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2704)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2584)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2576)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2576)
  $ => A :XOR
  A :MSTORE(SP + 2576)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2576)
  $ => B :XOR
  $ => A :MLOAD(SP + 2584)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  604807628n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2616)
  $ => A :ADD
  B :MSTORE(SP + 2576)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2568)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2560)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2568)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2560)
  $ => A :XOR
  A :MSTORE(SP + 2560)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2568)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2560)
  $ => A :XOR
  $ => B :MLOAD(SP + 2680)
  A => E
  $ => A :MLOAD(SP + 2624)
  $ => C :XOR
  $ => A :MLOAD(SP + 2568)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2624)
  B => D
  $ => B :MLOAD(SP + 2680)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2560)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3384)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2552)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3384)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2552)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3440)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2936)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2552)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2656)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2544)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2656)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2544)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2552)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2704)
  A :MSTORE(SP + 2544)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2792)
  A => E
  $ => A :MLOAD(SP + 2576)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2536)
  $ => B :MLOAD(SP + 2648)
  $ => A :MLOAD(SP + 2592)
  $ => C :XOR
  $ => A :MLOAD(SP + 2536)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2648)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2528)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2520)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2520)
  $ => A :XOR
  A :MSTORE(SP + 2520)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2520)
  $ => B :XOR
  $ => A :MLOAD(SP + 2528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  770255983n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2560)
  $ => A :ADD
  B :MSTORE(SP + 2520)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2512)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2504)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2512)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2504)
  $ => A :XOR
  A :MSTORE(SP + 2504)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2512)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2504)
  $ => A :XOR
  $ => B :MLOAD(SP + 2624)
  A => E
  $ => A :MLOAD(SP + 2568)
  $ => C :XOR
  $ => A :MLOAD(SP + 2512)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2568)
  B => D
  $ => B :MLOAD(SP + 2624)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2504)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3328)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2496)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3328)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2496)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3384)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2880)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2496)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2488)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2488)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2496)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2648)
  A :MSTORE(SP + 2488)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2736)
  A => D
  $ => A :MLOAD(SP + 2520)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2480)
  $ => B :MLOAD(SP + 2592)
  $ => A :MLOAD(SP + 2536)
  $ => C :XOR
  $ => A :MLOAD(SP + 2480)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2592)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2472)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2464)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2464)
  $ => A :XOR
  A :MSTORE(SP + 2464)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2464)
  $ => B :XOR
  $ => A :MLOAD(SP + 2472)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1249150122n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2504)
  $ => A :ADD
  B :MSTORE(SP + 2464)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2456)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2448)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2456)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2448)
  $ => A :XOR
  A :MSTORE(SP + 2448)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2456)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2448)
  $ => A :XOR
  $ => B :MLOAD(SP + 2568)
  A => E
  $ => A :MLOAD(SP + 2512)
  $ => C :XOR
  $ => A :MLOAD(SP + 2456)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2512)
  B => D
  $ => B :MLOAD(SP + 2568)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2448)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3272)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2440)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3272)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2440)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2824)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2440)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2432)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2432)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2440)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2592)
  A :MSTORE(SP + 2432)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2680)
  A => D
  $ => A :MLOAD(SP + 2464)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2424)
  $ => B :MLOAD(SP + 2536)
  $ => A :MLOAD(SP + 2480)
  $ => C :XOR
  $ => A :MLOAD(SP + 2424)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2536)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2416)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2408)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2408)
  $ => A :XOR
  A :MSTORE(SP + 2408)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2408)
  $ => B :XOR
  $ => A :MLOAD(SP + 2416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1555081692n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2448)
  $ => A :ADD
  B :MSTORE(SP + 2408)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2400)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2392)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2400)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2392)
  $ => A :XOR
  A :MSTORE(SP + 2392)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2400)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2392)
  $ => A :XOR
  $ => B :MLOAD(SP + 2512)
  A => E
  $ => A :MLOAD(SP + 2456)
  $ => C :XOR
  $ => A :MLOAD(SP + 2400)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2456)
  B => D
  $ => B :MLOAD(SP + 2512)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2392)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3216)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2384)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3216)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2384)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3272)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2768)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2384)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2376)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2376)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2384)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2536)
  A :MSTORE(SP + 2376)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2624)
  A => D
  $ => A :MLOAD(SP + 2408)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2368)
  $ => B :MLOAD(SP + 2480)
  $ => A :MLOAD(SP + 2424)
  $ => C :XOR
  $ => A :MLOAD(SP + 2368)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2480)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2360)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2352)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2352)
  $ => A :XOR
  A :MSTORE(SP + 2352)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2352)
  $ => B :XOR
  $ => A :MLOAD(SP + 2360)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1996064986n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2392)
  $ => A :ADD
  B :MSTORE(SP + 2352)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2344)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2336)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2344)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2336)
  $ => A :XOR
  A :MSTORE(SP + 2336)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2344)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2336)
  $ => A :XOR
  $ => B :MLOAD(SP + 2456)
  A => E
  $ => A :MLOAD(SP + 2400)
  $ => C :XOR
  $ => A :MLOAD(SP + 2344)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2400)
  B => D
  $ => B :MLOAD(SP + 2456)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2336)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3160)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2328)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3160)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2328)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3216)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2712)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2328)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2320)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2320)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2480)
  A :MSTORE(SP + 2320)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2568)
  A => D
  $ => A :MLOAD(SP + 2352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2312)
  $ => B :MLOAD(SP + 2424)
  $ => A :MLOAD(SP + 2368)
  $ => C :XOR
  $ => A :MLOAD(SP + 2312)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2424)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2304)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2296)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2296)
  $ => A :XOR
  A :MSTORE(SP + 2296)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2296)
  $ => B :XOR
  $ => A :MLOAD(SP + 2304)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2554220882n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2336)
  $ => A :ADD
  B :MSTORE(SP + 2296)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2288)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2280)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2288)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2280)
  $ => A :XOR
  A :MSTORE(SP + 2280)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2288)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2280)
  $ => A :XOR
  $ => B :MLOAD(SP + 2400)
  A => E
  $ => A :MLOAD(SP + 2344)
  $ => C :XOR
  $ => A :MLOAD(SP + 2288)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2344)
  B => D
  $ => B :MLOAD(SP + 2400)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2280)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3104)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2272)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3104)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2272)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3160)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2272)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2264)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2264)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2272)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2424)
  A :MSTORE(SP + 2264)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2512)
  A => E
  $ => A :MLOAD(SP + 2296)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2256)
  $ => B :MLOAD(SP + 2368)
  $ => A :MLOAD(SP + 2312)
  $ => C :XOR
  $ => A :MLOAD(SP + 2256)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2368)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2248)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2240)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2240)
  $ => A :XOR
  A :MSTORE(SP + 2240)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2240)
  $ => B :XOR
  $ => A :MLOAD(SP + 2248)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2821834349n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2280)
  $ => A :ADD
  B :MSTORE(SP + 2240)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2232)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2224)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2232)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2224)
  $ => A :XOR
  A :MSTORE(SP + 2224)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2232)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2224)
  $ => A :XOR
  $ => B :MLOAD(SP + 2344)
  A => E
  $ => A :MLOAD(SP + 2288)
  $ => C :XOR
  $ => A :MLOAD(SP + 2232)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2288)
  B => D
  $ => B :MLOAD(SP + 2344)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2224)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3048)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2216)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 3048)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 3048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2216)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3104)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2600)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2216)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2208)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2208)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2216)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2368)
  A :MSTORE(SP + 2208)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2456)
  A => D
  $ => A :MLOAD(SP + 2240)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2200)
  $ => B :MLOAD(SP + 2312)
  $ => A :MLOAD(SP + 2256)
  $ => C :XOR
  $ => A :MLOAD(SP + 2200)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2312)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2192)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2184)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2184)
  $ => A :XOR
  A :MSTORE(SP + 2184)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2184)
  $ => B :XOR
  $ => A :MLOAD(SP + 2192)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2952996808n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2224)
  $ => A :ADD
  B :MSTORE(SP + 2184)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2176)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2168)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2176)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2168)
  $ => A :XOR
  A :MSTORE(SP + 2168)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2176)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2168)
  $ => A :XOR
  $ => B :MLOAD(SP + 2288)
  A => E
  $ => A :MLOAD(SP + 2232)
  $ => C :XOR
  $ => A :MLOAD(SP + 2176)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2232)
  B => D
  $ => B :MLOAD(SP + 2288)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2168)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2992)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2160)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2992)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2160)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 3048)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2160)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2152)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2152)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2160)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2312)
  A :MSTORE(SP + 2152)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2400)
  A => D
  $ => A :MLOAD(SP + 2184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2144)
  $ => B :MLOAD(SP + 2256)
  $ => A :MLOAD(SP + 2200)
  $ => C :XOR
  $ => A :MLOAD(SP + 2144)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2256)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2136)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2128)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2128)
  $ => A :XOR
  A :MSTORE(SP + 2128)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2128)
  $ => B :XOR
  $ => A :MLOAD(SP + 2136)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3210313671n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2168)
  $ => A :ADD
  B :MSTORE(SP + 2128)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2120)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2112)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2120)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2112)
  $ => A :XOR
  A :MSTORE(SP + 2112)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2120)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2112)
  $ => A :XOR
  $ => B :MLOAD(SP + 2232)
  A => E
  $ => A :MLOAD(SP + 2176)
  $ => C :XOR
  $ => A :MLOAD(SP + 2120)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2176)
  B => D
  $ => B :MLOAD(SP + 2232)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2112)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2936)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2104)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2936)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2104)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2992)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2488)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2104)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2096)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2096)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2104)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2256)
  A :MSTORE(SP + 2096)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2344)
  A => D
  $ => A :MLOAD(SP + 2128)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2088)
  $ => B :MLOAD(SP + 2200)
  $ => A :MLOAD(SP + 2144)
  $ => C :XOR
  $ => A :MLOAD(SP + 2088)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2200)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2080)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2072)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2072)
  $ => A :XOR
  A :MSTORE(SP + 2072)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2072)
  $ => B :XOR
  $ => A :MLOAD(SP + 2080)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3336571891n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2112)
  $ => A :ADD
  B :MSTORE(SP + 2072)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2064)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2056)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2064)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2056)
  $ => A :XOR
  A :MSTORE(SP + 2056)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2064)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2056)
  $ => A :XOR
  $ => B :MLOAD(SP + 2176)
  A => E
  $ => A :MLOAD(SP + 2120)
  $ => C :XOR
  $ => A :MLOAD(SP + 2064)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2120)
  B => D
  $ => B :MLOAD(SP + 2176)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2056)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2880)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2048)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2880)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2048)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2936)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2432)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2048)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2040)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2040)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 2048)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2200)
  A :MSTORE(SP + 2040)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2288)
  A => D
  $ => A :MLOAD(SP + 2072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2032)
  $ => B :MLOAD(SP + 2144)
  $ => A :MLOAD(SP + 2088)
  $ => C :XOR
  $ => A :MLOAD(SP + 2032)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2144)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2024)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2016)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2016)
  $ => A :XOR
  A :MSTORE(SP + 2016)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2016)
  $ => B :XOR
  $ => A :MLOAD(SP + 2024)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3584528711n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2056)
  $ => A :ADD
  B :MSTORE(SP + 2016)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2008)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 2000)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2008)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2000)
  $ => A :XOR
  A :MSTORE(SP + 2000)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2008)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 2000)
  $ => A :XOR
  $ => B :MLOAD(SP + 2120)
  A => E
  $ => A :MLOAD(SP + 2064)
  $ => C :XOR
  $ => A :MLOAD(SP + 2008)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2064)
  B => D
  $ => B :MLOAD(SP + 2120)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2000)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2824)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1992)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2824)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1992)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2880)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1992)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1984)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1984)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1992)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2144)
  A :MSTORE(SP + 1984)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2232)
  A => E
  $ => A :MLOAD(SP + 2016)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1976)
  $ => B :MLOAD(SP + 2088)
  $ => A :MLOAD(SP + 2032)
  $ => C :XOR
  $ => A :MLOAD(SP + 1976)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2088)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1968)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1960)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1960)
  $ => A :XOR
  A :MSTORE(SP + 1960)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1960)
  $ => B :XOR
  $ => A :MLOAD(SP + 1968)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  113926993n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2000)
  $ => A :ADD
  B :MSTORE(SP + 1960)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1952)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1952)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1944)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1952)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1952)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1944)
  $ => A :XOR
  A :MSTORE(SP + 1944)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1952)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1952)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1944)
  $ => A :XOR
  $ => B :MLOAD(SP + 2064)
  A => E
  $ => A :MLOAD(SP + 2008)
  $ => C :XOR
  $ => A :MLOAD(SP + 1952)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2008)
  B => D
  $ => B :MLOAD(SP + 2064)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1944)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2768)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1936)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2768)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1936)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2824)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2320)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1936)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1928)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1928)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1936)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2088)
  A :MSTORE(SP + 1928)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2176)
  A => D
  $ => A :MLOAD(SP + 1960)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1920)
  $ => B :MLOAD(SP + 2032)
  $ => A :MLOAD(SP + 1976)
  $ => C :XOR
  $ => A :MLOAD(SP + 1920)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2032)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1912)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1920)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1904)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1920)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1904)
  $ => A :XOR
  A :MSTORE(SP + 1904)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1920)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1904)
  $ => B :XOR
  $ => A :MLOAD(SP + 1912)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  338241895n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1944)
  $ => A :ADD
  B :MSTORE(SP + 1904)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1896)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1888)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1896)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1888)
  $ => A :XOR
  A :MSTORE(SP + 1888)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1896)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1888)
  $ => A :XOR
  $ => B :MLOAD(SP + 2008)
  A => E
  $ => A :MLOAD(SP + 1952)
  $ => C :XOR
  $ => A :MLOAD(SP + 1896)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1952)
  B => D
  $ => B :MLOAD(SP + 2008)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1888)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2712)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1880)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2712)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1880)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2768)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1880)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1872)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1872)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1880)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2032)
  A :MSTORE(SP + 1872)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2120)
  A => D
  $ => A :MLOAD(SP + 1904)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1864)
  $ => B :MLOAD(SP + 1976)
  $ => A :MLOAD(SP + 1920)
  $ => C :XOR
  $ => A :MLOAD(SP + 1864)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1976)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1856)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1864)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1848)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1864)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1848)
  $ => A :XOR
  A :MSTORE(SP + 1848)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1864)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1848)
  $ => B :XOR
  $ => A :MLOAD(SP + 1856)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  666307205n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1888)
  $ => A :ADD
  B :MSTORE(SP + 1848)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1840)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1832)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1840)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1832)
  $ => A :XOR
  A :MSTORE(SP + 1832)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1840)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1832)
  $ => A :XOR
  $ => B :MLOAD(SP + 1952)
  A => E
  $ => A :MLOAD(SP + 1896)
  $ => C :XOR
  $ => A :MLOAD(SP + 1840)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1896)
  B => D
  $ => B :MLOAD(SP + 1952)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1832)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2656)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1824)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2656)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1824)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2712)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2208)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1824)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1816)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1816)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1824)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1976)
  A :MSTORE(SP + 1816)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2064)
  A => D
  $ => A :MLOAD(SP + 1848)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1808)
  $ => B :MLOAD(SP + 1920)
  $ => A :MLOAD(SP + 1864)
  $ => C :XOR
  $ => A :MLOAD(SP + 1808)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1920)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1800)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1808)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1792)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1808)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1792)
  $ => A :XOR
  A :MSTORE(SP + 1792)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1808)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1792)
  $ => B :XOR
  $ => A :MLOAD(SP + 1800)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  773529912n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1832)
  $ => A :ADD
  B :MSTORE(SP + 1792)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1784)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1776)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1784)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1776)
  $ => A :XOR
  A :MSTORE(SP + 1776)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1784)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1776)
  $ => A :XOR
  $ => B :MLOAD(SP + 1896)
  A => E
  $ => A :MLOAD(SP + 1840)
  $ => C :XOR
  $ => A :MLOAD(SP + 1784)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1840)
  B => D
  $ => B :MLOAD(SP + 1896)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1776)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1768)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2600)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1768)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1768)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1760)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1760)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1768)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1920)
  A :MSTORE(SP + 1760)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2008)
  A => D
  $ => A :MLOAD(SP + 1792)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1752)
  $ => B :MLOAD(SP + 1864)
  $ => A :MLOAD(SP + 1808)
  $ => C :XOR
  $ => A :MLOAD(SP + 1752)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1864)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1744)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1752)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1736)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1752)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1736)
  $ => A :XOR
  A :MSTORE(SP + 1736)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1752)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1736)
  $ => B :XOR
  $ => A :MLOAD(SP + 1744)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1294757372n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1776)
  $ => A :ADD
  B :MSTORE(SP + 1736)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1728)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1720)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1728)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1720)
  $ => A :XOR
  A :MSTORE(SP + 1720)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1728)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1720)
  $ => A :XOR
  $ => B :MLOAD(SP + 1840)
  A => E
  $ => A :MLOAD(SP + 1784)
  $ => C :XOR
  $ => A :MLOAD(SP + 1728)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1784)
  B => D
  $ => B :MLOAD(SP + 1840)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1720)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1712)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2544)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1712)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2600)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2096)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1712)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1704)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1704)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1712)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1864)
  A :MSTORE(SP + 1704)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1952)
  A => E
  $ => A :MLOAD(SP + 1736)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1696)
  $ => B :MLOAD(SP + 1808)
  $ => A :MLOAD(SP + 1752)
  $ => C :XOR
  $ => A :MLOAD(SP + 1696)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1808)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1688)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1696)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1680)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1696)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1680)
  $ => A :XOR
  A :MSTORE(SP + 1680)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1696)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1680)
  $ => B :XOR
  $ => A :MLOAD(SP + 1688)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1396182291n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1720)
  $ => A :ADD
  B :MSTORE(SP + 1680)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1672)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1664)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1672)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1664)
  $ => A :XOR
  A :MSTORE(SP + 1664)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1672)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1664)
  $ => A :XOR
  $ => B :MLOAD(SP + 1784)
  A => E
  $ => A :MLOAD(SP + 1728)
  $ => C :XOR
  $ => A :MLOAD(SP + 1672)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1728)
  B => D
  $ => B :MLOAD(SP + 1784)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1664)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1656)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2488)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1656)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2040)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1656)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1648)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1648)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1808)
  A :MSTORE(SP + 1648)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1896)
  A => D
  $ => A :MLOAD(SP + 1680)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1640)
  $ => B :MLOAD(SP + 1752)
  $ => A :MLOAD(SP + 1696)
  $ => C :XOR
  $ => A :MLOAD(SP + 1640)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1752)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1632)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1640)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1624)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1640)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1624)
  $ => A :XOR
  A :MSTORE(SP + 1624)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1640)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1624)
  $ => B :XOR
  $ => A :MLOAD(SP + 1632)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1695183700n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1664)
  $ => A :ADD
  B :MSTORE(SP + 1624)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1616)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1608)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1616)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1608)
  $ => A :XOR
  A :MSTORE(SP + 1608)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1616)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1608)
  $ => A :XOR
  $ => B :MLOAD(SP + 1728)
  A => E
  $ => A :MLOAD(SP + 1672)
  $ => C :XOR
  $ => A :MLOAD(SP + 1616)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1672)
  B => D
  $ => B :MLOAD(SP + 1728)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1608)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1600)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2432)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1600)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2488)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1984)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1600)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1592)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1592)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1600)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1752)
  A :MSTORE(SP + 1592)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1840)
  A => D
  $ => A :MLOAD(SP + 1624)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1584)
  $ => B :MLOAD(SP + 1696)
  $ => A :MLOAD(SP + 1640)
  $ => C :XOR
  $ => A :MLOAD(SP + 1584)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1696)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1576)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1584)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1568)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1584)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1568)
  $ => A :XOR
  A :MSTORE(SP + 1568)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1584)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1568)
  $ => B :XOR
  $ => A :MLOAD(SP + 1576)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1986661051n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1608)
  $ => A :ADD
  B :MSTORE(SP + 1568)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1560)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1552)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1560)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1552)
  $ => A :XOR
  A :MSTORE(SP + 1552)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1560)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1552)
  $ => A :XOR
  $ => B :MLOAD(SP + 1672)
  A => E
  $ => A :MLOAD(SP + 1616)
  $ => C :XOR
  $ => A :MLOAD(SP + 1560)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1616)
  B => D
  $ => B :MLOAD(SP + 1672)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1552)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1544)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2376)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1544)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2432)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1928)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1544)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1536)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1536)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1696)
  A :MSTORE(SP + 1536)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1784)
  A => D
  $ => A :MLOAD(SP + 1568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1528)
  $ => B :MLOAD(SP + 1640)
  $ => A :MLOAD(SP + 1584)
  $ => C :XOR
  $ => A :MLOAD(SP + 1528)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1640)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1520)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1528)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1512)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1528)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1512)
  $ => A :XOR
  A :MSTORE(SP + 1512)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1528)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1512)
  $ => B :XOR
  $ => A :MLOAD(SP + 1520)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2177026350n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1552)
  $ => A :ADD
  B :MSTORE(SP + 1512)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1504)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1496)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1504)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1496)
  $ => A :XOR
  A :MSTORE(SP + 1496)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1504)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1496)
  $ => A :XOR
  $ => B :MLOAD(SP + 1616)
  A => E
  $ => A :MLOAD(SP + 1560)
  $ => C :XOR
  $ => A :MLOAD(SP + 1504)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1560)
  B => D
  $ => B :MLOAD(SP + 1616)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1496)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1488)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2320)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1488)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1488)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1480)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1480)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1488)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1640)
  A :MSTORE(SP + 1480)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1728)
  A => D
  $ => A :MLOAD(SP + 1512)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1472)
  $ => B :MLOAD(SP + 1584)
  $ => A :MLOAD(SP + 1528)
  $ => C :XOR
  $ => A :MLOAD(SP + 1472)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1584)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1464)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1472)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1456)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1472)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1456)
  $ => A :XOR
  A :MSTORE(SP + 1456)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1472)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1456)
  $ => B :XOR
  $ => A :MLOAD(SP + 1464)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2456956037n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1496)
  $ => A :ADD
  B :MSTORE(SP + 1456)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1448)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1440)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1448)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1440)
  $ => A :XOR
  A :MSTORE(SP + 1440)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1448)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1440)
  $ => A :XOR
  $ => B :MLOAD(SP + 1560)
  A => E
  $ => A :MLOAD(SP + 1504)
  $ => C :XOR
  $ => A :MLOAD(SP + 1448)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1504)
  B => D
  $ => B :MLOAD(SP + 1560)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1440)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1432)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2264)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1432)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2320)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1816)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1432)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1424)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1424)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1432)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1584)
  A :MSTORE(SP + 1424)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1672)
  A => E
  $ => A :MLOAD(SP + 1456)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1416)
  $ => B :MLOAD(SP + 1528)
  $ => A :MLOAD(SP + 1472)
  $ => C :XOR
  $ => A :MLOAD(SP + 1416)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1528)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1408)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1416)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1400)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1416)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1400)
  $ => A :XOR
  A :MSTORE(SP + 1400)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1416)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1400)
  $ => B :XOR
  $ => A :MLOAD(SP + 1408)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2730485921n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1440)
  $ => A :ADD
  B :MSTORE(SP + 1400)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1392)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1384)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1392)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1384)
  $ => A :XOR
  A :MSTORE(SP + 1384)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1392)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1384)
  $ => A :XOR
  $ => B :MLOAD(SP + 1504)
  A => E
  $ => A :MLOAD(SP + 1448)
  $ => C :XOR
  $ => A :MLOAD(SP + 1392)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1448)
  B => D
  $ => B :MLOAD(SP + 1504)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1384)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1376)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2208)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1376)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1760)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1376)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1368)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1368)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1528)
  A :MSTORE(SP + 1368)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1616)
  A => D
  $ => A :MLOAD(SP + 1400)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1360)
  $ => B :MLOAD(SP + 1472)
  $ => A :MLOAD(SP + 1416)
  $ => C :XOR
  $ => A :MLOAD(SP + 1360)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1472)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1352)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1360)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1344)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1360)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1344)
  $ => A :XOR
  A :MSTORE(SP + 1344)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1360)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1344)
  $ => B :XOR
  $ => A :MLOAD(SP + 1352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2820302411n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1384)
  $ => A :ADD
  B :MSTORE(SP + 1344)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1336)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1328)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1336)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1328)
  $ => A :XOR
  A :MSTORE(SP + 1328)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1336)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1328)
  $ => A :XOR
  $ => B :MLOAD(SP + 1448)
  A => E
  $ => A :MLOAD(SP + 1392)
  $ => C :XOR
  $ => A :MLOAD(SP + 1336)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1392)
  B => D
  $ => B :MLOAD(SP + 1448)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1328)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1320)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1320)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2208)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1704)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1320)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1312)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1312)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1320)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1472)
  A :MSTORE(SP + 1312)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1560)
  A => D
  $ => A :MLOAD(SP + 1344)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1304)
  $ => B :MLOAD(SP + 1416)
  $ => A :MLOAD(SP + 1360)
  $ => C :XOR
  $ => A :MLOAD(SP + 1304)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1416)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1296)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1304)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1288)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1304)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1288)
  $ => A :XOR
  A :MSTORE(SP + 1288)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1304)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1288)
  $ => B :XOR
  $ => A :MLOAD(SP + 1296)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3259730800n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1328)
  $ => A :ADD
  B :MSTORE(SP + 1288)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1280)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1272)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1280)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1272)
  $ => A :XOR
  A :MSTORE(SP + 1272)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1280)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1272)
  $ => A :XOR
  $ => B :MLOAD(SP + 1392)
  A => E
  $ => A :MLOAD(SP + 1336)
  $ => C :XOR
  $ => A :MLOAD(SP + 1280)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1336)
  B => D
  $ => B :MLOAD(SP + 1392)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1272)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1264)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2096)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1264)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1648)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1264)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1256)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1256)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1416)
  A :MSTORE(SP + 1256)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1504)
  A => D
  $ => A :MLOAD(SP + 1288)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1248)
  $ => B :MLOAD(SP + 1360)
  $ => A :MLOAD(SP + 1304)
  $ => C :XOR
  $ => A :MLOAD(SP + 1248)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1360)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1240)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1248)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1232)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1248)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1232)
  $ => A :XOR
  A :MSTORE(SP + 1232)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1248)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1232)
  $ => B :XOR
  $ => A :MLOAD(SP + 1240)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3345764771n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1272)
  $ => A :ADD
  B :MSTORE(SP + 1232)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1224)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1216)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1224)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1216)
  $ => A :XOR
  A :MSTORE(SP + 1216)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1224)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1216)
  $ => A :XOR
  $ => B :MLOAD(SP + 1336)
  A => E
  $ => A :MLOAD(SP + 1280)
  $ => C :XOR
  $ => A :MLOAD(SP + 1224)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1280)
  B => D
  $ => B :MLOAD(SP + 1336)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1216)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1208)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 2040)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 2040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1208)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2096)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1592)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1208)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1200)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1200)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1208)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1360)
  A :MSTORE(SP + 1200)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1448)
  A => D
  $ => A :MLOAD(SP + 1232)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1192)
  $ => B :MLOAD(SP + 1304)
  $ => A :MLOAD(SP + 1248)
  $ => C :XOR
  $ => A :MLOAD(SP + 1192)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1304)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1184)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1192)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1176)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1192)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1176)
  $ => A :XOR
  A :MSTORE(SP + 1176)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1192)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1176)
  $ => B :XOR
  $ => A :MLOAD(SP + 1184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3516065817n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1216)
  $ => A :ADD
  B :MSTORE(SP + 1176)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1168)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1160)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1168)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1160)
  $ => A :XOR
  A :MSTORE(SP + 1160)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1168)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1160)
  $ => A :XOR
  $ => B :MLOAD(SP + 1280)
  A => E
  $ => A :MLOAD(SP + 1224)
  $ => C :XOR
  $ => A :MLOAD(SP + 1168)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1224)
  B => D
  $ => B :MLOAD(SP + 1280)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1160)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1152)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1984)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1152)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 2040)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1536)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1152)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1144)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1144)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1304)
  A :MSTORE(SP + 1144)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1392)
  A => E
  $ => A :MLOAD(SP + 1176)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1136)
  $ => B :MLOAD(SP + 1248)
  $ => A :MLOAD(SP + 1192)
  $ => C :XOR
  $ => A :MLOAD(SP + 1136)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1248)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1128)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1136)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1120)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1136)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1120)
  $ => A :XOR
  A :MSTORE(SP + 1120)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1136)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1120)
  $ => B :XOR
  $ => A :MLOAD(SP + 1128)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3600352804n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1160)
  $ => A :ADD
  B :MSTORE(SP + 1120)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1112)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1104)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1112)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1104)
  $ => A :XOR
  A :MSTORE(SP + 1104)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1112)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1104)
  $ => A :XOR
  $ => B :MLOAD(SP + 1224)
  A => E
  $ => A :MLOAD(SP + 1168)
  $ => C :XOR
  $ => A :MLOAD(SP + 1112)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1168)
  B => D
  $ => B :MLOAD(SP + 1224)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1104)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1096)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1928)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1096)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1984)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1096)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1088)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1088)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1096)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1248)
  A :MSTORE(SP + 1088)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1336)
  A => D
  $ => A :MLOAD(SP + 1120)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1080)
  $ => B :MLOAD(SP + 1192)
  $ => A :MLOAD(SP + 1136)
  $ => C :XOR
  $ => A :MLOAD(SP + 1080)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1192)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1072)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1080)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1064)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1080)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1064)
  $ => A :XOR
  A :MSTORE(SP + 1064)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1080)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1064)
  $ => B :XOR
  $ => A :MLOAD(SP + 1072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4094571909n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1104)
  $ => A :ADD
  B :MSTORE(SP + 1064)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1056)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1048)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1056)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1048)
  $ => A :XOR
  A :MSTORE(SP + 1048)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1056)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1048)
  $ => A :XOR
  $ => B :MLOAD(SP + 1168)
  A => E
  $ => A :MLOAD(SP + 1112)
  $ => C :XOR
  $ => A :MLOAD(SP + 1056)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1112)
  B => D
  $ => B :MLOAD(SP + 1168)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1048)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1040)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1872)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1040)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1928)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1424)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1040)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1032)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1032)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1040)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1192)
  A :MSTORE(SP + 1032)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1280)
  A => D
  $ => A :MLOAD(SP + 1064)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1024)
  $ => B :MLOAD(SP + 1136)
  $ => A :MLOAD(SP + 1080)
  $ => C :XOR
  $ => A :MLOAD(SP + 1024)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1136)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1016)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1024)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 1008)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1024)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1008)
  $ => A :XOR
  A :MSTORE(SP + 1008)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1024)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 1008)
  $ => B :XOR
  $ => A :MLOAD(SP + 1016)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  275423344n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1048)
  $ => A :ADD
  B :MSTORE(SP + 1008)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1000)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 992)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1000)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 992)
  $ => A :XOR
  A :MSTORE(SP + 992)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1000)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 992)
  $ => A :XOR
  $ => B :MLOAD(SP + 1112)
  A => E
  $ => A :MLOAD(SP + 1056)
  $ => C :XOR
  $ => A :MLOAD(SP + 1000)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1056)
  B => D
  $ => B :MLOAD(SP + 1112)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 992)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 984)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1816)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 984)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1368)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 984)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 976)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 976)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 984)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1136)
  A :MSTORE(SP + 976)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1224)
  A => D
  $ => A :MLOAD(SP + 1008)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 968)
  $ => B :MLOAD(SP + 1080)
  $ => A :MLOAD(SP + 1024)
  $ => C :XOR
  $ => A :MLOAD(SP + 968)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1080)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 960)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 968)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 952)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 968)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 952)
  $ => A :XOR
  A :MSTORE(SP + 952)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 968)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 952)
  $ => B :XOR
  $ => A :MLOAD(SP + 960)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  430227734n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 992)
  $ => A :ADD
  B :MSTORE(SP + 952)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 944)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 936)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 944)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 936)
  $ => A :XOR
  A :MSTORE(SP + 936)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 944)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 936)
  $ => A :XOR
  $ => B :MLOAD(SP + 1056)
  A => E
  $ => A :MLOAD(SP + 1000)
  $ => C :XOR
  $ => A :MLOAD(SP + 944)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1000)
  B => D
  $ => B :MLOAD(SP + 1056)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 936)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 928)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1760)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 928)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1816)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 928)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 920)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 920)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 928)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1080)
  $ => D :ADD
  A :MSTORE(SP + 920)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1168)
  A => D
  $ => A :MLOAD(SP + 952)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 912)
  $ => B :MLOAD(SP + 1024)
  $ => A :MLOAD(SP + 968)
  $ => C :XOR
  $ => A :MLOAD(SP + 912)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1024)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 904)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 912)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 896)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 912)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 896)
  $ => A :XOR
  A :MSTORE(SP + 896)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 912)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 896)
  $ => B :XOR
  $ => A :MLOAD(SP + 904)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  506948616n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 936)
  $ => A :ADD
  B :MSTORE(SP + 896)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 888)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 880)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 888)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 880)
  $ => A :XOR
  A :MSTORE(SP + 880)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 888)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 880)
  $ => A :XOR
  $ => B :MLOAD(SP + 1000)
  A => D
  $ => A :MLOAD(SP + 944)
  $ => C :XOR
  $ => A :MLOAD(SP + 888)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 944)
  B => E
  $ => B :MLOAD(SP + 1000)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 880)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 872)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1704)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 872)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1760)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1256)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 872)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 864)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 864)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1024)
  $ => D :ADD
  A :MSTORE(SP + 864)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1112)
  A => E
  $ => A :MLOAD(SP + 896)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 856)
  $ => B :MLOAD(SP + 968)
  $ => A :MLOAD(SP + 912)
  $ => C :XOR
  $ => A :MLOAD(SP + 856)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 968)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 848)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 856)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 840)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 856)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 840)
  $ => A :XOR
  A :MSTORE(SP + 840)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 856)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 840)
  $ => B :XOR
  $ => A :MLOAD(SP + 848)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  659060556n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 880)
  $ => A :ADD
  B :MSTORE(SP + 840)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 832)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 824)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 832)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 824)
  $ => A :XOR
  A :MSTORE(SP + 824)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 832)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 824)
  $ => A :XOR
  $ => B :MLOAD(SP + 944)
  A => D
  $ => A :MLOAD(SP + 888)
  $ => C :XOR
  $ => A :MLOAD(SP + 832)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 888)
  B => E
  $ => B :MLOAD(SP + 944)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 824)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 816)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1648)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 816)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1704)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 816)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 920)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 808)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 920)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 808)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 816)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 968)
  $ => D :ADD
  A :MSTORE(SP + 808)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1056)
  A => D
  $ => A :MLOAD(SP + 840)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 800)
  $ => B :MLOAD(SP + 912)
  $ => A :MLOAD(SP + 856)
  $ => C :XOR
  $ => A :MLOAD(SP + 800)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 912)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 792)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 800)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 784)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 800)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 784)
  $ => A :XOR
  A :MSTORE(SP + 784)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 800)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 784)
  $ => B :XOR
  $ => A :MLOAD(SP + 792)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  883997877n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 824)
  $ => A :ADD
  B :MSTORE(SP + 784)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 776)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 768)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 776)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 768)
  $ => A :XOR
  A :MSTORE(SP + 768)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 776)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 768)
  $ => A :XOR
  $ => B :MLOAD(SP + 888)
  A => D
  $ => A :MLOAD(SP + 832)
  $ => C :XOR
  $ => A :MLOAD(SP + 776)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 832)
  B => E
  $ => B :MLOAD(SP + 888)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 768)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 760)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1592)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 760)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1648)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1144)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 760)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 864)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 752)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 864)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 752)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 760)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 912)
  $ => D :ADD
  A :MSTORE(SP + 752)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1000)
  A => D
  $ => A :MLOAD(SP + 784)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 744)
  $ => B :MLOAD(SP + 856)
  $ => A :MLOAD(SP + 800)
  $ => C :XOR
  $ => A :MLOAD(SP + 744)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 856)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 736)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 744)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 728)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 744)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 728)
  $ => A :XOR
  A :MSTORE(SP + 728)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 744)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 728)
  $ => B :XOR
  $ => A :MLOAD(SP + 736)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  958139571n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 768)
  $ => A :ADD
  B :MSTORE(SP + 728)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 720)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 712)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 720)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 712)
  $ => A :XOR
  A :MSTORE(SP + 712)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 720)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 712)
  $ => A :XOR
  $ => B :MLOAD(SP + 832)
  A => D
  $ => A :MLOAD(SP + 776)
  $ => C :XOR
  $ => A :MLOAD(SP + 720)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 776)
  B => E
  $ => B :MLOAD(SP + 832)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 712)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 704)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1536)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 704)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1592)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1088)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 704)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 808)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 696)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 808)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 696)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 704)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 856)
  $ => D :ADD
  A :MSTORE(SP + 696)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 944)
  A => D
  $ => A :MLOAD(SP + 728)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 688)
  $ => B :MLOAD(SP + 800)
  $ => A :MLOAD(SP + 744)
  $ => C :XOR
  $ => A :MLOAD(SP + 688)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 800)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 680)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 688)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 672)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 688)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 672)
  $ => A :XOR
  A :MSTORE(SP + 672)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 688)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 672)
  $ => B :XOR
  $ => A :MLOAD(SP + 680)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1322822218n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 712)
  $ => A :ADD
  B :MSTORE(SP + 672)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 664)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 656)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 664)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 656)
  $ => A :XOR
  A :MSTORE(SP + 656)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 664)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 656)
  $ => A :XOR
  $ => B :MLOAD(SP + 776)
  A => E
  $ => A :MLOAD(SP + 720)
  $ => C :XOR
  $ => A :MLOAD(SP + 664)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  B => D
  $ => B :MLOAD(SP + 776)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 656)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 648)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1480)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 648)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1536)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1032)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 648)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 752)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 640)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 752)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 640)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 648)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 800)
  $ => D :ADD
  A :MSTORE(SP + 640)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 888)
  A => D
  $ => A :MLOAD(SP + 672)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 632)
  $ => B :MLOAD(SP + 744)
  $ => A :MLOAD(SP + 688)
  $ => C :XOR
  $ => A :MLOAD(SP + 632)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 744)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 624)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 632)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 616)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 632)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 616)
  $ => A :XOR
  A :MSTORE(SP + 616)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 632)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 616)
  $ => B :XOR
  $ => A :MLOAD(SP + 624)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1537002063n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 656)
  $ => A :ADD
  B :MSTORE(SP + 616)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 608)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 600)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 608)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 600)
  $ => A :XOR
  A :MSTORE(SP + 600)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 608)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 600)
  $ => A :XOR
  $ => B :MLOAD(SP + 720)
  A => D
  $ => A :MLOAD(SP + 664)
  $ => C :XOR
  $ => A :MLOAD(SP + 608)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 664)
  B => E
  $ => B :MLOAD(SP + 720)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 600)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 592)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1424)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 592)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 976)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 592)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 696)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 584)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 696)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 584)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 592)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 744)
  $ => D :ADD
  A :MSTORE(SP + 584)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 832)
  A => E
  $ => A :MLOAD(SP + 616)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 576)
  $ => B :MLOAD(SP + 688)
  $ => A :MLOAD(SP + 632)
  $ => C :XOR
  $ => A :MLOAD(SP + 576)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 688)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 568)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 576)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 560)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 576)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 560)
  $ => A :XOR
  A :MSTORE(SP + 560)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 576)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 560)
  $ => B :XOR
  $ => A :MLOAD(SP + 568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1747873779n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 600)
  $ => A :ADD
  B :MSTORE(SP + 560)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 552)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 544)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 552)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 544)
  $ => A :XOR
  A :MSTORE(SP + 544)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 552)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 544)
  $ => A :XOR
  $ => B :MLOAD(SP + 664)
  A => D
  $ => A :MLOAD(SP + 608)
  $ => C :XOR
  $ => A :MLOAD(SP + 552)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 608)
  B => E
  $ => B :MLOAD(SP + 664)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 544)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 536)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1368)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 536)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1424)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 920)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 536)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 640)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 528)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 640)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 528)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 536)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 688)
  $ => D :ADD
  A :MSTORE(SP + 528)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 776)
  A => D
  $ => A :MLOAD(SP + 560)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 520)
  $ => B :MLOAD(SP + 632)
  $ => A :MLOAD(SP + 576)
  $ => C :XOR
  $ => A :MLOAD(SP + 520)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 632)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 512)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 520)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 504)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 520)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 504)
  $ => A :XOR
  A :MSTORE(SP + 504)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 520)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 504)
  $ => B :XOR
  $ => A :MLOAD(SP + 512)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1955562222n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 544)
  $ => A :ADD
  B :MSTORE(SP + 504)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 496)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 488)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 496)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 488)
  $ => A :XOR
  A :MSTORE(SP + 488)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 496)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 488)
  $ => A :XOR
  $ => B :MLOAD(SP + 608)
  A => D
  $ => A :MLOAD(SP + 552)
  $ => C :XOR
  $ => A :MLOAD(SP + 496)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 552)
  B => E
  $ => B :MLOAD(SP + 608)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 488)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 480)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1312)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 480)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1368)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 864)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 480)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 584)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 472)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 584)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 472)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 632)
  $ => D :ADD
  A :MSTORE(SP + 472)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 720)
  A => D
  $ => A :MLOAD(SP + 504)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 464)
  $ => B :MLOAD(SP + 576)
  $ => A :MLOAD(SP + 520)
  $ => C :XOR
  $ => A :MLOAD(SP + 464)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 576)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 456)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 464)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 448)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 464)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 448)
  $ => A :XOR
  A :MSTORE(SP + 448)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 464)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 448)
  $ => B :XOR
  $ => A :MLOAD(SP + 456)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2024104815n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 488)
  $ => A :ADD
  B :MSTORE(SP + 448)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 440)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 432)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 440)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 432)
  $ => A :XOR
  A :MSTORE(SP + 432)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 440)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 432)
  $ => A :XOR
  $ => B :MLOAD(SP + 552)
  A => D
  $ => A :MLOAD(SP + 496)
  $ => C :XOR
  $ => A :MLOAD(SP + 440)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 496)
  B => E
  $ => B :MLOAD(SP + 552)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 432)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 424)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1256)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 424)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 808)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 424)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 528)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 416)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 528)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 416)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 424)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 576)
  $ => D :ADD
  A :MSTORE(SP + 416)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 664)
  A => D
  $ => A :MLOAD(SP + 448)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 408)
  $ => B :MLOAD(SP + 520)
  $ => A :MLOAD(SP + 464)
  $ => C :XOR
  $ => A :MLOAD(SP + 408)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 520)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 400)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 408)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 392)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 408)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 392)
  $ => A :XOR
  A :MSTORE(SP + 392)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 408)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 392)
  $ => B :XOR
  $ => A :MLOAD(SP + 400)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2227730452n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 432)
  $ => A :ADD
  B :MSTORE(SP + 392)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 384)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 376)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 384)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 376)
  $ => A :XOR
  A :MSTORE(SP + 376)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 384)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 376)
  $ => A :XOR
  $ => B :MLOAD(SP + 496)
  A => E
  $ => A :MLOAD(SP + 440)
  $ => C :XOR
  $ => A :MLOAD(SP + 384)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 440)
  B => D
  $ => B :MLOAD(SP + 496)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 376)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 368)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1200)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 368)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1256)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 752)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 368)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 472)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 360)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 472)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 360)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 368)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 520)
  $ => D :ADD
  A :MSTORE(SP + 360)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 608)
  A => E
  $ => A :MLOAD(SP + 392)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 352)
  $ => B :MLOAD(SP + 464)
  $ => A :MLOAD(SP + 408)
  $ => C :XOR
  $ => A :MLOAD(SP + 352)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 464)
  $ => A :XOR
  A => B
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 344)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 352)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 336)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 352)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 336)
  $ => A :XOR
  A :MSTORE(SP + 336)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 352)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 336)
  $ => B :XOR
  $ => A :MLOAD(SP + 344)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2361852424n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 376)
  $ => A :ADD
  B :MSTORE(SP + 336)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 328)
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 320)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 328)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 320)
  $ => A :XOR
  A :MSTORE(SP + 320)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 328)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 320)
  $ => A :XOR
  $ => B :MLOAD(SP + 440)
  A => D
  $ => A :MLOAD(SP + 384)
  $ => C :XOR
  $ => A :MLOAD(SP + 328)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 384)
  B => E
  $ => B :MLOAD(SP + 440)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 320)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 312)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1144)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 312)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 696)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 312)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 416)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 304)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 416)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 304)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 464)
  $ => D :ADD
  A :MSTORE(SP + 304)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 552)
  A => D
  $ => A :MLOAD(SP + 336)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 296)
  $ => B :MLOAD(SP + 408)
  $ => A :MLOAD(SP + 352)
  $ => C :XOR
  $ => A :MLOAD(SP + 296)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 408)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 288)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 296)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 280)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 296)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 280)
  $ => A :XOR
  A :MSTORE(SP + 280)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 296)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 280)
  $ => B :XOR
  $ => A :MLOAD(SP + 288)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2428436474n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 320)
  $ => A :ADD
  B :MSTORE(SP + 280)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  A :MSTORE(SP + 272)
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 264)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 272)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 264)
  $ => A :XOR
  A :MSTORE(SP + 264)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 272)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 264)
  $ => A :XOR
  $ => B :MLOAD(SP + 384)
  A => D
  $ => A :MLOAD(SP + 328)
  $ => C :XOR
  $ => A :MLOAD(SP + 272)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 328)
  B => E
  $ => B :MLOAD(SP + 384)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 264)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 256)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1088)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 256)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => A :XOR
  $ => B :MLOAD(SP + 1144)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 640)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 256)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 360)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 248)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 360)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 248)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 256)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 408)
  $ => D :ADD
  A :MSTORE(SP + 248)
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 496)
  A => D
  $ => A :MLOAD(SP + 280)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 240)
  $ => B :MLOAD(SP + 352)
  $ => A :MLOAD(SP + 296)
  $ => C :XOR
  $ => A :MLOAD(SP + 240)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 352)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 232)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 240)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 224)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 240)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 224)
  $ => A :XOR
  A :MSTORE(SP + 224)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 240)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 224)
  $ => B :XOR
  $ => A :MLOAD(SP + 232)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2756734187n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 264)
  $ => A :ADD
  B :MSTORE(SP + 224)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  30n => CTX  ;; LoadConst32
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  A :MSTORE(SP + 216)
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 208)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 216)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 208)
  $ => A :XOR
  A :MSTORE(SP + 208)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 216)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 208)
  $ => A :XOR
  $ => B :MLOAD(SP + 328)
  A => D
  $ => A :MLOAD(SP + 272)
  $ => C :XOR
  $ => A :MLOAD(SP + 216)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 272)
  B => E
  $ => B :MLOAD(SP + 328)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 208)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 200)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 1032)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 1032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 200)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1088)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 584)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 200)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 304)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 192)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 304)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 192)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 440)
  A => D
  $ => A :MLOAD(SP + 224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 192)
  $ => B :MLOAD(SP + 296)
  $ => A :MLOAD(SP + 240)
  $ => C :XOR
  $ => A :MLOAD(SP + 192)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 296)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 184)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 192)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 176)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 192)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 176)
  $ => A :XOR
  A :MSTORE(SP + 176)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 192)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 176)
  $ => B :XOR
  $ => A :MLOAD(SP + 184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3204031479n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 208)
  $ => A :ADD
  B :MSTORE(SP + 176)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 168)
  $ => B :MLOAD(SP + 272)
  $ => A :MLOAD(SP + 216)
  $ => C :XOR
  $ => A :MLOAD(SP + 168)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 216)
  B => D
  $ => B :MLOAD(SP + 272)
  $ => C :AND
  D => A
  C => B
  $ => A :XOR
  $ => B :MLOAD(SP + 32)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 32)
  30n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 168)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 160)
  19n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 168)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 160)
  $ => A :XOR
  A :MSTORE(SP + 160)
  10n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 168)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 160)
  $ => B :XOR
  $ => A :MLOAD(SP + 32)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 160)
  25n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 32)
  14n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 976)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 32)
  $ => A :XOR
  A => CTX
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 1032)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 32)
  15n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 248)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 152)
  13n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 248)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 152)
  $ => A :XOR
  A => CTX
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  CTX => A
  $ => B :XOR
  $ => A :MLOAD(SP + 32)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 296)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 384)
  A => D
  $ => A :MLOAD(SP + 176)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 152)
  $ => B :MLOAD(SP + 240)
  $ => A :MLOAD(SP + 192)
  $ => C :XOR
  $ => A :MLOAD(SP + 152)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 240)
  $ => A :XOR
  A => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 144)
  26n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => A :OR
  A :MSTORE(SP + 32)
  21n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 32)
  $ => A :XOR
  A :MSTORE(SP + 32)
  7n => CTX  ;; LoadConst32
  $ => A :MLOAD(SP + 152)
  CTX => E
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  CTX => B
  E => CTX
  32n => A  ;; LoadConst32
  $ => E :SUB
  $ => A :MLOAD(SP + 152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  CTX => A
  $ => B :OR
  $ => A :MLOAD(SP + 32)
  $ => B :XOR
  $ => A :MLOAD(SP + 144)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3329325298n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 160)
  $ => A :ADD
  B => C
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 136)
  $ => B :MLOAD(SP + 24)
  $ => A :MLOAD(SP + 168)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 128)
  $ => B :MLOAD(SP + 48)
  $ => A :MLOAD(SP + 328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 104)
  $ => B :MLOAD(SP + 8)
  $ => A :MLOAD(SP + 216)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 120)
  $ => B :MLOAD(SP + 64)
  $ => A :MLOAD(SP + 152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 272)
  $ => B :MLOAD(SP + 112)
  E :MSTORE(SP + 96)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 112)
  $ => B :MLOAD(SP + 56)
  $ => A :MLOAD(SP + 192)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 240)
  $ => B :MLOAD(SP + 40)
  E :MSTORE(SP + 88)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => CTX :AND
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 72)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 3688)
  $ => A :EQ
  1 - A => A
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_3_4)
  :JMP(label_3_5)
label_3_4:
  $ => A :MLOAD(SP + 120)
  $ => B :MLOAD(SP + 128)
  $ => C :MLOAD(SP + 120)
  C :MSTORE(SP + 8)
  $ => C :MLOAD(SP + 128)
  C :MSTORE(SP + 24)
  $ => C :MLOAD(SP + 136)
  C :MSTORE(SP + 32)
  CTX :MSTORE(SP + 40)
  $ => C :MLOAD(SP + 104)
  C :MSTORE(SP + 48)
  $ => C :MLOAD(SP + 88)
  C :MSTORE(SP + 56)
  $ => C :MLOAD(SP + 96)
  C :MSTORE(SP + 64)
  E :MSTORE(SP + 72)
  :JMP(label_3_3)
label_3_5:
  $ => E :MLOAD(SP)
  :JMP(label_3_7)
label_3_7:
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E + 28)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => C :MLOAD(SP + 88)
  C :MSTORE(MEM:E + 24)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(SP + 96)
  A :MSTORE(MEM:E + 20)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => B :MLOAD(SP + 104)
  B :MSTORE(MEM:E + 16)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => B :MLOAD(SP + 112)
  B :MSTORE(MEM:E + 12)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(SP + 120)
  A :MSTORE(MEM:E + 8)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(SP + 128)
  A :MSTORE(MEM:E + 4)
  $ => E :MLOAD(SP)
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  $ => E :MLOAD(SP + 16)
  A => B
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => A :MLOAD(SP + 136)
  A :MSTORE(MEM:E)
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  $ => CTX :MLOAD(SP - 5)
  SP - 468 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_4:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 2 => SP
  C :MSTORE(SP - 1)
  $ => C :MLOAD(fp + 16)
  SP + 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_5)
  SP - 1 => SP
  $ => C :MLOAD(SP - 1)
  SP - 2 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_5:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 12 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  CTX :MSTORE(SP - 5)
  A :MSTORE(SP)
  B :MSTORE(SP + 8)
  CTX :MSTORE(SP + 24)
  $ => A :MLOAD(fp + 16)
  A :MSTORE(SP + 16)
  15n => B  ;; LoadConst32
  A => C
  B => A
  C => B
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_2)
  $ => E :MLOAD(SP + 16)
  $ => C :MLOAD(SP)
  C :MSTORE(SP + 16)
  :JMP(label_5_17)
label_5_2:
  0n => A  ;; LoadConst32
  $ => B :MLOAD(SP)
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3n => B  ;; LoadConst32
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => C :ADD
  C => A
  B :MSTORE(SP + 32)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 40)
  0n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  $ => A :EQ
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_3)
  :JMP(label_5_4)
label_5_3:
  $ => A :MLOAD(SP + 16)
  $ => B :MLOAD(SP + 32)
  :JMP(label_5_9)
label_5_4:
  $ => E :MLOAD(SP)
  :JMP(label_5_5)
label_5_5:
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  E => C
  $ => E :MLOAD(SP + 24)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => B :MLOAD(SP + 8)
  B :MSTORE(MEM:E)
  1n => B  ;; LoadConst32
  C => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => CTX :AND
  CTX => A
  $ => B :MLOAD(SP + 40)
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_6)
  :JMP(label_5_7)
label_5_6:
  CTX => E
  :JMP(label_5_5)
label_5_7:
  $ => A :MLOAD(SP + 16)
  $ => B :MLOAD(SP + 32)
  :JMP(label_5_9)
label_5_9:
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4294967292n => B  ;; LoadConst32
  $ => B :AND
  A :MSTORE(SP + 32)
  $ => A :MLOAD(SP + 40)
  $ => C :ADD
  B => D
  C => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 16)
  1n => B  ;; LoadConst32
  D => A
  B => C  ;; Extend A.
  A => B
  B => A
  0x80000000n => B
  $ => A: XOR
  $ => A: SUB
  C => B  ;; Extend B.
  A => C
  B => A
  0x80000000n => B
  $ => A: XOR
  $ => A: SUB
  A => B
  C => A
  $ => A :SLT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_10)
  :JMP(label_5_11)
label_5_10:
  :JMP(label_5_16)
label_5_11:
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8)
  $ => B :AND
  B => A
  16843009n => B  ;; LoadConst32
  0 => C
  $${var _mulArith = A * B}
  ${_mulArith >> 64} => D
  ${_mulArith} => A :ARITH
  4294967295n => B  ;; LoadConst64
  $ => CTX :AND
  $ => E :MLOAD(SP + 40)
  :JMP(label_5_12)
label_5_12:
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  E => C
  $ => E :MLOAD(SP + 24)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  CTX :MSTORE(MEM:E)
  4n => B  ;; LoadConst32
  C => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 16)
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_13)
  :JMP(label_5_14)
label_5_13:
  :JMP(label_5_12)
label_5_14:
  :JMP(label_5_16)
label_5_16:
  3n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  $ => E :AND
  :JMP(label_5_17)
label_5_17:
  0n => B  ;; LoadConst32
  E => A
  $ => A :EQ
  E => C
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_18)
  :JMP(label_5_19)
label_5_18:
  :JMP(label_5_24)
label_5_19:
  $ => A :MLOAD(SP + 16)
  C => B
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => CTX :AND
  $ => E :MLOAD(SP + 16)
  :JMP(label_5_20)
label_5_20:
  4294967296n => B
  0 => D
  0 => C
  ${E / B} => A
  E:ARITH
  A => B
  E => D
  $ => E :MLOAD(SP + 24)
  $ => A :MLOAD(MEM:E)
  $ => E :ADD
  $ => C :MLOAD(SP + 8)
  C :MSTORE(MEM:E)
  1n => B  ;; LoadConst32
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  CTX => B
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_21)
  :JMP(label_5_22)
label_5_21:
  :JMP(label_5_20)
label_5_22:
  :JMP(label_5_24)
label_5_24:
  $ => A :MLOAD(SP)
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  $ => CTX :MLOAD(SP - 5)
  SP - 12 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
finalizeExecution:
  ${beforeLast()}  :JMPN(finalizeExecution)
                   :JMP(start)
INCLUDE "helpers/2-exp.zkasm"