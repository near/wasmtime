start:
  zkPC + 2 => RR
  :JMP(function_1)
  :JMP(finalizeExecution)
function_1:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 16 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  65536 => E  ;; LoadExtName(User(userextname0))
  $ => A :MLOAD(MEM:E + 8)
  240n => B  ;; LoadConst32
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 88)
  65536 => E  ;; LoadExtName(User(userextname0))
  A :MSTORE(MEM:E + 8)
  8n => B  ;; LoadConst32
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  8n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => D  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  B :MSTORE(SP + 16)
  D :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  16n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  B :MSTORE(SP + 8)
  C :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  24n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  B :MSTORE(SP)
  C :MSTORE(MEM:E)
  40n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 80)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  8n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  40n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 72)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  53n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 64)
  0n => D  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  D :MSTORE(MEM:E)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  C :MSTORE(MEM:E + 8)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  24n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048600)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  16n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048592)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  8n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048584)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  111n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => C
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 1048615)
  0 => A  ;; LoadExtName(User(userextname1))
  C => B
  $ => E :ADD
  D :MSTORE(MEM:E)
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048576)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  C :MSTORE(MEM:E + 64)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E + 96)
  0n => B  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1048608)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  C :MSTORE(MEM:E + 104)
  115n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 56)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 8)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 56)
  $ => E :ADD
  C :MSTORE(MEM:E)
  123n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => C
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 16)
  $ => E :ADD
  $ => D :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  C => B
  $ => E :ADD
  D :MSTORE(MEM:E)
  131n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 8)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  139n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  147n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 80)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  155n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => D
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 72)
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  D => B
  $ => E :ADD
  C :MSTORE(MEM:E)
  160n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B => C
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => D :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  C => B
  $ => E :ADD
  D :MSTORE(MEM:E)
  11n => C  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  C :MSTORE(MEM:E + 168)
  172n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 48)
  4n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 48)
  $ => E :ADD
  C :MSTORE(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 1)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E + 169)
  128n => C  ;; LoadConst32
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 56)
  $ => E :ADD
  C :MSTORE(MEM:E)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 96)
  A :MSTORE(SP + 48)
  9n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 40)
  88n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 40)
  $ => D :OR
  D :MSTORE(SP + 32)
  65024n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 32)
  $ => D :AND
  D => C
  40n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  16711680n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 32)
  $ => D :AND
  D => C
  24n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 16)
  4278190080n => B  ;; LoadConst64
  $ => A :MLOAD(SP + 32)
  $ => A :AND
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  $ => A :MLOAD(SP + 16)
  E => B
  $ => B :OR
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  A :MSTORE(SP + 16)
  1n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4278190080n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8)
  15n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  16711680n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A :MSTORE(SP + 8)
  31n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  65280n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP)
  56n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 8)
  $ => B :OR
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A => E
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  40n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP)
  0n => D  ;; LoadConst32
  D => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_1_1)
  :JMP(label_1_2)
label_1_1:
  :JMP(label_1_3)
label_1_2:
  11n => A  ;; LoadConst32
  $ => B :MLOAD(SP)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  0n => B  ;; LoadConst32
  52n => C  ;; LoadConst32
  SP + 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_4)
  SP - 1 => SP
  :JMP(label_1_3)
label_1_3:
  6341068275337658368n => B  ;; LoadConst64
  E => A
  $ => C :OR
  C :MSTORE(SP + 80)
  11n => A  ;; LoadConst32
  56n => B  ;; LoadConst32
  $ => A :XOR
  8n => B  ;; LoadConst32
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_1_5)
  160n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(SP + 80)
  C :MSTORE(MEM:E)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => D  ;; LoadConst32
  SP + 1 => SP
  D :MSTORE(SP)
  $ => B :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP - 1 => SP
  :JMP(label_1_6)
label_1_5:
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1n => C  ;; LoadConst32
  SP + 1 => SP
  C :MSTORE(SP)
  $ => B :MLOAD(SP)
  zkPC + 2 => RR
  :JMP(function_2)
  SP - 1 => SP
  224n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  216n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  208n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => B :ADD
  B => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => D  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  D :MSTORE(MEM:E)
  200n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  192n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  184n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  C :MSTORE(MEM:E)
  0n => C  ;; LoadConst64
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  C :MSTORE(MEM:E + 176)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => C :MLOAD(SP + 80)
  C :MSTORE(MEM:E + 232)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  176n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => C :ADD
  C => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  1n => E  ;; LoadConst32
  SP + 1 => SP
  E :MSTORE(SP)
  D => A
  zkPC + 2 => RR
  :JMP(function_2)
  SP - 1 => SP
  :JMP(label_1_6)
label_1_6:
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 92)
  A :MSTORE(SP + 80)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 88)
  A :MSTORE(SP + 72)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 84)
  A :MSTORE(SP + 64)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 80)
  A :MSTORE(SP + 56)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 76)
  A :MSTORE(SP + 48)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 72)
  A :MSTORE(SP + 40)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 64)
  A :MSTORE(SP + 32)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 16)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP)
  B :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 24)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 32)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  $ => C :OR
  $ => A :MLOAD(SP)
  C => D
  B => C
  D => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => B :AND
  B :MSTORE(SP + 16)
  A :MSTORE(SP + 24)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 16)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 24)
  $ => A :AND
  A :MSTORE(SP + 8)
  0 => A  ;; LoadExtName(User(userextname1))
  $ => B :MLOAD(SP + 88)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 68)
  A :MSTORE(SP)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => B :OR
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 24)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 16)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => B :OR
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => D
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP)
  $ => B :AND
  D => A
  $ => A :OR
  13352372148217134600n => B  ;; LoadConst64
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 16)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 40)
  $ => C :AND
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP)
  B :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 24)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  $ => C :OR
  $ => A :MLOAD(SP)
  B => D
  C => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => C :AND
  C :MSTORE(SP + 16)
  A :MSTORE(SP + 24)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 16)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 24)
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => B :OR
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 48)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 48)
  $ => C :AND
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => C
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 48)
  $ => B :AND
  C => A
  $ => A :OR
  11902541952223915002n => B  ;; LoadConst64
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 56)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 56)
  $ => D :AND
  D => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP + 8)
  B :MSTORE(SP + 24)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 56)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 56)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => D :OR
  $ => A :MLOAD(SP + 8)
  B => C
  D => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => D :AND
  A :MSTORE(SP)
  D :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 16)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 16)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP)
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 64)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => D
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => B :OR
  $ => A :MLOAD(SP + 16)
  $ => A :OR
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 64)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 64)
  $ => D :AND
  D => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A => D
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => C
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 64)
  $ => B :AND
  C => A
  $ => A :OR
  14160706888648589550n => B  ;; LoadConst64
  B :ASSERT
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 72)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 72)
  $ => E :AND
  E => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP)
  B :MSTORE(SP + 16)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 72)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 72)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => E :OR
  $ => A :MLOAD(SP)
  B => C
  E => B
  $ => A :OR
  65280n => B  ;; LoadConst32
  $ => E :AND
  E :MSTORE(SP)
  A :MSTORE(SP + 8)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP)
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 16)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => A :OR
  A => C
  32n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP)
  4278190080n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8)
  $ => A :AND
  A :MSTORE(SP + 8)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 80)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => B :OR
  $ => A :MLOAD(SP)
  $ => A :OR
  A :MSTORE(SP + 8)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 80)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => E :AND
  E => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A => C
  16n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => B :OR
  $ => A :MLOAD(SP + 8)
  $ => A :OR
  A => C
  8n => A  ;; LoadConst64
  63n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => C
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 80)
  $ => B :AND
  C => A
  $ => A :OR
  10414846460208074217n => B  ;; LoadConst64
  B :ASSERT
  240n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 88)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  65536 => E  ;; LoadExtName(User(userextname0))
  C :MSTORE(MEM:E + 8)
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  SP - 16 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_2:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 2 => SP
  C :MSTORE(SP - 1)
  $ => C :MLOAD(fp + 16)
  SP + 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_3)
  SP - 1 => SP
  $ => C :MLOAD(SP - 1)
  SP - 2 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_3:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 1182 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  A :MSTORE(SP)
  B :MSTORE(SP + 8)
  $ => A :MLOAD(fp + 16)
  A :MSTORE(SP + 16)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP)
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 28)
  D :MSTORE(SP + 72)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 24)
  C :MSTORE(SP + 80)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 20)
  C :MSTORE(SP + 88)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 16)
  A :MSTORE(SP + 96)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => E :MLOAD(MEM:E + 12)
  E :MSTORE(SP + 104)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(MEM:E + 8)
  D :MSTORE(SP + 112)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(MEM:E + 4)
  C :MSTORE(SP + 120)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => B :MLOAD(MEM:E)
  B :MSTORE(SP + 128)
  0n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 16)
  $ => A :EQ
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_3_1)
  :JMP(label_3_2)
label_3_1:
  :JMP(label_3_7)
label_3_2:
  6n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 16)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  C :MSTORE(SP + 9416)
  $ => C :MLOAD(SP + 8)
  C :MSTORE(SP + 64)
  $ => C :MLOAD(SP + 88)
  C :MSTORE(SP + 56)
  $ => C :MLOAD(SP + 80)
  C :MSTORE(SP + 48)
  $ => C :MLOAD(SP + 96)
  C :MSTORE(SP + 40)
  $ => C :MLOAD(SP + 72)
  C :MSTORE(SP + 32)
  $ => C :MLOAD(SP + 128)
  C :MSTORE(SP + 24)
  $ => C :MLOAD(SP + 112)
  C :MSTORE(SP + 16)
  $ => C :MLOAD(SP + 120)
  C :MSTORE(SP + 8)
  $ => B :MLOAD(SP + 120)
  $ => A :MLOAD(SP + 112)
  :JMP(label_3_3)
label_3_3:
  $ => C :XOR
  C => A
  $ => B :MLOAD(SP + 24)
  $ => A :AND
  $ => B :MLOAD(SP + 8)
  A => D
  $ => A :MLOAD(SP + 16)
  $ => C :AND
  D => A
  C => B
  $ => A :XOR
  A :MSTORE(SP + 9408)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  B :MSTORE(SP + 9392)
  $ => E :MLOAD(SP + 9392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9400)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9392)
  $ => E :SUB
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9400)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9400)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  B :MSTORE(SP + 9384)
  $ => E :MLOAD(SP + 9384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9392)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9384)
  $ => E :SUB
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9392)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9400)
  $ => A :XOR
  A :MSTORE(SP + 9384)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 24)
  B :MSTORE(SP + 9368)
  $ => E :MLOAD(SP + 9368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9376)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9368)
  $ => E :SUB
  $ => A :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9376)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9384)
  $ => B :XOR
  $ => A :MLOAD(SP + 9408)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9368)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 40)
  B :MSTORE(SP + 9352)
  $ => E :MLOAD(SP + 9352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9352)
  $ => E :SUB
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9360)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 40)
  B :MSTORE(SP + 9344)
  $ => E :MLOAD(SP + 9344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9352)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9344)
  $ => E :SUB
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9352)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9360)
  $ => A :XOR
  A :MSTORE(SP + 9344)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 40)
  B :MSTORE(SP + 9328)
  $ => E :MLOAD(SP + 9328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9328)
  $ => E :SUB
  $ => A :MLOAD(SP + 40)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9344)
  $ => B :XOR
  $ => A :MLOAD(SP + 32)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 56)
  A => D
  $ => A :MLOAD(SP + 48)
  $ => C :XOR
  C => A
  $ => B :MLOAD(SP + 40)
  $ => A :AND
  $ => B :MLOAD(SP + 48)
  $ => C :XOR
  C => B
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9328)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E)
  A :MSTORE(SP + 9320)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9312)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 9320)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9312)
  $ => A :OR
  A :MSTORE(SP + 9312)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 9304)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9304)
  $ => B :OR
  $ => A :MLOAD(SP + 9312)
  $ => B :OR
  $ => A :MLOAD(SP + 9328)
  $ => A :ADD
  B :MSTORE(SP + 9304)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1116352408n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9368)
  $ => A :ADD
  B :MSTORE(SP + 9296)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9288)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9288)
  B :MSTORE(SP + 9272)
  $ => E :MLOAD(SP + 9272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9272)
  $ => E :SUB
  $ => A :MLOAD(SP + 9288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9280)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9288)
  B :MSTORE(SP + 9264)
  $ => E :MLOAD(SP + 9264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9264)
  $ => E :SUB
  $ => A :MLOAD(SP + 9288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9280)
  $ => A :XOR
  A :MSTORE(SP + 9264)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9288)
  B :MSTORE(SP + 9248)
  $ => E :MLOAD(SP + 9248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9248)
  $ => E :SUB
  $ => A :MLOAD(SP + 9288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9264)
  $ => A :XOR
  $ => B :MLOAD(SP + 24)
  A => D
  $ => A :MLOAD(SP + 8)
  $ => C :XOR
  $ => A :MLOAD(SP + 9288)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8)
  B => E
  $ => B :MLOAD(SP + 24)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9248)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 4)
  A :MSTORE(SP + 9240)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9232)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 9240)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9232)
  $ => A :OR
  A :MSTORE(SP + 9232)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 9224)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9224)
  $ => B :OR
  $ => A :MLOAD(SP + 9232)
  $ => B :OR
  $ => A :MLOAD(SP + 48)
  $ => E :ADD
  E => A
  B :MSTORE(SP + 9224)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 104)
  A => D
  $ => A :MLOAD(SP + 9296)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9216)
  $ => B :MLOAD(SP + 40)
  $ => A :MLOAD(SP + 56)
  $ => C :XOR
  C => B
  $ => A :MLOAD(SP + 9216)
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 56)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9208)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9216)
  B :MSTORE(SP + 9192)
  $ => E :MLOAD(SP + 9192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9200)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9192)
  $ => E :SUB
  $ => A :MLOAD(SP + 9216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9200)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9200)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9216)
  B :MSTORE(SP + 9184)
  $ => E :MLOAD(SP + 9184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9184)
  $ => E :SUB
  $ => A :MLOAD(SP + 9216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9200)
  $ => A :XOR
  A :MSTORE(SP + 9184)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9216)
  B :MSTORE(SP + 9168)
  $ => E :MLOAD(SP + 9168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9176)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9168)
  $ => E :SUB
  $ => A :MLOAD(SP + 9216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9176)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9184)
  $ => B :XOR
  $ => A :MLOAD(SP + 9208)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1899447441n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9248)
  $ => A :ADD
  B :MSTORE(SP + 9168)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9160)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9160)
  B :MSTORE(SP + 9144)
  $ => E :MLOAD(SP + 9144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9144)
  $ => E :SUB
  $ => A :MLOAD(SP + 9160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9152)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9160)
  B :MSTORE(SP + 9136)
  $ => E :MLOAD(SP + 9136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9136)
  $ => E :SUB
  $ => A :MLOAD(SP + 9160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9152)
  $ => A :XOR
  A :MSTORE(SP + 9136)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9160)
  B :MSTORE(SP + 9120)
  $ => E :MLOAD(SP + 9120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9120)
  $ => E :SUB
  $ => A :MLOAD(SP + 9160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9136)
  $ => A :XOR
  $ => B :MLOAD(SP + 24)
  A => D
  $ => A :MLOAD(SP + 9288)
  $ => C :XOR
  $ => A :MLOAD(SP + 9160)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 9288)
  B => E
  $ => B :MLOAD(SP + 24)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9120)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 8)
  A :MSTORE(SP + 9112)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9104)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 9112)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9104)
  $ => A :OR
  A :MSTORE(SP + 9104)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 9096)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9096)
  $ => B :OR
  $ => A :MLOAD(SP + 9104)
  $ => B :OR
  $ => A :MLOAD(SP + 56)
  $ => E :ADD
  E => A
  B :MSTORE(SP + 9096)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 16)
  A => D
  $ => A :MLOAD(SP + 9168)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9088)
  $ => B :MLOAD(SP + 40)
  $ => A :MLOAD(SP + 9216)
  $ => C :XOR
  $ => A :MLOAD(SP + 9088)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 40)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9080)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9088)
  B :MSTORE(SP + 9064)
  $ => E :MLOAD(SP + 9064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9072)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9064)
  $ => E :SUB
  $ => A :MLOAD(SP + 9088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9072)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9072)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9088)
  B :MSTORE(SP + 9056)
  $ => E :MLOAD(SP + 9056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9064)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9056)
  $ => E :SUB
  $ => A :MLOAD(SP + 9088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9064)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9072)
  $ => A :XOR
  A :MSTORE(SP + 9056)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9088)
  B :MSTORE(SP + 9040)
  $ => E :MLOAD(SP + 9040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9048)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9040)
  $ => E :SUB
  $ => A :MLOAD(SP + 9088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9048)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9056)
  $ => B :XOR
  $ => A :MLOAD(SP + 9080)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3049323471n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9120)
  $ => A :ADD
  B :MSTORE(SP + 9040)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9032)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9032)
  B :MSTORE(SP + 9016)
  $ => E :MLOAD(SP + 9016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9024)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9016)
  $ => E :SUB
  $ => A :MLOAD(SP + 9032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9024)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 9024)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9032)
  B :MSTORE(SP + 9008)
  $ => E :MLOAD(SP + 9008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 9008)
  $ => E :SUB
  $ => A :MLOAD(SP + 9032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9024)
  $ => A :XOR
  A :MSTORE(SP + 9008)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9032)
  B :MSTORE(SP + 8992)
  $ => E :MLOAD(SP + 8992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 9000)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8992)
  $ => E :SUB
  $ => A :MLOAD(SP + 9032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 9000)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9008)
  $ => A :XOR
  $ => B :MLOAD(SP + 9288)
  A => D
  $ => A :MLOAD(SP + 9160)
  $ => C :XOR
  $ => A :MLOAD(SP + 9032)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 9160)
  B => E
  $ => B :MLOAD(SP + 9288)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8992)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 12)
  A :MSTORE(SP + 8984)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8976)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8984)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8976)
  $ => A :OR
  A :MSTORE(SP + 8976)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8968)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8968)
  $ => B :OR
  $ => A :MLOAD(SP + 8976)
  $ => B :OR
  $ => A :MLOAD(SP + 40)
  $ => E :ADD
  E => A
  B :MSTORE(SP + 8968)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8)
  A => D
  $ => A :MLOAD(SP + 9040)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8960)
  $ => B :MLOAD(SP + 9216)
  $ => A :MLOAD(SP + 9088)
  $ => C :XOR
  $ => A :MLOAD(SP + 8960)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 9216)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8952)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8960)
  B :MSTORE(SP + 8936)
  $ => E :MLOAD(SP + 8936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8944)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8936)
  $ => E :SUB
  $ => A :MLOAD(SP + 8960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8944)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8944)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8960)
  B :MSTORE(SP + 8928)
  $ => E :MLOAD(SP + 8928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8936)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8928)
  $ => E :SUB
  $ => A :MLOAD(SP + 8960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8936)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8944)
  $ => A :XOR
  A :MSTORE(SP + 8928)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8960)
  B :MSTORE(SP + 8912)
  $ => E :MLOAD(SP + 8912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8920)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8912)
  $ => E :SUB
  $ => A :MLOAD(SP + 8960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8920)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8928)
  $ => B :XOR
  $ => A :MLOAD(SP + 8952)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3921009573n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8992)
  $ => A :ADD
  B :MSTORE(SP + 8912)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8904)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8904)
  B :MSTORE(SP + 8888)
  $ => E :MLOAD(SP + 8888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8896)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8888)
  $ => E :SUB
  $ => A :MLOAD(SP + 8904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8896)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8896)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8904)
  B :MSTORE(SP + 8880)
  $ => E :MLOAD(SP + 8880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8880)
  $ => E :SUB
  $ => A :MLOAD(SP + 8904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8896)
  $ => A :XOR
  A :MSTORE(SP + 8880)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8904)
  B :MSTORE(SP + 8864)
  $ => E :MLOAD(SP + 8864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8872)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8864)
  $ => E :SUB
  $ => A :MLOAD(SP + 8904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8872)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8880)
  $ => A :XOR
  $ => B :MLOAD(SP + 9160)
  A => E
  $ => A :MLOAD(SP + 9032)
  $ => C :XOR
  $ => A :MLOAD(SP + 8904)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 9032)
  B => D
  $ => B :MLOAD(SP + 9160)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8864)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 16)
  A :MSTORE(SP + 8856)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8848)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8856)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8848)
  $ => A :OR
  A :MSTORE(SP + 8848)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8840)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8840)
  $ => B :OR
  $ => A :MLOAD(SP + 8848)
  $ => B :OR
  $ => A :MLOAD(SP + 9216)
  $ => A :ADD
  B :MSTORE(SP + 8840)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 24)
  A => E
  $ => A :MLOAD(SP + 8912)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8832)
  $ => B :MLOAD(SP + 9088)
  $ => A :MLOAD(SP + 8960)
  $ => C :XOR
  $ => A :MLOAD(SP + 8832)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 9088)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8824)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8832)
  B :MSTORE(SP + 8808)
  $ => E :MLOAD(SP + 8808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8808)
  $ => E :SUB
  $ => A :MLOAD(SP + 8832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8816)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8832)
  B :MSTORE(SP + 8800)
  $ => E :MLOAD(SP + 8800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8808)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8800)
  $ => E :SUB
  $ => A :MLOAD(SP + 8832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8808)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8816)
  $ => A :XOR
  A :MSTORE(SP + 8800)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8832)
  B :MSTORE(SP + 8784)
  $ => E :MLOAD(SP + 8784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8784)
  $ => E :SUB
  $ => A :MLOAD(SP + 8832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8800)
  $ => B :XOR
  $ => A :MLOAD(SP + 8824)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  961987163n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8864)
  $ => A :ADD
  B :MSTORE(SP + 8784)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8776)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8776)
  B :MSTORE(SP + 8760)
  $ => E :MLOAD(SP + 8760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8768)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8760)
  $ => E :SUB
  $ => A :MLOAD(SP + 8776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8768)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8768)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8776)
  B :MSTORE(SP + 8752)
  $ => E :MLOAD(SP + 8752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8760)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8752)
  $ => E :SUB
  $ => A :MLOAD(SP + 8776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8760)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8768)
  $ => A :XOR
  A :MSTORE(SP + 8752)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8776)
  B :MSTORE(SP + 8736)
  $ => E :MLOAD(SP + 8736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8744)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8736)
  $ => E :SUB
  $ => A :MLOAD(SP + 8776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8744)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8752)
  $ => A :XOR
  $ => B :MLOAD(SP + 9032)
  A => D
  $ => A :MLOAD(SP + 8904)
  $ => C :XOR
  $ => A :MLOAD(SP + 8776)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8904)
  B => E
  $ => B :MLOAD(SP + 9032)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8736)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 20)
  A :MSTORE(SP + 8728)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8720)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8728)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8720)
  $ => A :OR
  A :MSTORE(SP + 8720)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8712)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8712)
  $ => B :OR
  $ => A :MLOAD(SP + 8720)
  $ => A :OR
  $ => B :MLOAD(SP + 9088)
  $ => E :ADD
  A :MSTORE(SP + 8712)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 9288)
  A => D
  $ => A :MLOAD(SP + 8784)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8704)
  $ => B :MLOAD(SP + 8960)
  $ => A :MLOAD(SP + 8832)
  $ => C :XOR
  $ => A :MLOAD(SP + 8704)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8960)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8696)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8704)
  B :MSTORE(SP + 8680)
  $ => E :MLOAD(SP + 8680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8688)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8680)
  $ => E :SUB
  $ => A :MLOAD(SP + 8704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8688)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8688)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8704)
  B :MSTORE(SP + 8672)
  $ => E :MLOAD(SP + 8672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8680)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8672)
  $ => E :SUB
  $ => A :MLOAD(SP + 8704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8680)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8688)
  $ => A :XOR
  A :MSTORE(SP + 8672)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8704)
  B :MSTORE(SP + 8656)
  $ => E :MLOAD(SP + 8656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8656)
  $ => E :SUB
  $ => A :MLOAD(SP + 8704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8672)
  $ => B :XOR
  $ => A :MLOAD(SP + 8696)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1508970993n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8736)
  $ => A :ADD
  B :MSTORE(SP + 8656)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8648)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8648)
  B :MSTORE(SP + 8632)
  $ => E :MLOAD(SP + 8632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8632)
  $ => E :SUB
  $ => A :MLOAD(SP + 8648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8640)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8648)
  B :MSTORE(SP + 8624)
  $ => E :MLOAD(SP + 8624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8632)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8624)
  $ => E :SUB
  $ => A :MLOAD(SP + 8648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8632)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8640)
  $ => A :XOR
  A :MSTORE(SP + 8624)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8648)
  B :MSTORE(SP + 8608)
  $ => E :MLOAD(SP + 8608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8616)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8608)
  $ => E :SUB
  $ => A :MLOAD(SP + 8648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8616)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8624)
  $ => A :XOR
  $ => B :MLOAD(SP + 8904)
  A => D
  $ => A :MLOAD(SP + 8776)
  $ => C :XOR
  $ => A :MLOAD(SP + 8648)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8776)
  B => E
  $ => B :MLOAD(SP + 8904)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8608)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 24)
  A :MSTORE(SP + 8600)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8592)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8600)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8592)
  $ => A :OR
  A :MSTORE(SP + 8592)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8584)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8584)
  $ => B :OR
  $ => A :MLOAD(SP + 8592)
  $ => A :OR
  $ => B :MLOAD(SP + 8960)
  $ => E :ADD
  A :MSTORE(SP + 8584)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 9160)
  A => D
  $ => A :MLOAD(SP + 8656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8576)
  $ => B :MLOAD(SP + 8832)
  $ => A :MLOAD(SP + 8704)
  $ => C :XOR
  $ => A :MLOAD(SP + 8576)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8832)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8568)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8576)
  B :MSTORE(SP + 8552)
  $ => E :MLOAD(SP + 8552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8552)
  $ => E :SUB
  $ => A :MLOAD(SP + 8576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8560)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8576)
  B :MSTORE(SP + 8544)
  $ => E :MLOAD(SP + 8544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8552)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8544)
  $ => E :SUB
  $ => A :MLOAD(SP + 8576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8552)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8560)
  $ => A :XOR
  A :MSTORE(SP + 8544)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8576)
  B :MSTORE(SP + 8528)
  $ => E :MLOAD(SP + 8528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8528)
  $ => E :SUB
  $ => A :MLOAD(SP + 8576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8544)
  $ => B :XOR
  $ => A :MLOAD(SP + 8568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2453635748n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8608)
  $ => A :ADD
  B :MSTORE(SP + 8528)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8520)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8520)
  B :MSTORE(SP + 8504)
  $ => E :MLOAD(SP + 8504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8504)
  $ => E :SUB
  $ => A :MLOAD(SP + 8520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8512)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8520)
  B :MSTORE(SP + 8496)
  $ => E :MLOAD(SP + 8496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8504)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8496)
  $ => E :SUB
  $ => A :MLOAD(SP + 8520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8504)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8512)
  $ => A :XOR
  A :MSTORE(SP + 8496)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8520)
  B :MSTORE(SP + 8480)
  $ => E :MLOAD(SP + 8480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8480)
  $ => E :SUB
  $ => A :MLOAD(SP + 8520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8496)
  $ => A :XOR
  $ => B :MLOAD(SP + 8776)
  A => E
  $ => A :MLOAD(SP + 8648)
  $ => C :XOR
  $ => A :MLOAD(SP + 8520)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8648)
  B => D
  $ => B :MLOAD(SP + 8776)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8480)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 28)
  A :MSTORE(SP + 8472)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8464)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8472)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8464)
  $ => A :OR
  A :MSTORE(SP + 8464)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8456)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8456)
  $ => B :OR
  $ => A :MLOAD(SP + 8464)
  $ => A :OR
  $ => B :MLOAD(SP + 8832)
  $ => E :ADD
  A :MSTORE(SP + 8456)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 9032)
  A => D
  $ => A :MLOAD(SP + 8528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8448)
  $ => B :MLOAD(SP + 8704)
  $ => A :MLOAD(SP + 8576)
  $ => C :XOR
  $ => A :MLOAD(SP + 8448)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8704)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8440)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8448)
  B :MSTORE(SP + 8424)
  $ => E :MLOAD(SP + 8424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8424)
  $ => E :SUB
  $ => A :MLOAD(SP + 8448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8432)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8448)
  B :MSTORE(SP + 8416)
  $ => E :MLOAD(SP + 8416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8424)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8416)
  $ => E :SUB
  $ => A :MLOAD(SP + 8448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8424)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8432)
  $ => A :XOR
  A :MSTORE(SP + 8416)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8448)
  B :MSTORE(SP + 8400)
  $ => E :MLOAD(SP + 8400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8400)
  $ => E :SUB
  $ => A :MLOAD(SP + 8448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8416)
  $ => B :XOR
  $ => A :MLOAD(SP + 8440)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2870763221n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8480)
  $ => A :ADD
  B :MSTORE(SP + 8400)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8392)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8392)
  B :MSTORE(SP + 8376)
  $ => E :MLOAD(SP + 8376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8376)
  $ => E :SUB
  $ => A :MLOAD(SP + 8392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8384)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8392)
  B :MSTORE(SP + 8368)
  $ => E :MLOAD(SP + 8368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8376)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8368)
  $ => E :SUB
  $ => A :MLOAD(SP + 8392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8376)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8384)
  $ => A :XOR
  A :MSTORE(SP + 8368)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8392)
  B :MSTORE(SP + 8352)
  $ => E :MLOAD(SP + 8352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8352)
  $ => E :SUB
  $ => A :MLOAD(SP + 8392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8368)
  $ => A :XOR
  $ => B :MLOAD(SP + 8648)
  A => D
  $ => A :MLOAD(SP + 8520)
  $ => C :XOR
  $ => A :MLOAD(SP + 8392)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8520)
  B => E
  $ => B :MLOAD(SP + 8648)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8352)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 32)
  A :MSTORE(SP + 8344)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8336)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8344)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8336)
  $ => A :OR
  A :MSTORE(SP + 8336)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8328)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8328)
  $ => B :OR
  $ => A :MLOAD(SP + 8336)
  $ => A :OR
  $ => B :MLOAD(SP + 8704)
  $ => E :ADD
  A :MSTORE(SP + 8328)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8904)
  A => D
  $ => A :MLOAD(SP + 8400)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8320)
  $ => B :MLOAD(SP + 8576)
  $ => A :MLOAD(SP + 8448)
  $ => C :XOR
  $ => A :MLOAD(SP + 8320)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8576)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8312)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8320)
  B :MSTORE(SP + 8296)
  $ => E :MLOAD(SP + 8296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8304)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8296)
  $ => E :SUB
  $ => A :MLOAD(SP + 8320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8304)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8304)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8320)
  B :MSTORE(SP + 8288)
  $ => E :MLOAD(SP + 8288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8288)
  $ => E :SUB
  $ => A :MLOAD(SP + 8320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8304)
  $ => A :XOR
  A :MSTORE(SP + 8288)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8320)
  B :MSTORE(SP + 8272)
  $ => E :MLOAD(SP + 8272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8272)
  $ => E :SUB
  $ => A :MLOAD(SP + 8320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8288)
  $ => B :XOR
  $ => A :MLOAD(SP + 8312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3624381080n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8352)
  $ => A :ADD
  B :MSTORE(SP + 8272)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8264)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8264)
  B :MSTORE(SP + 8248)
  $ => E :MLOAD(SP + 8248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8248)
  $ => E :SUB
  $ => A :MLOAD(SP + 8264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8256)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8264)
  B :MSTORE(SP + 8240)
  $ => E :MLOAD(SP + 8240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8248)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8240)
  $ => E :SUB
  $ => A :MLOAD(SP + 8264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8248)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8256)
  $ => A :XOR
  A :MSTORE(SP + 8240)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8264)
  B :MSTORE(SP + 8224)
  $ => E :MLOAD(SP + 8224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8224)
  $ => E :SUB
  $ => A :MLOAD(SP + 8264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8240)
  $ => A :XOR
  $ => B :MLOAD(SP + 8520)
  A => D
  $ => A :MLOAD(SP + 8392)
  $ => C :XOR
  $ => A :MLOAD(SP + 8264)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8392)
  B => E
  $ => B :MLOAD(SP + 8520)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8224)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 36)
  A :MSTORE(SP + 8216)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8208)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8216)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8208)
  $ => A :OR
  A :MSTORE(SP + 8208)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8200)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8200)
  $ => B :OR
  $ => A :MLOAD(SP + 8208)
  $ => A :OR
  $ => B :MLOAD(SP + 8576)
  $ => E :ADD
  A :MSTORE(SP + 8200)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8776)
  A => E
  $ => A :MLOAD(SP + 8272)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8192)
  $ => B :MLOAD(SP + 8448)
  $ => A :MLOAD(SP + 8320)
  $ => C :XOR
  $ => A :MLOAD(SP + 8192)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8448)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8184)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8192)
  B :MSTORE(SP + 8168)
  $ => E :MLOAD(SP + 8168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8176)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8168)
  $ => E :SUB
  $ => A :MLOAD(SP + 8192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8176)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8176)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8192)
  B :MSTORE(SP + 8160)
  $ => E :MLOAD(SP + 8160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8160)
  $ => E :SUB
  $ => A :MLOAD(SP + 8192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8176)
  $ => A :XOR
  A :MSTORE(SP + 8160)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8192)
  B :MSTORE(SP + 8144)
  $ => E :MLOAD(SP + 8144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8144)
  $ => E :SUB
  $ => A :MLOAD(SP + 8192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8160)
  $ => B :XOR
  $ => A :MLOAD(SP + 8184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  310598401n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8224)
  $ => A :ADD
  B :MSTORE(SP + 8144)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8136)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8136)
  B :MSTORE(SP + 8120)
  $ => E :MLOAD(SP + 8120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8120)
  $ => E :SUB
  $ => A :MLOAD(SP + 8136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8128)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8136)
  B :MSTORE(SP + 8112)
  $ => E :MLOAD(SP + 8112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8120)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8112)
  $ => E :SUB
  $ => A :MLOAD(SP + 8136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8120)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8128)
  $ => A :XOR
  A :MSTORE(SP + 8112)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8136)
  B :MSTORE(SP + 8096)
  $ => E :MLOAD(SP + 8096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8096)
  $ => E :SUB
  $ => A :MLOAD(SP + 8136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8112)
  $ => A :XOR
  $ => B :MLOAD(SP + 8392)
  A => D
  $ => A :MLOAD(SP + 8264)
  $ => C :XOR
  $ => A :MLOAD(SP + 8136)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8264)
  B => E
  $ => B :MLOAD(SP + 8392)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8096)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 40)
  A :MSTORE(SP + 8088)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8080)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8088)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8080)
  $ => A :OR
  A :MSTORE(SP + 8080)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 8072)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8072)
  $ => B :OR
  $ => A :MLOAD(SP + 8080)
  $ => A :OR
  $ => B :MLOAD(SP + 8448)
  $ => E :ADD
  A :MSTORE(SP + 8072)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8648)
  A => D
  $ => A :MLOAD(SP + 8144)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8064)
  $ => B :MLOAD(SP + 8320)
  $ => A :MLOAD(SP + 8192)
  $ => C :XOR
  $ => A :MLOAD(SP + 8064)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8320)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8056)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8064)
  B :MSTORE(SP + 8040)
  $ => E :MLOAD(SP + 8040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8048)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8040)
  $ => E :SUB
  $ => A :MLOAD(SP + 8064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8048)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8048)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8064)
  B :MSTORE(SP + 8032)
  $ => E :MLOAD(SP + 8032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8040)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8032)
  $ => E :SUB
  $ => A :MLOAD(SP + 8064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8040)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8048)
  $ => A :XOR
  A :MSTORE(SP + 8032)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8064)
  B :MSTORE(SP + 8016)
  $ => E :MLOAD(SP + 8016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8024)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 8016)
  $ => E :SUB
  $ => A :MLOAD(SP + 8064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8024)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8032)
  $ => B :XOR
  $ => A :MLOAD(SP + 8056)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  607225278n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8096)
  $ => A :ADD
  B :MSTORE(SP + 8016)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8008)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8008)
  B :MSTORE(SP + 7992)
  $ => E :MLOAD(SP + 7992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 8000)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7992)
  $ => E :SUB
  $ => A :MLOAD(SP + 8008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 8000)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 8000)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8008)
  B :MSTORE(SP + 7984)
  $ => E :MLOAD(SP + 7984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7992)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7984)
  $ => E :SUB
  $ => A :MLOAD(SP + 8008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7992)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8000)
  $ => A :XOR
  A :MSTORE(SP + 7984)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8008)
  B :MSTORE(SP + 7968)
  $ => E :MLOAD(SP + 7968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7976)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7968)
  $ => E :SUB
  $ => A :MLOAD(SP + 8008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7976)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7984)
  $ => A :XOR
  $ => B :MLOAD(SP + 8264)
  A => D
  $ => A :MLOAD(SP + 8136)
  $ => C :XOR
  $ => A :MLOAD(SP + 8008)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8136)
  B => E
  $ => B :MLOAD(SP + 8264)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7968)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 44)
  A :MSTORE(SP + 7960)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7952)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 7960)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7952)
  $ => A :OR
  A :MSTORE(SP + 7952)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 7944)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7944)
  $ => B :OR
  $ => A :MLOAD(SP + 7952)
  $ => A :OR
  $ => B :MLOAD(SP + 8320)
  $ => E :ADD
  A :MSTORE(SP + 7944)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8520)
  A => D
  $ => A :MLOAD(SP + 8016)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7936)
  $ => B :MLOAD(SP + 8192)
  $ => A :MLOAD(SP + 8064)
  $ => C :XOR
  $ => A :MLOAD(SP + 7936)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8192)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7928)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7936)
  B :MSTORE(SP + 7912)
  $ => E :MLOAD(SP + 7912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7920)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7912)
  $ => E :SUB
  $ => A :MLOAD(SP + 7936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7920)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7920)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7936)
  B :MSTORE(SP + 7904)
  $ => E :MLOAD(SP + 7904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7912)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7904)
  $ => E :SUB
  $ => A :MLOAD(SP + 7936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7912)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7920)
  $ => A :XOR
  A :MSTORE(SP + 7904)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7936)
  B :MSTORE(SP + 7888)
  $ => E :MLOAD(SP + 7888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7896)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7888)
  $ => E :SUB
  $ => A :MLOAD(SP + 7936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7896)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7904)
  $ => B :XOR
  $ => A :MLOAD(SP + 7928)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1426881987n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7968)
  $ => A :ADD
  B :MSTORE(SP + 7888)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7880)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7880)
  B :MSTORE(SP + 7864)
  $ => E :MLOAD(SP + 7864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7872)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7864)
  $ => E :SUB
  $ => A :MLOAD(SP + 7880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7872)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7872)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7880)
  B :MSTORE(SP + 7856)
  $ => E :MLOAD(SP + 7856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7856)
  $ => E :SUB
  $ => A :MLOAD(SP + 7880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7872)
  $ => A :XOR
  A :MSTORE(SP + 7856)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7880)
  B :MSTORE(SP + 7840)
  $ => E :MLOAD(SP + 7840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7848)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7840)
  $ => E :SUB
  $ => A :MLOAD(SP + 7880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7848)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7856)
  $ => A :XOR
  $ => B :MLOAD(SP + 8136)
  A => E
  $ => A :MLOAD(SP + 8008)
  $ => C :XOR
  $ => A :MLOAD(SP + 7880)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 8008)
  B => D
  $ => B :MLOAD(SP + 8136)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7840)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 48)
  A :MSTORE(SP + 7832)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7824)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 7832)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7824)
  $ => A :OR
  A :MSTORE(SP + 7824)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 7816)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7816)
  $ => B :OR
  $ => A :MLOAD(SP + 7824)
  $ => A :OR
  $ => B :MLOAD(SP + 8192)
  $ => E :ADD
  A :MSTORE(SP + 7816)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8392)
  A => D
  $ => A :MLOAD(SP + 7888)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7808)
  $ => B :MLOAD(SP + 8064)
  $ => A :MLOAD(SP + 7936)
  $ => C :XOR
  $ => A :MLOAD(SP + 7808)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 8064)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7800)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7808)
  B :MSTORE(SP + 7784)
  $ => E :MLOAD(SP + 7784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7784)
  $ => E :SUB
  $ => A :MLOAD(SP + 7808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7792)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7808)
  B :MSTORE(SP + 7776)
  $ => E :MLOAD(SP + 7776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7784)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7776)
  $ => E :SUB
  $ => A :MLOAD(SP + 7808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7784)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7792)
  $ => A :XOR
  A :MSTORE(SP + 7776)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7808)
  B :MSTORE(SP + 7760)
  $ => E :MLOAD(SP + 7760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7768)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7760)
  $ => E :SUB
  $ => A :MLOAD(SP + 7808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7768)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7776)
  $ => B :XOR
  $ => A :MLOAD(SP + 7800)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1925078388n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7840)
  $ => A :ADD
  B :MSTORE(SP + 7760)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7752)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7752)
  B :MSTORE(SP + 7736)
  $ => E :MLOAD(SP + 7736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7744)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7736)
  $ => E :SUB
  $ => A :MLOAD(SP + 7752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7744)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7744)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7752)
  B :MSTORE(SP + 7728)
  $ => E :MLOAD(SP + 7728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7728)
  $ => E :SUB
  $ => A :MLOAD(SP + 7752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7744)
  $ => A :XOR
  A :MSTORE(SP + 7728)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7752)
  B :MSTORE(SP + 7712)
  $ => E :MLOAD(SP + 7712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7720)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7712)
  $ => E :SUB
  $ => A :MLOAD(SP + 7752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7720)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7728)
  $ => A :XOR
  $ => B :MLOAD(SP + 8008)
  A => D
  $ => A :MLOAD(SP + 7880)
  $ => C :XOR
  $ => A :MLOAD(SP + 7752)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7880)
  B => E
  $ => B :MLOAD(SP + 8008)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7712)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 52)
  A :MSTORE(SP + 7704)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7696)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 7704)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7696)
  $ => A :OR
  A :MSTORE(SP + 7696)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 7688)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7688)
  $ => B :OR
  $ => A :MLOAD(SP + 7696)
  $ => A :OR
  $ => B :MLOAD(SP + 8064)
  $ => E :ADD
  A :MSTORE(SP + 7688)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8264)
  A => D
  $ => A :MLOAD(SP + 7760)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7680)
  $ => B :MLOAD(SP + 7936)
  $ => A :MLOAD(SP + 7808)
  $ => C :XOR
  $ => A :MLOAD(SP + 7680)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7936)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7672)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7680)
  B :MSTORE(SP + 7656)
  $ => E :MLOAD(SP + 7656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7656)
  $ => E :SUB
  $ => A :MLOAD(SP + 7680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7664)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7680)
  B :MSTORE(SP + 7648)
  $ => E :MLOAD(SP + 7648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7656)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7648)
  $ => E :SUB
  $ => A :MLOAD(SP + 7680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7656)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7664)
  $ => A :XOR
  A :MSTORE(SP + 7648)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7680)
  B :MSTORE(SP + 7632)
  $ => E :MLOAD(SP + 7632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7632)
  $ => E :SUB
  $ => A :MLOAD(SP + 7680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7648)
  $ => B :XOR
  $ => A :MLOAD(SP + 7672)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2162078206n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7712)
  $ => A :ADD
  B :MSTORE(SP + 7632)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7624)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7624)
  B :MSTORE(SP + 7608)
  $ => E :MLOAD(SP + 7608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7616)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7608)
  $ => E :SUB
  $ => A :MLOAD(SP + 7624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7616)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7616)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7624)
  B :MSTORE(SP + 7600)
  $ => E :MLOAD(SP + 7600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7608)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7600)
  $ => E :SUB
  $ => A :MLOAD(SP + 7624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7608)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7616)
  $ => A :XOR
  A :MSTORE(SP + 7600)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7624)
  B :MSTORE(SP + 7584)
  $ => E :MLOAD(SP + 7584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7592)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7584)
  $ => E :SUB
  $ => A :MLOAD(SP + 7624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7592)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7600)
  $ => A :XOR
  $ => B :MLOAD(SP + 7880)
  A => D
  $ => A :MLOAD(SP + 7752)
  $ => C :XOR
  $ => A :MLOAD(SP + 7624)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7752)
  B => E
  $ => B :MLOAD(SP + 7880)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7584)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 56)
  A :MSTORE(SP + 7576)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7568)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 7576)
  $ => B :AND
  B => C
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  C => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7568)
  $ => A :OR
  A :MSTORE(SP + 7568)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 7560)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7560)
  $ => B :OR
  $ => A :MLOAD(SP + 7568)
  $ => A :OR
  $ => B :MLOAD(SP + 7936)
  A :MSTORE(SP + 7560)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8136)
  A => D
  $ => A :MLOAD(SP + 7632)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7552)
  $ => B :MLOAD(SP + 7808)
  $ => A :MLOAD(SP + 7680)
  $ => C :XOR
  $ => A :MLOAD(SP + 7552)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7808)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7544)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7552)
  B :MSTORE(SP + 7528)
  $ => E :MLOAD(SP + 7528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7528)
  $ => E :SUB
  $ => A :MLOAD(SP + 7552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7536)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7552)
  B :MSTORE(SP + 7520)
  $ => E :MLOAD(SP + 7520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7528)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7520)
  $ => E :SUB
  $ => A :MLOAD(SP + 7552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7528)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7536)
  $ => A :XOR
  A :MSTORE(SP + 7520)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7552)
  B :MSTORE(SP + 7504)
  $ => E :MLOAD(SP + 7504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7504)
  $ => E :SUB
  $ => A :MLOAD(SP + 7552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7520)
  $ => B :XOR
  $ => A :MLOAD(SP + 7544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2614888103n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7584)
  $ => A :ADD
  B :MSTORE(SP + 7504)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7496)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7496)
  B :MSTORE(SP + 7480)
  $ => E :MLOAD(SP + 7480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7480)
  $ => E :SUB
  $ => A :MLOAD(SP + 7496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7488)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7496)
  B :MSTORE(SP + 7472)
  $ => E :MLOAD(SP + 7472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7480)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7472)
  $ => E :SUB
  $ => A :MLOAD(SP + 7496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7480)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7488)
  $ => A :XOR
  A :MSTORE(SP + 7472)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7496)
  B :MSTORE(SP + 7456)
  $ => E :MLOAD(SP + 7456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7464)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7456)
  $ => E :SUB
  $ => A :MLOAD(SP + 7496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7464)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7472)
  $ => A :XOR
  $ => B :MLOAD(SP + 7752)
  A => E
  $ => A :MLOAD(SP + 7624)
  $ => C :XOR
  $ => A :MLOAD(SP + 7496)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7624)
  B => D
  $ => B :MLOAD(SP + 7752)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7456)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP + 64)
  $ => E :ADD
  $ => A :MLOAD(MEM:E + 60)
  A :MSTORE(SP + 7448)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7440)
  65280n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 7448)
  $ => B :AND
  B => D
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  D => A
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E => A
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7440)
  $ => A :OR
  A :MSTORE(SP + 7440)
  8n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  65280n => B  ;; LoadConst32
  $ => A :AND
  A :MSTORE(SP + 7432)
  24n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7432)
  $ => B :OR
  $ => A :MLOAD(SP + 7440)
  $ => A :OR
  $ => B :MLOAD(SP + 7808)
  A :MSTORE(SP + 7432)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8008)
  A => E
  $ => A :MLOAD(SP + 7504)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7424)
  $ => B :MLOAD(SP + 7680)
  $ => A :MLOAD(SP + 7552)
  $ => C :XOR
  $ => A :MLOAD(SP + 7424)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7680)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7416)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7424)
  B :MSTORE(SP + 7400)
  $ => E :MLOAD(SP + 7400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7400)
  $ => E :SUB
  $ => A :MLOAD(SP + 7424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7408)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7424)
  B :MSTORE(SP + 7392)
  $ => E :MLOAD(SP + 7392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7400)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7392)
  $ => E :SUB
  $ => A :MLOAD(SP + 7424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7400)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7408)
  $ => A :XOR
  A :MSTORE(SP + 7392)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7424)
  B :MSTORE(SP + 7376)
  $ => E :MLOAD(SP + 7376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7376)
  $ => E :SUB
  $ => A :MLOAD(SP + 7424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7392)
  $ => B :XOR
  $ => A :MLOAD(SP + 7416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3248222580n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7456)
  $ => A :ADD
  B :MSTORE(SP + 7376)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7368)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7368)
  B :MSTORE(SP + 7352)
  $ => E :MLOAD(SP + 7352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7352)
  $ => E :SUB
  $ => A :MLOAD(SP + 7368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7360)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7368)
  B :MSTORE(SP + 7344)
  $ => E :MLOAD(SP + 7344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7352)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7344)
  $ => E :SUB
  $ => A :MLOAD(SP + 7368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7352)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7360)
  $ => A :XOR
  A :MSTORE(SP + 7344)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7368)
  B :MSTORE(SP + 7328)
  $ => E :MLOAD(SP + 7328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7328)
  $ => E :SUB
  $ => A :MLOAD(SP + 7368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7344)
  $ => A :XOR
  $ => B :MLOAD(SP + 7624)
  A => D
  $ => A :MLOAD(SP + 7496)
  $ => C :XOR
  $ => A :MLOAD(SP + 7368)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7496)
  B => E
  $ => B :MLOAD(SP + 7624)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7328)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9224)
  B :MSTORE(SP + 7312)
  $ => E :MLOAD(SP + 7312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7312)
  $ => E :SUB
  $ => A :MLOAD(SP + 9224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7320)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9224)
  B :MSTORE(SP + 7304)
  $ => E :MLOAD(SP + 7304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7312)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7304)
  $ => E :SUB
  $ => A :MLOAD(SP + 9224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7312)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7320)
  $ => A :XOR
  A :MSTORE(SP + 7304)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7304)
  $ => A :XOR
  $ => B :MLOAD(SP + 9304)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7304)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7560)
  B :MSTORE(SP + 7288)
  $ => E :MLOAD(SP + 7288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7288)
  $ => E :SUB
  $ => A :MLOAD(SP + 7560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7296)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7560)
  B :MSTORE(SP + 7280)
  $ => E :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7288)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7280)
  $ => E :SUB
  $ => A :MLOAD(SP + 7560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7288)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7296)
  $ => A :XOR
  A :MSTORE(SP + 7280)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7280)
  $ => B :XOR
  $ => A :MLOAD(SP + 7304)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7680)
  A :MSTORE(SP + 7280)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7880)
  A => D
  $ => A :MLOAD(SP + 7376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7272)
  $ => B :MLOAD(SP + 7552)
  $ => A :MLOAD(SP + 7424)
  $ => C :XOR
  $ => A :MLOAD(SP + 7272)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7552)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7264)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7272)
  B :MSTORE(SP + 7248)
  $ => E :MLOAD(SP + 7248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7248)
  $ => E :SUB
  $ => A :MLOAD(SP + 7272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7256)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7272)
  B :MSTORE(SP + 7240)
  $ => E :MLOAD(SP + 7240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7248)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7240)
  $ => E :SUB
  $ => A :MLOAD(SP + 7272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7248)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7256)
  $ => A :XOR
  A :MSTORE(SP + 7240)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7272)
  B :MSTORE(SP + 7224)
  $ => E :MLOAD(SP + 7224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7224)
  $ => E :SUB
  $ => A :MLOAD(SP + 7272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7240)
  $ => B :XOR
  $ => A :MLOAD(SP + 7264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3835390401n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7328)
  $ => A :ADD
  B :MSTORE(SP + 7224)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7216)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7216)
  B :MSTORE(SP + 7200)
  $ => E :MLOAD(SP + 7200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7208)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7200)
  $ => E :SUB
  $ => A :MLOAD(SP + 7216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7208)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7208)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7216)
  B :MSTORE(SP + 7192)
  $ => E :MLOAD(SP + 7192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7200)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7192)
  $ => E :SUB
  $ => A :MLOAD(SP + 7216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7200)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7208)
  $ => A :XOR
  A :MSTORE(SP + 7192)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7216)
  B :MSTORE(SP + 7176)
  $ => E :MLOAD(SP + 7176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7184)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7176)
  $ => E :SUB
  $ => A :MLOAD(SP + 7216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7184)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7192)
  $ => A :XOR
  $ => B :MLOAD(SP + 7496)
  A => D
  $ => A :MLOAD(SP + 7368)
  $ => C :XOR
  $ => A :MLOAD(SP + 7216)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7368)
  B => E
  $ => B :MLOAD(SP + 7496)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7176)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9096)
  B :MSTORE(SP + 7160)
  $ => E :MLOAD(SP + 7160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7160)
  $ => E :SUB
  $ => A :MLOAD(SP + 9096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7168)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 9096)
  B :MSTORE(SP + 7152)
  $ => E :MLOAD(SP + 7152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7160)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7152)
  $ => E :SUB
  $ => A :MLOAD(SP + 9096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7160)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7168)
  $ => A :XOR
  A :MSTORE(SP + 7152)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 9096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7152)
  $ => A :XOR
  $ => B :MLOAD(SP + 9224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 8072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7152)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7432)
  B :MSTORE(SP + 7136)
  $ => E :MLOAD(SP + 7136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7136)
  $ => E :SUB
  $ => A :MLOAD(SP + 7432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7144)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7432)
  B :MSTORE(SP + 7128)
  $ => E :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7136)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7128)
  $ => E :SUB
  $ => A :MLOAD(SP + 7432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7136)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7144)
  $ => A :XOR
  A :MSTORE(SP + 7128)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7128)
  $ => B :XOR
  $ => A :MLOAD(SP + 7152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7552)
  A :MSTORE(SP + 7128)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7752)
  A => D
  $ => A :MLOAD(SP + 7224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7120)
  $ => B :MLOAD(SP + 7424)
  $ => A :MLOAD(SP + 7272)
  $ => C :XOR
  $ => A :MLOAD(SP + 7120)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7424)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7112)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7120)
  B :MSTORE(SP + 7096)
  $ => E :MLOAD(SP + 7096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7096)
  $ => E :SUB
  $ => A :MLOAD(SP + 7120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7104)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7120)
  B :MSTORE(SP + 7088)
  $ => E :MLOAD(SP + 7088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7096)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7088)
  $ => E :SUB
  $ => A :MLOAD(SP + 7120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7096)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7104)
  $ => A :XOR
  A :MSTORE(SP + 7088)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7120)
  B :MSTORE(SP + 7072)
  $ => E :MLOAD(SP + 7072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7072)
  $ => E :SUB
  $ => A :MLOAD(SP + 7120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7088)
  $ => B :XOR
  $ => A :MLOAD(SP + 7112)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4022224774n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7176)
  $ => A :ADD
  B :MSTORE(SP + 7072)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7064)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7064)
  B :MSTORE(SP + 7048)
  $ => E :MLOAD(SP + 7048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7056)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7048)
  $ => E :SUB
  $ => A :MLOAD(SP + 7064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7056)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7056)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7064)
  B :MSTORE(SP + 7040)
  $ => E :MLOAD(SP + 7040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7048)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7040)
  $ => E :SUB
  $ => A :MLOAD(SP + 7064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7048)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7056)
  $ => A :XOR
  A :MSTORE(SP + 7040)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7064)
  B :MSTORE(SP + 7024)
  $ => E :MLOAD(SP + 7024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7032)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7024)
  $ => E :SUB
  $ => A :MLOAD(SP + 7064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7032)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7040)
  $ => A :XOR
  $ => B :MLOAD(SP + 7368)
  A => E
  $ => A :MLOAD(SP + 7216)
  $ => C :XOR
  $ => A :MLOAD(SP + 7064)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7216)
  B => D
  $ => B :MLOAD(SP + 7368)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7024)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8968)
  B :MSTORE(SP + 7008)
  $ => E :MLOAD(SP + 7008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7008)
  $ => E :SUB
  $ => A :MLOAD(SP + 8968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7016)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8968)
  B :MSTORE(SP + 7000)
  $ => E :MLOAD(SP + 7000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 7008)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 7000)
  $ => E :SUB
  $ => A :MLOAD(SP + 8968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 7008)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7016)
  $ => A :XOR
  A :MSTORE(SP + 7000)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7000)
  $ => A :XOR
  $ => B :MLOAD(SP + 9096)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7944)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 7000)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7280)
  B :MSTORE(SP + 6984)
  $ => E :MLOAD(SP + 6984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6992)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6984)
  $ => E :SUB
  $ => A :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6992)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6992)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7280)
  B :MSTORE(SP + 6976)
  $ => E :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6984)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6976)
  $ => E :SUB
  $ => A :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6984)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6992)
  $ => A :XOR
  A :MSTORE(SP + 6976)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6976)
  $ => B :XOR
  $ => A :MLOAD(SP + 7000)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7424)
  A :MSTORE(SP + 6976)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7624)
  A => D
  $ => A :MLOAD(SP + 7072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6968)
  $ => B :MLOAD(SP + 7272)
  $ => A :MLOAD(SP + 7120)
  $ => C :XOR
  $ => A :MLOAD(SP + 6968)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7272)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6960)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6968)
  B :MSTORE(SP + 6944)
  $ => E :MLOAD(SP + 6944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6944)
  $ => E :SUB
  $ => A :MLOAD(SP + 6968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6952)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6968)
  B :MSTORE(SP + 6936)
  $ => E :MLOAD(SP + 6936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6944)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6936)
  $ => E :SUB
  $ => A :MLOAD(SP + 6968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6944)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6952)
  $ => A :XOR
  A :MSTORE(SP + 6936)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6968)
  B :MSTORE(SP + 6920)
  $ => E :MLOAD(SP + 6920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6928)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6920)
  $ => E :SUB
  $ => A :MLOAD(SP + 6968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6928)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6936)
  $ => B :XOR
  $ => A :MLOAD(SP + 6960)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  264347078n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7024)
  $ => A :ADD
  B :MSTORE(SP + 6920)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6912)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6912)
  B :MSTORE(SP + 6896)
  $ => E :MLOAD(SP + 6896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6904)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6896)
  $ => E :SUB
  $ => A :MLOAD(SP + 6912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6904)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6904)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6912)
  B :MSTORE(SP + 6888)
  $ => E :MLOAD(SP + 6888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6896)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6888)
  $ => E :SUB
  $ => A :MLOAD(SP + 6912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6896)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6904)
  $ => A :XOR
  A :MSTORE(SP + 6888)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6912)
  B :MSTORE(SP + 6872)
  $ => E :MLOAD(SP + 6872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6880)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6872)
  $ => E :SUB
  $ => A :MLOAD(SP + 6912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6880)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6888)
  $ => A :XOR
  $ => B :MLOAD(SP + 7216)
  A => D
  $ => A :MLOAD(SP + 7064)
  $ => C :XOR
  $ => A :MLOAD(SP + 6912)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 7064)
  B => E
  $ => B :MLOAD(SP + 7216)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6872)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8840)
  B :MSTORE(SP + 6856)
  $ => E :MLOAD(SP + 6856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6856)
  $ => E :SUB
  $ => A :MLOAD(SP + 8840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6864)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8840)
  B :MSTORE(SP + 6848)
  $ => E :MLOAD(SP + 6848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6856)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6848)
  $ => E :SUB
  $ => A :MLOAD(SP + 8840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6856)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6864)
  $ => A :XOR
  A :MSTORE(SP + 6848)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6848)
  $ => A :XOR
  $ => B :MLOAD(SP + 8968)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7816)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6848)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7128)
  B :MSTORE(SP + 6832)
  $ => E :MLOAD(SP + 6832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6840)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6832)
  $ => E :SUB
  $ => A :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6840)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6840)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7128)
  B :MSTORE(SP + 6824)
  $ => E :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6832)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6824)
  $ => E :SUB
  $ => A :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6832)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6840)
  $ => A :XOR
  A :MSTORE(SP + 6824)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6824)
  $ => B :XOR
  $ => A :MLOAD(SP + 6848)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7272)
  A :MSTORE(SP + 6824)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7496)
  A => D
  $ => A :MLOAD(SP + 6920)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6816)
  $ => B :MLOAD(SP + 7120)
  $ => A :MLOAD(SP + 6968)
  $ => C :XOR
  $ => A :MLOAD(SP + 6816)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 7120)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6808)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6816)
  B :MSTORE(SP + 6792)
  $ => E :MLOAD(SP + 6792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6792)
  $ => E :SUB
  $ => A :MLOAD(SP + 6816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6800)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6816)
  B :MSTORE(SP + 6784)
  $ => E :MLOAD(SP + 6784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6784)
  $ => E :SUB
  $ => A :MLOAD(SP + 6816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6800)
  $ => A :XOR
  A :MSTORE(SP + 6784)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6816)
  B :MSTORE(SP + 6768)
  $ => E :MLOAD(SP + 6768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6776)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6768)
  $ => E :SUB
  $ => A :MLOAD(SP + 6816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6776)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6784)
  $ => B :XOR
  $ => A :MLOAD(SP + 6808)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  604807628n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6872)
  $ => A :ADD
  B :MSTORE(SP + 6768)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6760)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6760)
  B :MSTORE(SP + 6744)
  $ => E :MLOAD(SP + 6744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6752)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6744)
  $ => E :SUB
  $ => A :MLOAD(SP + 6760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6752)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6752)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6760)
  B :MSTORE(SP + 6736)
  $ => E :MLOAD(SP + 6736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6744)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6736)
  $ => E :SUB
  $ => A :MLOAD(SP + 6760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6744)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6752)
  $ => A :XOR
  A :MSTORE(SP + 6736)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6760)
  B :MSTORE(SP + 6720)
  $ => E :MLOAD(SP + 6720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6728)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6720)
  $ => E :SUB
  $ => A :MLOAD(SP + 6760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6728)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6736)
  $ => A :XOR
  $ => B :MLOAD(SP + 7064)
  A => D
  $ => A :MLOAD(SP + 6912)
  $ => C :XOR
  $ => A :MLOAD(SP + 6760)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6912)
  B => E
  $ => B :MLOAD(SP + 7064)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6720)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8712)
  B :MSTORE(SP + 6704)
  $ => E :MLOAD(SP + 6704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6712)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6704)
  $ => E :SUB
  $ => A :MLOAD(SP + 8712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6712)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6712)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8712)
  B :MSTORE(SP + 6696)
  $ => E :MLOAD(SP + 6696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6704)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6696)
  $ => E :SUB
  $ => A :MLOAD(SP + 8712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6704)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6712)
  $ => A :XOR
  A :MSTORE(SP + 6696)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6696)
  $ => A :XOR
  $ => B :MLOAD(SP + 8840)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7688)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6696)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6976)
  B :MSTORE(SP + 6680)
  $ => E :MLOAD(SP + 6680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6688)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6680)
  $ => E :SUB
  $ => A :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6688)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6688)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6976)
  B :MSTORE(SP + 6672)
  $ => E :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6680)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6672)
  $ => E :SUB
  $ => A :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6680)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6688)
  $ => A :XOR
  A :MSTORE(SP + 6672)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6672)
  $ => B :XOR
  $ => A :MLOAD(SP + 6696)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7120)
  A :MSTORE(SP + 6672)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7368)
  A => E
  $ => A :MLOAD(SP + 6768)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6664)
  $ => B :MLOAD(SP + 6968)
  $ => A :MLOAD(SP + 6816)
  $ => C :XOR
  $ => A :MLOAD(SP + 6664)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6968)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6656)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6664)
  B :MSTORE(SP + 6640)
  $ => E :MLOAD(SP + 6640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6640)
  $ => E :SUB
  $ => A :MLOAD(SP + 6664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6648)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6664)
  B :MSTORE(SP + 6632)
  $ => E :MLOAD(SP + 6632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6632)
  $ => E :SUB
  $ => A :MLOAD(SP + 6664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6648)
  $ => A :XOR
  A :MSTORE(SP + 6632)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6664)
  B :MSTORE(SP + 6616)
  $ => E :MLOAD(SP + 6616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6624)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6616)
  $ => E :SUB
  $ => A :MLOAD(SP + 6664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6624)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6632)
  $ => B :XOR
  $ => A :MLOAD(SP + 6656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  770255983n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6720)
  $ => A :ADD
  B :MSTORE(SP + 6616)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6608)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6608)
  B :MSTORE(SP + 6592)
  $ => E :MLOAD(SP + 6592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6600)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6592)
  $ => E :SUB
  $ => A :MLOAD(SP + 6608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6600)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6600)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6608)
  B :MSTORE(SP + 6584)
  $ => E :MLOAD(SP + 6584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6592)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6584)
  $ => E :SUB
  $ => A :MLOAD(SP + 6608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6592)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6600)
  $ => A :XOR
  A :MSTORE(SP + 6584)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6608)
  B :MSTORE(SP + 6568)
  $ => E :MLOAD(SP + 6568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6576)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6568)
  $ => E :SUB
  $ => A :MLOAD(SP + 6608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6576)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6584)
  $ => A :XOR
  $ => B :MLOAD(SP + 6912)
  A => D
  $ => A :MLOAD(SP + 6760)
  $ => C :XOR
  $ => A :MLOAD(SP + 6608)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6760)
  B => E
  $ => B :MLOAD(SP + 6912)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6568)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8584)
  B :MSTORE(SP + 6552)
  $ => E :MLOAD(SP + 6552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6552)
  $ => E :SUB
  $ => A :MLOAD(SP + 8584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6560)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8584)
  B :MSTORE(SP + 6544)
  $ => E :MLOAD(SP + 6544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6552)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6544)
  $ => E :SUB
  $ => A :MLOAD(SP + 8584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6552)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6560)
  $ => A :XOR
  A :MSTORE(SP + 6544)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6544)
  $ => A :XOR
  $ => B :MLOAD(SP + 8712)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7560)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6544)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6824)
  B :MSTORE(SP + 6528)
  $ => E :MLOAD(SP + 6528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6528)
  $ => E :SUB
  $ => A :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6536)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6824)
  B :MSTORE(SP + 6520)
  $ => E :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6528)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6520)
  $ => E :SUB
  $ => A :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6528)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6536)
  $ => A :XOR
  A :MSTORE(SP + 6520)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6520)
  $ => B :XOR
  $ => A :MLOAD(SP + 6544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6968)
  A :MSTORE(SP + 6520)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7216)
  A => D
  $ => A :MLOAD(SP + 6616)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6512)
  $ => B :MLOAD(SP + 6816)
  $ => A :MLOAD(SP + 6664)
  $ => C :XOR
  $ => A :MLOAD(SP + 6512)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6816)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6504)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6512)
  B :MSTORE(SP + 6488)
  $ => E :MLOAD(SP + 6488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6488)
  $ => E :SUB
  $ => A :MLOAD(SP + 6512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6496)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6512)
  B :MSTORE(SP + 6480)
  $ => E :MLOAD(SP + 6480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6480)
  $ => E :SUB
  $ => A :MLOAD(SP + 6512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6496)
  $ => A :XOR
  A :MSTORE(SP + 6480)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6512)
  B :MSTORE(SP + 6464)
  $ => E :MLOAD(SP + 6464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6472)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6464)
  $ => E :SUB
  $ => A :MLOAD(SP + 6512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6472)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6480)
  $ => B :XOR
  $ => A :MLOAD(SP + 6504)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1249150122n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6568)
  $ => A :ADD
  B :MSTORE(SP + 6464)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6456)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6456)
  B :MSTORE(SP + 6440)
  $ => E :MLOAD(SP + 6440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6448)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6440)
  $ => E :SUB
  $ => A :MLOAD(SP + 6456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6448)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6448)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6456)
  B :MSTORE(SP + 6432)
  $ => E :MLOAD(SP + 6432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6440)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6432)
  $ => E :SUB
  $ => A :MLOAD(SP + 6456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6440)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6448)
  $ => A :XOR
  A :MSTORE(SP + 6432)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6456)
  B :MSTORE(SP + 6416)
  $ => E :MLOAD(SP + 6416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6424)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6416)
  $ => E :SUB
  $ => A :MLOAD(SP + 6456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6424)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6432)
  $ => A :XOR
  $ => B :MLOAD(SP + 6760)
  A => D
  $ => A :MLOAD(SP + 6608)
  $ => C :XOR
  $ => A :MLOAD(SP + 6456)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6608)
  B => E
  $ => B :MLOAD(SP + 6760)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6416)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8456)
  B :MSTORE(SP + 6400)
  $ => E :MLOAD(SP + 6400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6400)
  $ => E :SUB
  $ => A :MLOAD(SP + 8456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6408)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8456)
  B :MSTORE(SP + 6392)
  $ => E :MLOAD(SP + 6392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6400)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6392)
  $ => E :SUB
  $ => A :MLOAD(SP + 8456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6400)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6408)
  $ => A :XOR
  A :MSTORE(SP + 6392)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6392)
  $ => A :XOR
  $ => B :MLOAD(SP + 8584)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7432)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6392)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6672)
  B :MSTORE(SP + 6376)
  $ => E :MLOAD(SP + 6376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6376)
  $ => E :SUB
  $ => A :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6384)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6672)
  B :MSTORE(SP + 6368)
  $ => E :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6376)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6368)
  $ => E :SUB
  $ => A :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6376)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6384)
  $ => A :XOR
  A :MSTORE(SP + 6368)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6368)
  $ => B :XOR
  $ => A :MLOAD(SP + 6392)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6816)
  A :MSTORE(SP + 6368)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7064)
  A => D
  $ => A :MLOAD(SP + 6464)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6360)
  $ => B :MLOAD(SP + 6664)
  $ => A :MLOAD(SP + 6512)
  $ => C :XOR
  $ => A :MLOAD(SP + 6360)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6664)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6352)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6360)
  B :MSTORE(SP + 6336)
  $ => E :MLOAD(SP + 6336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6336)
  $ => E :SUB
  $ => A :MLOAD(SP + 6360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6344)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6360)
  B :MSTORE(SP + 6328)
  $ => E :MLOAD(SP + 6328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6328)
  $ => E :SUB
  $ => A :MLOAD(SP + 6360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6344)
  $ => A :XOR
  A :MSTORE(SP + 6328)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6360)
  B :MSTORE(SP + 6312)
  $ => E :MLOAD(SP + 6312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6312)
  $ => E :SUB
  $ => A :MLOAD(SP + 6360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6328)
  $ => B :XOR
  $ => A :MLOAD(SP + 6352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1555081692n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6416)
  $ => A :ADD
  B :MSTORE(SP + 6312)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6304)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6304)
  B :MSTORE(SP + 6288)
  $ => E :MLOAD(SP + 6288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6288)
  $ => E :SUB
  $ => A :MLOAD(SP + 6304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6296)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6304)
  B :MSTORE(SP + 6280)
  $ => E :MLOAD(SP + 6280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6288)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6280)
  $ => E :SUB
  $ => A :MLOAD(SP + 6304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6288)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6296)
  $ => A :XOR
  A :MSTORE(SP + 6280)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6304)
  B :MSTORE(SP + 6264)
  $ => E :MLOAD(SP + 6264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6264)
  $ => E :SUB
  $ => A :MLOAD(SP + 6304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6280)
  $ => A :XOR
  $ => B :MLOAD(SP + 6608)
  A => E
  $ => A :MLOAD(SP + 6456)
  $ => C :XOR
  $ => A :MLOAD(SP + 6304)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6456)
  B => D
  $ => B :MLOAD(SP + 6608)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6264)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8328)
  B :MSTORE(SP + 6248)
  $ => E :MLOAD(SP + 6248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6248)
  $ => E :SUB
  $ => A :MLOAD(SP + 8328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6256)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8328)
  B :MSTORE(SP + 6240)
  $ => E :MLOAD(SP + 6240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6248)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6240)
  $ => E :SUB
  $ => A :MLOAD(SP + 8328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6248)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6256)
  $ => A :XOR
  A :MSTORE(SP + 6240)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6240)
  $ => A :XOR
  $ => B :MLOAD(SP + 8456)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7280)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6240)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6520)
  B :MSTORE(SP + 6224)
  $ => E :MLOAD(SP + 6224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6224)
  $ => E :SUB
  $ => A :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6232)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6520)
  B :MSTORE(SP + 6216)
  $ => E :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6224)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6216)
  $ => E :SUB
  $ => A :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6224)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6232)
  $ => A :XOR
  A :MSTORE(SP + 6216)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6216)
  $ => B :XOR
  $ => A :MLOAD(SP + 6240)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6664)
  A :MSTORE(SP + 6216)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6912)
  A => D
  $ => A :MLOAD(SP + 6312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6208)
  $ => B :MLOAD(SP + 6512)
  $ => A :MLOAD(SP + 6360)
  $ => C :XOR
  $ => A :MLOAD(SP + 6208)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6512)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6200)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6208)
  B :MSTORE(SP + 6184)
  $ => E :MLOAD(SP + 6184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6184)
  $ => E :SUB
  $ => A :MLOAD(SP + 6208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6192)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6208)
  B :MSTORE(SP + 6176)
  $ => E :MLOAD(SP + 6176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6184)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6176)
  $ => E :SUB
  $ => A :MLOAD(SP + 6208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6184)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6192)
  $ => A :XOR
  A :MSTORE(SP + 6176)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6208)
  B :MSTORE(SP + 6160)
  $ => E :MLOAD(SP + 6160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6160)
  $ => E :SUB
  $ => A :MLOAD(SP + 6208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6176)
  $ => B :XOR
  $ => A :MLOAD(SP + 6200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1996064986n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6264)
  $ => A :ADD
  B :MSTORE(SP + 6160)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6152)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6152)
  B :MSTORE(SP + 6136)
  $ => E :MLOAD(SP + 6136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6136)
  $ => E :SUB
  $ => A :MLOAD(SP + 6152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6144)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6152)
  B :MSTORE(SP + 6128)
  $ => E :MLOAD(SP + 6128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6136)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6128)
  $ => E :SUB
  $ => A :MLOAD(SP + 6152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6136)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6144)
  $ => A :XOR
  A :MSTORE(SP + 6128)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6152)
  B :MSTORE(SP + 6112)
  $ => E :MLOAD(SP + 6112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6120)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6112)
  $ => E :SUB
  $ => A :MLOAD(SP + 6152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6120)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6128)
  $ => A :XOR
  $ => B :MLOAD(SP + 6456)
  A => D
  $ => A :MLOAD(SP + 6304)
  $ => C :XOR
  $ => A :MLOAD(SP + 6152)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6304)
  B => E
  $ => B :MLOAD(SP + 6456)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6112)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8200)
  B :MSTORE(SP + 6096)
  $ => E :MLOAD(SP + 6096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6096)
  $ => E :SUB
  $ => A :MLOAD(SP + 8200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6104)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8200)
  B :MSTORE(SP + 6088)
  $ => E :MLOAD(SP + 6088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6096)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6088)
  $ => E :SUB
  $ => A :MLOAD(SP + 8200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6096)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6104)
  $ => A :XOR
  A :MSTORE(SP + 6088)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6088)
  $ => A :XOR
  $ => B :MLOAD(SP + 8328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 7128)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6088)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6368)
  B :MSTORE(SP + 6072)
  $ => E :MLOAD(SP + 6072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6072)
  $ => E :SUB
  $ => A :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6080)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6368)
  B :MSTORE(SP + 6064)
  $ => E :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6072)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6064)
  $ => E :SUB
  $ => A :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6072)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6080)
  $ => A :XOR
  A :MSTORE(SP + 6064)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6064)
  $ => B :XOR
  $ => A :MLOAD(SP + 6088)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6512)
  A :MSTORE(SP + 6064)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6760)
  A => D
  $ => A :MLOAD(SP + 6160)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6056)
  $ => B :MLOAD(SP + 6360)
  $ => A :MLOAD(SP + 6208)
  $ => C :XOR
  $ => A :MLOAD(SP + 6056)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6360)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6048)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6056)
  B :MSTORE(SP + 6032)
  $ => E :MLOAD(SP + 6032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6040)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6032)
  $ => E :SUB
  $ => A :MLOAD(SP + 6056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6040)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6040)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6056)
  B :MSTORE(SP + 6024)
  $ => E :MLOAD(SP + 6024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6032)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6024)
  $ => E :SUB
  $ => A :MLOAD(SP + 6056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6032)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6040)
  $ => A :XOR
  A :MSTORE(SP + 6024)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6056)
  B :MSTORE(SP + 6008)
  $ => E :MLOAD(SP + 6008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 6016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 6008)
  $ => E :SUB
  $ => A :MLOAD(SP + 6056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 6016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6024)
  $ => B :XOR
  $ => A :MLOAD(SP + 6048)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2554220882n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6112)
  $ => A :ADD
  B :MSTORE(SP + 6008)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 6000)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6000)
  B :MSTORE(SP + 5984)
  $ => E :MLOAD(SP + 5984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5992)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5984)
  $ => E :SUB
  $ => A :MLOAD(SP + 6000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5992)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5992)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6000)
  B :MSTORE(SP + 5976)
  $ => E :MLOAD(SP + 5976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5984)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5976)
  $ => E :SUB
  $ => A :MLOAD(SP + 6000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5984)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5992)
  $ => A :XOR
  A :MSTORE(SP + 5976)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6000)
  B :MSTORE(SP + 5960)
  $ => E :MLOAD(SP + 5960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5968)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5960)
  $ => E :SUB
  $ => A :MLOAD(SP + 6000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5968)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5976)
  $ => A :XOR
  $ => B :MLOAD(SP + 6304)
  A => D
  $ => A :MLOAD(SP + 6152)
  $ => C :XOR
  $ => A :MLOAD(SP + 6000)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6152)
  B => E
  $ => B :MLOAD(SP + 6304)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5960)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8072)
  B :MSTORE(SP + 5944)
  $ => E :MLOAD(SP + 5944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5944)
  $ => E :SUB
  $ => A :MLOAD(SP + 8072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5952)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 8072)
  B :MSTORE(SP + 5936)
  $ => E :MLOAD(SP + 5936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5944)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5936)
  $ => E :SUB
  $ => A :MLOAD(SP + 8072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5944)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5952)
  $ => A :XOR
  A :MSTORE(SP + 5936)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 8072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5936)
  $ => A :XOR
  $ => B :MLOAD(SP + 8200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6976)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5936)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6216)
  B :MSTORE(SP + 5920)
  $ => E :MLOAD(SP + 5920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5928)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5920)
  $ => E :SUB
  $ => A :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5928)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5928)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6216)
  B :MSTORE(SP + 5912)
  $ => E :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5920)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5912)
  $ => E :SUB
  $ => A :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5920)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5928)
  $ => A :XOR
  A :MSTORE(SP + 5912)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5912)
  $ => B :XOR
  $ => A :MLOAD(SP + 5936)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6360)
  A :MSTORE(SP + 5912)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6608)
  A => E
  $ => A :MLOAD(SP + 6008)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5904)
  $ => B :MLOAD(SP + 6208)
  $ => A :MLOAD(SP + 6056)
  $ => C :XOR
  $ => A :MLOAD(SP + 5904)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6208)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5896)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5904)
  B :MSTORE(SP + 5880)
  $ => E :MLOAD(SP + 5880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5880)
  $ => E :SUB
  $ => A :MLOAD(SP + 5904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5888)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5904)
  B :MSTORE(SP + 5872)
  $ => E :MLOAD(SP + 5872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5880)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5872)
  $ => E :SUB
  $ => A :MLOAD(SP + 5904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5880)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5888)
  $ => A :XOR
  A :MSTORE(SP + 5872)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5904)
  B :MSTORE(SP + 5856)
  $ => E :MLOAD(SP + 5856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5856)
  $ => E :SUB
  $ => A :MLOAD(SP + 5904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5872)
  $ => B :XOR
  $ => A :MLOAD(SP + 5896)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2821834349n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5960)
  $ => A :ADD
  B :MSTORE(SP + 5856)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5848)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5848)
  B :MSTORE(SP + 5832)
  $ => E :MLOAD(SP + 5832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5840)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5832)
  $ => E :SUB
  $ => A :MLOAD(SP + 5848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5840)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5840)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5848)
  B :MSTORE(SP + 5824)
  $ => E :MLOAD(SP + 5824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5832)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5824)
  $ => E :SUB
  $ => A :MLOAD(SP + 5848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5832)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5840)
  $ => A :XOR
  A :MSTORE(SP + 5824)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5848)
  B :MSTORE(SP + 5808)
  $ => E :MLOAD(SP + 5808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5808)
  $ => E :SUB
  $ => A :MLOAD(SP + 5848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5824)
  $ => A :XOR
  $ => B :MLOAD(SP + 6152)
  A => D
  $ => A :MLOAD(SP + 6000)
  $ => C :XOR
  $ => A :MLOAD(SP + 5848)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 6000)
  B => E
  $ => B :MLOAD(SP + 6152)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5808)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7944)
  B :MSTORE(SP + 5792)
  $ => E :MLOAD(SP + 5792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5792)
  $ => E :SUB
  $ => A :MLOAD(SP + 7944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5800)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7944)
  B :MSTORE(SP + 5784)
  $ => E :MLOAD(SP + 5784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5784)
  $ => E :SUB
  $ => A :MLOAD(SP + 7944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5800)
  $ => A :XOR
  A :MSTORE(SP + 5784)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5784)
  $ => A :XOR
  $ => B :MLOAD(SP + 8072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6824)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5784)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6064)
  B :MSTORE(SP + 5768)
  $ => E :MLOAD(SP + 5768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5776)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5768)
  $ => E :SUB
  $ => A :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5776)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5776)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6064)
  B :MSTORE(SP + 5760)
  $ => E :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5768)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5760)
  $ => E :SUB
  $ => A :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5768)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5776)
  $ => A :XOR
  A :MSTORE(SP + 5760)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5760)
  $ => B :XOR
  $ => A :MLOAD(SP + 5784)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6208)
  A :MSTORE(SP + 5760)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6456)
  A => D
  $ => A :MLOAD(SP + 5856)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5752)
  $ => B :MLOAD(SP + 6056)
  $ => A :MLOAD(SP + 5904)
  $ => C :XOR
  $ => A :MLOAD(SP + 5752)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 6056)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5744)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5752)
  B :MSTORE(SP + 5728)
  $ => E :MLOAD(SP + 5728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5728)
  $ => E :SUB
  $ => A :MLOAD(SP + 5752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5736)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5752)
  B :MSTORE(SP + 5720)
  $ => E :MLOAD(SP + 5720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5728)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5720)
  $ => E :SUB
  $ => A :MLOAD(SP + 5752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5728)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5736)
  $ => A :XOR
  A :MSTORE(SP + 5720)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5752)
  B :MSTORE(SP + 5704)
  $ => E :MLOAD(SP + 5704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5712)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5704)
  $ => E :SUB
  $ => A :MLOAD(SP + 5752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5712)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5720)
  $ => B :XOR
  $ => A :MLOAD(SP + 5744)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2952996808n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5808)
  $ => A :ADD
  B :MSTORE(SP + 5704)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5696)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5696)
  B :MSTORE(SP + 5680)
  $ => E :MLOAD(SP + 5680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5688)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5680)
  $ => E :SUB
  $ => A :MLOAD(SP + 5696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5688)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5688)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5696)
  B :MSTORE(SP + 5672)
  $ => E :MLOAD(SP + 5672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5680)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5672)
  $ => E :SUB
  $ => A :MLOAD(SP + 5696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5680)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5688)
  $ => A :XOR
  A :MSTORE(SP + 5672)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5696)
  B :MSTORE(SP + 5656)
  $ => E :MLOAD(SP + 5656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5656)
  $ => E :SUB
  $ => A :MLOAD(SP + 5696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5672)
  $ => A :XOR
  $ => B :MLOAD(SP + 6000)
  A => D
  $ => A :MLOAD(SP + 5848)
  $ => C :XOR
  $ => A :MLOAD(SP + 5696)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 5848)
  B => E
  $ => B :MLOAD(SP + 6000)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5656)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7816)
  B :MSTORE(SP + 5640)
  $ => E :MLOAD(SP + 5640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5640)
  $ => E :SUB
  $ => A :MLOAD(SP + 7816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5648)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7816)
  B :MSTORE(SP + 5632)
  $ => E :MLOAD(SP + 5632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5632)
  $ => E :SUB
  $ => A :MLOAD(SP + 7816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5648)
  $ => A :XOR
  A :MSTORE(SP + 5632)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5632)
  $ => A :XOR
  $ => B :MLOAD(SP + 7944)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6672)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5632)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5912)
  B :MSTORE(SP + 5616)
  $ => E :MLOAD(SP + 5616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5624)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5616)
  $ => E :SUB
  $ => A :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5624)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5624)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5912)
  B :MSTORE(SP + 5608)
  $ => E :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5616)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5608)
  $ => E :SUB
  $ => A :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5616)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5624)
  $ => A :XOR
  A :MSTORE(SP + 5608)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5608)
  $ => B :XOR
  $ => A :MLOAD(SP + 5632)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6056)
  A :MSTORE(SP + 5608)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6304)
  A => D
  $ => A :MLOAD(SP + 5704)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5600)
  $ => B :MLOAD(SP + 5904)
  $ => A :MLOAD(SP + 5752)
  $ => C :XOR
  $ => A :MLOAD(SP + 5600)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5904)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5592)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5600)
  B :MSTORE(SP + 5576)
  $ => E :MLOAD(SP + 5576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5584)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5576)
  $ => E :SUB
  $ => A :MLOAD(SP + 5600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5584)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5584)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5600)
  B :MSTORE(SP + 5568)
  $ => E :MLOAD(SP + 5568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5576)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5568)
  $ => E :SUB
  $ => A :MLOAD(SP + 5600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5576)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5584)
  $ => A :XOR
  A :MSTORE(SP + 5568)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5600)
  B :MSTORE(SP + 5552)
  $ => E :MLOAD(SP + 5552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5552)
  $ => E :SUB
  $ => A :MLOAD(SP + 5600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5568)
  $ => B :XOR
  $ => A :MLOAD(SP + 5592)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3210313671n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5656)
  $ => A :ADD
  B :MSTORE(SP + 5552)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5544)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5544)
  B :MSTORE(SP + 5528)
  $ => E :MLOAD(SP + 5528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5528)
  $ => E :SUB
  $ => A :MLOAD(SP + 5544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5536)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5544)
  B :MSTORE(SP + 5520)
  $ => E :MLOAD(SP + 5520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5528)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5520)
  $ => E :SUB
  $ => A :MLOAD(SP + 5544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5528)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5536)
  $ => A :XOR
  A :MSTORE(SP + 5520)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5544)
  B :MSTORE(SP + 5504)
  $ => E :MLOAD(SP + 5504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5504)
  $ => E :SUB
  $ => A :MLOAD(SP + 5544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5520)
  $ => A :XOR
  $ => B :MLOAD(SP + 5848)
  A => E
  $ => A :MLOAD(SP + 5696)
  $ => C :XOR
  $ => A :MLOAD(SP + 5544)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 5696)
  B => D
  $ => B :MLOAD(SP + 5848)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5504)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7688)
  B :MSTORE(SP + 5488)
  $ => E :MLOAD(SP + 5488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5488)
  $ => E :SUB
  $ => A :MLOAD(SP + 7688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5496)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7688)
  B :MSTORE(SP + 5480)
  $ => E :MLOAD(SP + 5480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5480)
  $ => E :SUB
  $ => A :MLOAD(SP + 7688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5496)
  $ => A :XOR
  A :MSTORE(SP + 5480)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5480)
  $ => A :XOR
  $ => B :MLOAD(SP + 7816)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6520)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5480)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5760)
  B :MSTORE(SP + 5464)
  $ => E :MLOAD(SP + 5464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5472)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5464)
  $ => E :SUB
  $ => A :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5472)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5472)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5760)
  B :MSTORE(SP + 5456)
  $ => E :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5464)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5456)
  $ => E :SUB
  $ => A :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5464)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5472)
  $ => A :XOR
  A :MSTORE(SP + 5456)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5456)
  $ => B :XOR
  $ => A :MLOAD(SP + 5480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5904)
  A :MSTORE(SP + 5456)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6152)
  A => D
  $ => A :MLOAD(SP + 5552)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5448)
  $ => B :MLOAD(SP + 5752)
  $ => A :MLOAD(SP + 5600)
  $ => C :XOR
  $ => A :MLOAD(SP + 5448)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5752)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5440)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5448)
  B :MSTORE(SP + 5424)
  $ => E :MLOAD(SP + 5424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5424)
  $ => E :SUB
  $ => A :MLOAD(SP + 5448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5432)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5448)
  B :MSTORE(SP + 5416)
  $ => E :MLOAD(SP + 5416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5424)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5416)
  $ => E :SUB
  $ => A :MLOAD(SP + 5448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5424)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5432)
  $ => A :XOR
  A :MSTORE(SP + 5416)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5448)
  B :MSTORE(SP + 5400)
  $ => E :MLOAD(SP + 5400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5400)
  $ => E :SUB
  $ => A :MLOAD(SP + 5448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5416)
  $ => B :XOR
  $ => A :MLOAD(SP + 5440)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3336571891n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5504)
  $ => A :ADD
  B :MSTORE(SP + 5400)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5392)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5392)
  B :MSTORE(SP + 5376)
  $ => E :MLOAD(SP + 5376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5376)
  $ => E :SUB
  $ => A :MLOAD(SP + 5392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5384)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5392)
  B :MSTORE(SP + 5368)
  $ => E :MLOAD(SP + 5368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5376)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5368)
  $ => E :SUB
  $ => A :MLOAD(SP + 5392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5376)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5384)
  $ => A :XOR
  A :MSTORE(SP + 5368)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5392)
  B :MSTORE(SP + 5352)
  $ => E :MLOAD(SP + 5352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5352)
  $ => E :SUB
  $ => A :MLOAD(SP + 5392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5368)
  $ => A :XOR
  $ => B :MLOAD(SP + 5696)
  A => D
  $ => A :MLOAD(SP + 5544)
  $ => C :XOR
  $ => A :MLOAD(SP + 5392)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 5544)
  B => E
  $ => B :MLOAD(SP + 5696)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5352)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7560)
  B :MSTORE(SP + 5336)
  $ => E :MLOAD(SP + 5336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5336)
  $ => E :SUB
  $ => A :MLOAD(SP + 7560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5344)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7560)
  B :MSTORE(SP + 5328)
  $ => E :MLOAD(SP + 5328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5328)
  $ => E :SUB
  $ => A :MLOAD(SP + 7560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5344)
  $ => A :XOR
  A :MSTORE(SP + 5328)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5328)
  $ => A :XOR
  $ => B :MLOAD(SP + 7688)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6368)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5328)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5608)
  B :MSTORE(SP + 5312)
  $ => E :MLOAD(SP + 5312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5312)
  $ => E :SUB
  $ => A :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5320)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5608)
  B :MSTORE(SP + 5304)
  $ => E :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5312)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5304)
  $ => E :SUB
  $ => A :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5312)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5320)
  $ => A :XOR
  A :MSTORE(SP + 5304)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5304)
  $ => B :XOR
  $ => A :MLOAD(SP + 5328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5752)
  A :MSTORE(SP + 5304)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6000)
  A => D
  $ => A :MLOAD(SP + 5400)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5296)
  $ => B :MLOAD(SP + 5600)
  $ => A :MLOAD(SP + 5448)
  $ => C :XOR
  $ => A :MLOAD(SP + 5296)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5600)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5288)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5296)
  B :MSTORE(SP + 5272)
  $ => E :MLOAD(SP + 5272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5272)
  $ => E :SUB
  $ => A :MLOAD(SP + 5296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5280)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5296)
  B :MSTORE(SP + 5264)
  $ => E :MLOAD(SP + 5264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5264)
  $ => E :SUB
  $ => A :MLOAD(SP + 5296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5280)
  $ => A :XOR
  A :MSTORE(SP + 5264)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5296)
  B :MSTORE(SP + 5248)
  $ => E :MLOAD(SP + 5248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5248)
  $ => E :SUB
  $ => A :MLOAD(SP + 5296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5264)
  $ => B :XOR
  $ => A :MLOAD(SP + 5288)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3584528711n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5352)
  $ => A :ADD
  B :MSTORE(SP + 5248)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5240)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5240)
  B :MSTORE(SP + 5224)
  $ => E :MLOAD(SP + 5224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5224)
  $ => E :SUB
  $ => A :MLOAD(SP + 5240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5232)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5240)
  B :MSTORE(SP + 5216)
  $ => E :MLOAD(SP + 5216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5224)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5216)
  $ => E :SUB
  $ => A :MLOAD(SP + 5240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5224)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5232)
  $ => A :XOR
  A :MSTORE(SP + 5216)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5240)
  B :MSTORE(SP + 5200)
  $ => E :MLOAD(SP + 5200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5208)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5200)
  $ => E :SUB
  $ => A :MLOAD(SP + 5240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5208)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5216)
  $ => A :XOR
  $ => B :MLOAD(SP + 5544)
  A => D
  $ => A :MLOAD(SP + 5392)
  $ => C :XOR
  $ => A :MLOAD(SP + 5240)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 5392)
  B => E
  $ => B :MLOAD(SP + 5544)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5200)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7432)
  B :MSTORE(SP + 5184)
  $ => E :MLOAD(SP + 5184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5184)
  $ => E :SUB
  $ => A :MLOAD(SP + 7432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5192)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7432)
  B :MSTORE(SP + 5176)
  $ => E :MLOAD(SP + 5176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5184)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5176)
  $ => E :SUB
  $ => A :MLOAD(SP + 7432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5184)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5192)
  $ => A :XOR
  A :MSTORE(SP + 5176)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5176)
  $ => A :XOR
  $ => B :MLOAD(SP + 7560)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6216)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5176)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5456)
  B :MSTORE(SP + 5160)
  $ => E :MLOAD(SP + 5160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5160)
  $ => E :SUB
  $ => A :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5168)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5456)
  B :MSTORE(SP + 5152)
  $ => E :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5160)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5152)
  $ => E :SUB
  $ => A :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5160)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5168)
  $ => A :XOR
  A :MSTORE(SP + 5152)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5152)
  $ => B :XOR
  $ => A :MLOAD(SP + 5176)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5600)
  A :MSTORE(SP + 5152)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5848)
  A => E
  $ => A :MLOAD(SP + 5248)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5144)
  $ => B :MLOAD(SP + 5448)
  $ => A :MLOAD(SP + 5296)
  $ => C :XOR
  $ => A :MLOAD(SP + 5144)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5448)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5136)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5144)
  B :MSTORE(SP + 5120)
  $ => E :MLOAD(SP + 5120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5120)
  $ => E :SUB
  $ => A :MLOAD(SP + 5144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5128)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5144)
  B :MSTORE(SP + 5112)
  $ => E :MLOAD(SP + 5112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5120)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5112)
  $ => E :SUB
  $ => A :MLOAD(SP + 5144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5120)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5128)
  $ => A :XOR
  A :MSTORE(SP + 5112)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5144)
  B :MSTORE(SP + 5096)
  $ => E :MLOAD(SP + 5096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5096)
  $ => E :SUB
  $ => A :MLOAD(SP + 5144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5112)
  $ => B :XOR
  $ => A :MLOAD(SP + 5136)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  113926993n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5200)
  $ => A :ADD
  B :MSTORE(SP + 5096)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5088)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5088)
  B :MSTORE(SP + 5072)
  $ => E :MLOAD(SP + 5072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5072)
  $ => E :SUB
  $ => A :MLOAD(SP + 5088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5080)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5088)
  B :MSTORE(SP + 5064)
  $ => E :MLOAD(SP + 5064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5072)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5064)
  $ => E :SUB
  $ => A :MLOAD(SP + 5088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5072)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5080)
  $ => A :XOR
  A :MSTORE(SP + 5064)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5088)
  B :MSTORE(SP + 5048)
  $ => E :MLOAD(SP + 5048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5056)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5048)
  $ => E :SUB
  $ => A :MLOAD(SP + 5088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5056)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5064)
  $ => A :XOR
  $ => B :MLOAD(SP + 5392)
  A => D
  $ => A :MLOAD(SP + 5240)
  $ => C :XOR
  $ => A :MLOAD(SP + 5088)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 5240)
  B => E
  $ => B :MLOAD(SP + 5392)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5048)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7280)
  B :MSTORE(SP + 5032)
  $ => E :MLOAD(SP + 5032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5040)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5032)
  $ => E :SUB
  $ => A :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5040)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5040)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7280)
  B :MSTORE(SP + 5024)
  $ => E :MLOAD(SP + 5024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5032)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5024)
  $ => E :SUB
  $ => A :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5032)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5040)
  $ => A :XOR
  A :MSTORE(SP + 5024)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7280)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5024)
  $ => A :XOR
  $ => B :MLOAD(SP + 7432)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 6064)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5024)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5304)
  B :MSTORE(SP + 5008)
  $ => E :MLOAD(SP + 5008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5008)
  $ => E :SUB
  $ => A :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 5016)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5304)
  B :MSTORE(SP + 5000)
  $ => E :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 5008)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 5000)
  $ => E :SUB
  $ => A :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 5008)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5016)
  $ => A :XOR
  A :MSTORE(SP + 5000)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5000)
  $ => B :XOR
  $ => A :MLOAD(SP + 5024)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5448)
  A :MSTORE(SP + 5000)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5696)
  A => D
  $ => A :MLOAD(SP + 5096)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4992)
  $ => B :MLOAD(SP + 5296)
  $ => A :MLOAD(SP + 5144)
  $ => C :XOR
  $ => A :MLOAD(SP + 4992)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5296)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4984)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4992)
  B :MSTORE(SP + 4968)
  $ => E :MLOAD(SP + 4968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4976)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4968)
  $ => E :SUB
  $ => A :MLOAD(SP + 4992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4976)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4976)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4992)
  B :MSTORE(SP + 4960)
  $ => E :MLOAD(SP + 4960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4968)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4960)
  $ => E :SUB
  $ => A :MLOAD(SP + 4992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4968)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4976)
  $ => A :XOR
  A :MSTORE(SP + 4960)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4992)
  B :MSTORE(SP + 4944)
  $ => E :MLOAD(SP + 4944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4944)
  $ => E :SUB
  $ => A :MLOAD(SP + 4992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4960)
  $ => B :XOR
  $ => A :MLOAD(SP + 4984)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  338241895n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5048)
  $ => A :ADD
  B :MSTORE(SP + 4944)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4936)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4936)
  B :MSTORE(SP + 4920)
  $ => E :MLOAD(SP + 4920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4928)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4920)
  $ => E :SUB
  $ => A :MLOAD(SP + 4936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4928)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4928)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4936)
  B :MSTORE(SP + 4912)
  $ => E :MLOAD(SP + 4912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4920)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4912)
  $ => E :SUB
  $ => A :MLOAD(SP + 4936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4920)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4928)
  $ => A :XOR
  A :MSTORE(SP + 4912)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4936)
  B :MSTORE(SP + 4896)
  $ => E :MLOAD(SP + 4896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4904)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4896)
  $ => E :SUB
  $ => A :MLOAD(SP + 4936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4904)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4912)
  $ => A :XOR
  $ => B :MLOAD(SP + 5240)
  A => D
  $ => A :MLOAD(SP + 5088)
  $ => C :XOR
  $ => A :MLOAD(SP + 4936)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 5088)
  B => E
  $ => B :MLOAD(SP + 5240)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4896)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7128)
  B :MSTORE(SP + 4880)
  $ => E :MLOAD(SP + 4880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4880)
  $ => E :SUB
  $ => A :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4888)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 7128)
  B :MSTORE(SP + 4872)
  $ => E :MLOAD(SP + 4872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4880)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4872)
  $ => E :SUB
  $ => A :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4880)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4888)
  $ => A :XOR
  A :MSTORE(SP + 4872)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 7128)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4872)
  $ => A :XOR
  $ => B :MLOAD(SP + 7280)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5912)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4872)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5152)
  B :MSTORE(SP + 4856)
  $ => E :MLOAD(SP + 4856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4856)
  $ => E :SUB
  $ => A :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4864)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5152)
  B :MSTORE(SP + 4848)
  $ => E :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4856)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4848)
  $ => E :SUB
  $ => A :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4856)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4864)
  $ => A :XOR
  A :MSTORE(SP + 4848)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4848)
  $ => B :XOR
  $ => A :MLOAD(SP + 4872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5296)
  A :MSTORE(SP + 4848)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5544)
  A => D
  $ => A :MLOAD(SP + 4944)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4840)
  $ => B :MLOAD(SP + 5144)
  $ => A :MLOAD(SP + 4992)
  $ => C :XOR
  $ => A :MLOAD(SP + 4840)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 5144)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4832)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4840)
  B :MSTORE(SP + 4816)
  $ => E :MLOAD(SP + 4816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4824)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4816)
  $ => E :SUB
  $ => A :MLOAD(SP + 4840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4824)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4824)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4840)
  B :MSTORE(SP + 4808)
  $ => E :MLOAD(SP + 4808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4808)
  $ => E :SUB
  $ => A :MLOAD(SP + 4840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4824)
  $ => A :XOR
  A :MSTORE(SP + 4808)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4840)
  B :MSTORE(SP + 4792)
  $ => E :MLOAD(SP + 4792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4792)
  $ => E :SUB
  $ => A :MLOAD(SP + 4840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4808)
  $ => B :XOR
  $ => A :MLOAD(SP + 4832)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  666307205n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4896)
  $ => A :ADD
  B :MSTORE(SP + 4792)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4784)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4784)
  B :MSTORE(SP + 4768)
  $ => E :MLOAD(SP + 4768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4776)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4768)
  $ => E :SUB
  $ => A :MLOAD(SP + 4784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4776)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4776)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4784)
  B :MSTORE(SP + 4760)
  $ => E :MLOAD(SP + 4760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4768)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4760)
  $ => E :SUB
  $ => A :MLOAD(SP + 4784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4768)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4776)
  $ => A :XOR
  A :MSTORE(SP + 4760)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4784)
  B :MSTORE(SP + 4744)
  $ => E :MLOAD(SP + 4744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4752)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4744)
  $ => E :SUB
  $ => A :MLOAD(SP + 4784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4752)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4760)
  $ => A :XOR
  $ => B :MLOAD(SP + 5088)
  A => E
  $ => A :MLOAD(SP + 4936)
  $ => C :XOR
  $ => A :MLOAD(SP + 4784)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4936)
  B => D
  $ => B :MLOAD(SP + 5088)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4744)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6976)
  B :MSTORE(SP + 4728)
  $ => E :MLOAD(SP + 4728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4728)
  $ => E :SUB
  $ => A :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4736)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6976)
  B :MSTORE(SP + 4720)
  $ => E :MLOAD(SP + 4720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4728)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4720)
  $ => E :SUB
  $ => A :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4728)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4736)
  $ => A :XOR
  A :MSTORE(SP + 4720)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6976)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4720)
  $ => A :XOR
  $ => B :MLOAD(SP + 7128)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5760)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4720)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5000)
  B :MSTORE(SP + 4704)
  $ => E :MLOAD(SP + 4704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4712)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4704)
  $ => E :SUB
  $ => A :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4712)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4712)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5000)
  B :MSTORE(SP + 4696)
  $ => E :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4704)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4696)
  $ => E :SUB
  $ => A :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4704)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4712)
  $ => A :XOR
  A :MSTORE(SP + 4696)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4696)
  $ => B :XOR
  $ => A :MLOAD(SP + 4720)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5144)
  A :MSTORE(SP + 4696)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5392)
  A => D
  $ => A :MLOAD(SP + 4792)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4688)
  $ => B :MLOAD(SP + 4992)
  $ => A :MLOAD(SP + 4840)
  $ => C :XOR
  $ => A :MLOAD(SP + 4688)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4992)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4680)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4688)
  B :MSTORE(SP + 4664)
  $ => E :MLOAD(SP + 4664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4672)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4664)
  $ => E :SUB
  $ => A :MLOAD(SP + 4688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4672)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4672)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4688)
  B :MSTORE(SP + 4656)
  $ => E :MLOAD(SP + 4656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4656)
  $ => E :SUB
  $ => A :MLOAD(SP + 4688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4672)
  $ => A :XOR
  A :MSTORE(SP + 4656)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4688)
  B :MSTORE(SP + 4640)
  $ => E :MLOAD(SP + 4640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4640)
  $ => E :SUB
  $ => A :MLOAD(SP + 4688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4656)
  $ => B :XOR
  $ => A :MLOAD(SP + 4680)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  773529912n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4744)
  $ => A :ADD
  B :MSTORE(SP + 4640)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4632)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4632)
  B :MSTORE(SP + 4616)
  $ => E :MLOAD(SP + 4616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4624)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4616)
  $ => E :SUB
  $ => A :MLOAD(SP + 4632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4624)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4624)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4632)
  B :MSTORE(SP + 4608)
  $ => E :MLOAD(SP + 4608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4616)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4608)
  $ => E :SUB
  $ => A :MLOAD(SP + 4632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4616)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4624)
  $ => A :XOR
  A :MSTORE(SP + 4608)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4632)
  B :MSTORE(SP + 4592)
  $ => E :MLOAD(SP + 4592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4600)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4592)
  $ => E :SUB
  $ => A :MLOAD(SP + 4632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4600)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4608)
  $ => A :XOR
  $ => B :MLOAD(SP + 4936)
  A => D
  $ => A :MLOAD(SP + 4784)
  $ => C :XOR
  $ => A :MLOAD(SP + 4632)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4784)
  B => E
  $ => B :MLOAD(SP + 4936)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4592)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6824)
  B :MSTORE(SP + 4576)
  $ => E :MLOAD(SP + 4576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4584)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4576)
  $ => E :SUB
  $ => A :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4584)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4584)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6824)
  B :MSTORE(SP + 4568)
  $ => E :MLOAD(SP + 4568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4576)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4568)
  $ => E :SUB
  $ => A :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4576)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4584)
  $ => A :XOR
  A :MSTORE(SP + 4568)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6824)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4568)
  $ => A :XOR
  $ => B :MLOAD(SP + 6976)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5608)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4568)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4848)
  B :MSTORE(SP + 4552)
  $ => E :MLOAD(SP + 4552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4552)
  $ => E :SUB
  $ => A :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4560)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4848)
  B :MSTORE(SP + 4544)
  $ => E :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4552)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4544)
  $ => E :SUB
  $ => A :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4552)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4560)
  $ => A :XOR
  A :MSTORE(SP + 4544)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4544)
  $ => B :XOR
  $ => A :MLOAD(SP + 4568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4992)
  A :MSTORE(SP + 4544)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5240)
  A => D
  $ => A :MLOAD(SP + 4640)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4536)
  $ => B :MLOAD(SP + 4840)
  $ => A :MLOAD(SP + 4688)
  $ => C :XOR
  $ => A :MLOAD(SP + 4536)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4840)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4528)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4536)
  B :MSTORE(SP + 4512)
  $ => E :MLOAD(SP + 4512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4520)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4512)
  $ => E :SUB
  $ => A :MLOAD(SP + 4536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4520)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4520)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4536)
  B :MSTORE(SP + 4504)
  $ => E :MLOAD(SP + 4504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4504)
  $ => E :SUB
  $ => A :MLOAD(SP + 4536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4520)
  $ => A :XOR
  A :MSTORE(SP + 4504)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4536)
  B :MSTORE(SP + 4488)
  $ => E :MLOAD(SP + 4488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4488)
  $ => E :SUB
  $ => A :MLOAD(SP + 4536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4504)
  $ => B :XOR
  $ => A :MLOAD(SP + 4528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1294757372n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4592)
  $ => A :ADD
  B :MSTORE(SP + 4488)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4480)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4480)
  B :MSTORE(SP + 4464)
  $ => E :MLOAD(SP + 4464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4472)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4464)
  $ => E :SUB
  $ => A :MLOAD(SP + 4480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4472)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4472)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4480)
  B :MSTORE(SP + 4456)
  $ => E :MLOAD(SP + 4456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4464)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4456)
  $ => E :SUB
  $ => A :MLOAD(SP + 4480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4464)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4472)
  $ => A :XOR
  A :MSTORE(SP + 4456)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4480)
  B :MSTORE(SP + 4440)
  $ => E :MLOAD(SP + 4440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4448)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4440)
  $ => E :SUB
  $ => A :MLOAD(SP + 4480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4448)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4456)
  $ => A :XOR
  $ => B :MLOAD(SP + 4784)
  A => D
  $ => A :MLOAD(SP + 4632)
  $ => C :XOR
  $ => A :MLOAD(SP + 4480)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4632)
  B => E
  $ => B :MLOAD(SP + 4784)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4440)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6672)
  B :MSTORE(SP + 4424)
  $ => E :MLOAD(SP + 4424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4424)
  $ => E :SUB
  $ => A :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4432)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6672)
  B :MSTORE(SP + 4416)
  $ => E :MLOAD(SP + 4416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4424)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4416)
  $ => E :SUB
  $ => A :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4424)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4432)
  $ => A :XOR
  A :MSTORE(SP + 4416)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6672)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4416)
  $ => A :XOR
  $ => B :MLOAD(SP + 6824)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5456)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4416)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4696)
  B :MSTORE(SP + 4400)
  $ => E :MLOAD(SP + 4400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4400)
  $ => E :SUB
  $ => A :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4408)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4696)
  B :MSTORE(SP + 4392)
  $ => E :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4400)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4392)
  $ => E :SUB
  $ => A :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4400)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4408)
  $ => A :XOR
  A :MSTORE(SP + 4392)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4392)
  $ => B :XOR
  $ => A :MLOAD(SP + 4416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4840)
  A :MSTORE(SP + 4392)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5088)
  A => E
  $ => A :MLOAD(SP + 4488)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4384)
  $ => B :MLOAD(SP + 4688)
  $ => A :MLOAD(SP + 4536)
  $ => C :XOR
  $ => A :MLOAD(SP + 4384)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4688)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4376)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4384)
  B :MSTORE(SP + 4360)
  $ => E :MLOAD(SP + 4360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4368)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4360)
  $ => E :SUB
  $ => A :MLOAD(SP + 4384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4368)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4368)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4384)
  B :MSTORE(SP + 4352)
  $ => E :MLOAD(SP + 4352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4352)
  $ => E :SUB
  $ => A :MLOAD(SP + 4384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4368)
  $ => A :XOR
  A :MSTORE(SP + 4352)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4384)
  B :MSTORE(SP + 4336)
  $ => E :MLOAD(SP + 4336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4336)
  $ => E :SUB
  $ => A :MLOAD(SP + 4384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4352)
  $ => B :XOR
  $ => A :MLOAD(SP + 4376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1396182291n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4440)
  $ => A :ADD
  B :MSTORE(SP + 4336)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4328)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4328)
  B :MSTORE(SP + 4312)
  $ => E :MLOAD(SP + 4312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4312)
  $ => E :SUB
  $ => A :MLOAD(SP + 4328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4320)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4328)
  B :MSTORE(SP + 4304)
  $ => E :MLOAD(SP + 4304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4312)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4304)
  $ => E :SUB
  $ => A :MLOAD(SP + 4328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4312)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4320)
  $ => A :XOR
  A :MSTORE(SP + 4304)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4328)
  B :MSTORE(SP + 4288)
  $ => E :MLOAD(SP + 4288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4288)
  $ => E :SUB
  $ => A :MLOAD(SP + 4328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4304)
  $ => A :XOR
  $ => B :MLOAD(SP + 4632)
  A => D
  $ => A :MLOAD(SP + 4480)
  $ => C :XOR
  $ => A :MLOAD(SP + 4328)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4480)
  B => E
  $ => B :MLOAD(SP + 4632)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4288)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6520)
  B :MSTORE(SP + 4272)
  $ => E :MLOAD(SP + 4272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4272)
  $ => E :SUB
  $ => A :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4280)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6520)
  B :MSTORE(SP + 4264)
  $ => E :MLOAD(SP + 4264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4264)
  $ => E :SUB
  $ => A :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4280)
  $ => A :XOR
  A :MSTORE(SP + 4264)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6520)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4264)
  $ => A :XOR
  $ => B :MLOAD(SP + 6672)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5304)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4264)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4544)
  B :MSTORE(SP + 4248)
  $ => E :MLOAD(SP + 4248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4248)
  $ => E :SUB
  $ => A :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4256)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4544)
  B :MSTORE(SP + 4240)
  $ => E :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4248)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4240)
  $ => E :SUB
  $ => A :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4248)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4256)
  $ => A :XOR
  A :MSTORE(SP + 4240)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4240)
  $ => B :XOR
  $ => A :MLOAD(SP + 4264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4688)
  A :MSTORE(SP + 4240)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4936)
  A => D
  $ => A :MLOAD(SP + 4336)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4232)
  $ => B :MLOAD(SP + 4536)
  $ => A :MLOAD(SP + 4384)
  $ => C :XOR
  $ => A :MLOAD(SP + 4232)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4536)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4224)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4232)
  B :MSTORE(SP + 4208)
  $ => E :MLOAD(SP + 4208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4216)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4208)
  $ => E :SUB
  $ => A :MLOAD(SP + 4232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4216)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4216)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4232)
  B :MSTORE(SP + 4200)
  $ => E :MLOAD(SP + 4200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4208)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4200)
  $ => E :SUB
  $ => A :MLOAD(SP + 4232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4208)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4216)
  $ => A :XOR
  A :MSTORE(SP + 4200)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4232)
  B :MSTORE(SP + 4184)
  $ => E :MLOAD(SP + 4184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4184)
  $ => E :SUB
  $ => A :MLOAD(SP + 4232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4200)
  $ => B :XOR
  $ => A :MLOAD(SP + 4224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1695183700n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4288)
  $ => A :ADD
  B :MSTORE(SP + 4184)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4176)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4176)
  B :MSTORE(SP + 4160)
  $ => E :MLOAD(SP + 4160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4160)
  $ => E :SUB
  $ => A :MLOAD(SP + 4176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4168)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4176)
  B :MSTORE(SP + 4152)
  $ => E :MLOAD(SP + 4152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4160)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4152)
  $ => E :SUB
  $ => A :MLOAD(SP + 4176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4160)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4168)
  $ => A :XOR
  A :MSTORE(SP + 4152)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4176)
  B :MSTORE(SP + 4136)
  $ => E :MLOAD(SP + 4136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4136)
  $ => E :SUB
  $ => A :MLOAD(SP + 4176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4152)
  $ => A :XOR
  $ => B :MLOAD(SP + 4480)
  A => D
  $ => A :MLOAD(SP + 4328)
  $ => C :XOR
  $ => A :MLOAD(SP + 4176)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4328)
  B => E
  $ => B :MLOAD(SP + 4480)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4136)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6368)
  B :MSTORE(SP + 4120)
  $ => E :MLOAD(SP + 4120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4120)
  $ => E :SUB
  $ => A :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4128)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6368)
  B :MSTORE(SP + 4112)
  $ => E :MLOAD(SP + 4112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4120)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4112)
  $ => E :SUB
  $ => A :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4120)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4128)
  $ => A :XOR
  A :MSTORE(SP + 4112)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6368)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4112)
  $ => A :XOR
  $ => B :MLOAD(SP + 6520)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4112)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4392)
  B :MSTORE(SP + 4096)
  $ => E :MLOAD(SP + 4096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4096)
  $ => E :SUB
  $ => A :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4104)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4392)
  B :MSTORE(SP + 4088)
  $ => E :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4096)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4088)
  $ => E :SUB
  $ => A :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4096)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4104)
  $ => A :XOR
  A :MSTORE(SP + 4088)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4088)
  $ => B :XOR
  $ => A :MLOAD(SP + 4112)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4536)
  A :MSTORE(SP + 4088)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4784)
  A => D
  $ => A :MLOAD(SP + 4184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4080)
  $ => B :MLOAD(SP + 4384)
  $ => A :MLOAD(SP + 4232)
  $ => C :XOR
  $ => A :MLOAD(SP + 4080)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4384)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4072)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4080)
  B :MSTORE(SP + 4056)
  $ => E :MLOAD(SP + 4056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4064)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4056)
  $ => E :SUB
  $ => A :MLOAD(SP + 4080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4064)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4064)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4080)
  B :MSTORE(SP + 4048)
  $ => E :MLOAD(SP + 4048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4056)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4048)
  $ => E :SUB
  $ => A :MLOAD(SP + 4080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4056)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4064)
  $ => A :XOR
  A :MSTORE(SP + 4048)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4080)
  B :MSTORE(SP + 4032)
  $ => E :MLOAD(SP + 4032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4040)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4032)
  $ => E :SUB
  $ => A :MLOAD(SP + 4080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4040)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4048)
  $ => B :XOR
  $ => A :MLOAD(SP + 4072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1986661051n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4136)
  $ => A :ADD
  B :MSTORE(SP + 4032)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4024)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4024)
  B :MSTORE(SP + 4008)
  $ => E :MLOAD(SP + 4008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4008)
  $ => E :SUB
  $ => A :MLOAD(SP + 4024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 4016)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4024)
  B :MSTORE(SP + 4000)
  $ => E :MLOAD(SP + 4000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 4008)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 4000)
  $ => E :SUB
  $ => A :MLOAD(SP + 4024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 4008)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4016)
  $ => A :XOR
  A :MSTORE(SP + 4000)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4024)
  B :MSTORE(SP + 3984)
  $ => E :MLOAD(SP + 3984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3992)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3984)
  $ => E :SUB
  $ => A :MLOAD(SP + 4024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3992)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4000)
  $ => A :XOR
  $ => B :MLOAD(SP + 4328)
  A => E
  $ => A :MLOAD(SP + 4176)
  $ => C :XOR
  $ => A :MLOAD(SP + 4024)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4176)
  B => D
  $ => B :MLOAD(SP + 4328)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3984)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6216)
  B :MSTORE(SP + 3968)
  $ => E :MLOAD(SP + 3968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3976)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3968)
  $ => E :SUB
  $ => A :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3976)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3976)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6216)
  B :MSTORE(SP + 3960)
  $ => E :MLOAD(SP + 3960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3968)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3960)
  $ => E :SUB
  $ => A :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3968)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3976)
  $ => A :XOR
  A :MSTORE(SP + 3960)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6216)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3960)
  $ => A :XOR
  $ => B :MLOAD(SP + 6368)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 5000)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3960)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4240)
  B :MSTORE(SP + 3944)
  $ => E :MLOAD(SP + 3944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3944)
  $ => E :SUB
  $ => A :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3952)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4240)
  B :MSTORE(SP + 3936)
  $ => E :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3944)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3936)
  $ => E :SUB
  $ => A :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3944)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3952)
  $ => A :XOR
  A :MSTORE(SP + 3936)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3936)
  $ => B :XOR
  $ => A :MLOAD(SP + 3960)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4384)
  A :MSTORE(SP + 3936)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4632)
  A => D
  $ => A :MLOAD(SP + 4032)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3928)
  $ => B :MLOAD(SP + 4232)
  $ => A :MLOAD(SP + 4080)
  $ => C :XOR
  $ => A :MLOAD(SP + 3928)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4232)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3920)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3928)
  B :MSTORE(SP + 3904)
  $ => E :MLOAD(SP + 3904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3912)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3904)
  $ => E :SUB
  $ => A :MLOAD(SP + 3928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3912)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3912)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3928)
  B :MSTORE(SP + 3896)
  $ => E :MLOAD(SP + 3896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3904)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3896)
  $ => E :SUB
  $ => A :MLOAD(SP + 3928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3904)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3912)
  $ => A :XOR
  A :MSTORE(SP + 3896)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3928)
  B :MSTORE(SP + 3880)
  $ => E :MLOAD(SP + 3880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3880)
  $ => E :SUB
  $ => A :MLOAD(SP + 3928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3896)
  $ => B :XOR
  $ => A :MLOAD(SP + 3920)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2177026350n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3984)
  $ => A :ADD
  B :MSTORE(SP + 3880)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3872)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3872)
  B :MSTORE(SP + 3856)
  $ => E :MLOAD(SP + 3856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3856)
  $ => E :SUB
  $ => A :MLOAD(SP + 3872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3864)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3872)
  B :MSTORE(SP + 3848)
  $ => E :MLOAD(SP + 3848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3856)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3848)
  $ => E :SUB
  $ => A :MLOAD(SP + 3872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3856)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3864)
  $ => A :XOR
  A :MSTORE(SP + 3848)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3872)
  B :MSTORE(SP + 3832)
  $ => E :MLOAD(SP + 3832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3840)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3832)
  $ => E :SUB
  $ => A :MLOAD(SP + 3872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3840)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3848)
  $ => A :XOR
  $ => B :MLOAD(SP + 4176)
  A => D
  $ => A :MLOAD(SP + 4024)
  $ => C :XOR
  $ => A :MLOAD(SP + 3872)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 4024)
  B => E
  $ => B :MLOAD(SP + 4176)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3832)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6064)
  B :MSTORE(SP + 3816)
  $ => E :MLOAD(SP + 3816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3824)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3816)
  $ => E :SUB
  $ => A :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3824)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3824)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 6064)
  B :MSTORE(SP + 3808)
  $ => E :MLOAD(SP + 3808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3808)
  $ => E :SUB
  $ => A :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3824)
  $ => A :XOR
  A :MSTORE(SP + 3808)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 6064)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3808)
  $ => A :XOR
  $ => B :MLOAD(SP + 6216)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4848)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3808)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4088)
  B :MSTORE(SP + 3792)
  $ => E :MLOAD(SP + 3792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3792)
  $ => E :SUB
  $ => A :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3800)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4088)
  B :MSTORE(SP + 3784)
  $ => E :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3784)
  $ => E :SUB
  $ => A :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3800)
  $ => A :XOR
  A :MSTORE(SP + 3784)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3784)
  $ => B :XOR
  $ => A :MLOAD(SP + 3808)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4232)
  A :MSTORE(SP + 3784)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4480)
  A => D
  $ => A :MLOAD(SP + 3880)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3776)
  $ => B :MLOAD(SP + 4080)
  $ => A :MLOAD(SP + 3928)
  $ => C :XOR
  $ => A :MLOAD(SP + 3776)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 4080)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3768)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3776)
  B :MSTORE(SP + 3752)
  $ => E :MLOAD(SP + 3752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3760)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3752)
  $ => E :SUB
  $ => A :MLOAD(SP + 3776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3760)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3760)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3776)
  B :MSTORE(SP + 3744)
  $ => E :MLOAD(SP + 3744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3752)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3744)
  $ => E :SUB
  $ => A :MLOAD(SP + 3776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3752)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3760)
  $ => A :XOR
  A :MSTORE(SP + 3744)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3776)
  B :MSTORE(SP + 3728)
  $ => E :MLOAD(SP + 3728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3728)
  $ => E :SUB
  $ => A :MLOAD(SP + 3776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3744)
  $ => B :XOR
  $ => A :MLOAD(SP + 3768)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2456956037n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3832)
  $ => A :ADD
  B :MSTORE(SP + 3728)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3720)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3720)
  B :MSTORE(SP + 3704)
  $ => E :MLOAD(SP + 3704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3712)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3704)
  $ => E :SUB
  $ => A :MLOAD(SP + 3720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3712)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3712)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3720)
  B :MSTORE(SP + 3696)
  $ => E :MLOAD(SP + 3696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3704)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3696)
  $ => E :SUB
  $ => A :MLOAD(SP + 3720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3704)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3712)
  $ => A :XOR
  A :MSTORE(SP + 3696)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3720)
  B :MSTORE(SP + 3680)
  $ => E :MLOAD(SP + 3680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3688)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3680)
  $ => E :SUB
  $ => A :MLOAD(SP + 3720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3688)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3696)
  $ => A :XOR
  $ => B :MLOAD(SP + 4024)
  A => D
  $ => A :MLOAD(SP + 3872)
  $ => C :XOR
  $ => A :MLOAD(SP + 3720)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3872)
  B => E
  $ => B :MLOAD(SP + 4024)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3680)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5912)
  B :MSTORE(SP + 3664)
  $ => E :MLOAD(SP + 3664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3672)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3664)
  $ => E :SUB
  $ => A :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3672)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3672)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5912)
  B :MSTORE(SP + 3656)
  $ => E :MLOAD(SP + 3656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3656)
  $ => E :SUB
  $ => A :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3672)
  $ => A :XOR
  A :MSTORE(SP + 3656)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5912)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3656)
  $ => A :XOR
  $ => B :MLOAD(SP + 6064)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4696)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3656)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3936)
  B :MSTORE(SP + 3640)
  $ => E :MLOAD(SP + 3640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3640)
  $ => E :SUB
  $ => A :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3648)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3936)
  B :MSTORE(SP + 3632)
  $ => E :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3632)
  $ => E :SUB
  $ => A :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3648)
  $ => A :XOR
  A :MSTORE(SP + 3632)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3632)
  $ => B :XOR
  $ => A :MLOAD(SP + 3656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4080)
  A :MSTORE(SP + 3632)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4328)
  A => E
  $ => A :MLOAD(SP + 3728)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3624)
  $ => B :MLOAD(SP + 3928)
  $ => A :MLOAD(SP + 3776)
  $ => C :XOR
  $ => A :MLOAD(SP + 3624)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3928)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3616)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3624)
  B :MSTORE(SP + 3600)
  $ => E :MLOAD(SP + 3600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3608)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3600)
  $ => E :SUB
  $ => A :MLOAD(SP + 3624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3608)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3608)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3624)
  B :MSTORE(SP + 3592)
  $ => E :MLOAD(SP + 3592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3600)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3592)
  $ => E :SUB
  $ => A :MLOAD(SP + 3624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3600)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3608)
  $ => A :XOR
  A :MSTORE(SP + 3592)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3624)
  B :MSTORE(SP + 3576)
  $ => E :MLOAD(SP + 3576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3584)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3576)
  $ => E :SUB
  $ => A :MLOAD(SP + 3624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3584)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3592)
  $ => B :XOR
  $ => A :MLOAD(SP + 3616)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2730485921n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3680)
  $ => A :ADD
  B :MSTORE(SP + 3576)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3568)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3568)
  B :MSTORE(SP + 3552)
  $ => E :MLOAD(SP + 3552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3552)
  $ => E :SUB
  $ => A :MLOAD(SP + 3568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3560)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3568)
  B :MSTORE(SP + 3544)
  $ => E :MLOAD(SP + 3544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3552)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3544)
  $ => E :SUB
  $ => A :MLOAD(SP + 3568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3552)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3560)
  $ => A :XOR
  A :MSTORE(SP + 3544)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3568)
  B :MSTORE(SP + 3528)
  $ => E :MLOAD(SP + 3528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3528)
  $ => E :SUB
  $ => A :MLOAD(SP + 3568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3544)
  $ => A :XOR
  $ => B :MLOAD(SP + 3872)
  A => D
  $ => A :MLOAD(SP + 3720)
  $ => C :XOR
  $ => A :MLOAD(SP + 3568)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3720)
  B => E
  $ => B :MLOAD(SP + 3872)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3528)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5760)
  B :MSTORE(SP + 3512)
  $ => E :MLOAD(SP + 3512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3520)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3512)
  $ => E :SUB
  $ => A :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3520)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3520)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5760)
  B :MSTORE(SP + 3504)
  $ => E :MLOAD(SP + 3504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3504)
  $ => E :SUB
  $ => A :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3520)
  $ => A :XOR
  A :MSTORE(SP + 3504)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5760)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3504)
  $ => A :XOR
  $ => B :MLOAD(SP + 5912)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3504)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3784)
  B :MSTORE(SP + 3488)
  $ => E :MLOAD(SP + 3488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3488)
  $ => E :SUB
  $ => A :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3496)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3784)
  B :MSTORE(SP + 3480)
  $ => E :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3480)
  $ => E :SUB
  $ => A :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3496)
  $ => A :XOR
  A :MSTORE(SP + 3480)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3480)
  $ => B :XOR
  $ => A :MLOAD(SP + 3504)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3928)
  A :MSTORE(SP + 3480)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4176)
  A => D
  $ => A :MLOAD(SP + 3576)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3472)
  $ => B :MLOAD(SP + 3776)
  $ => A :MLOAD(SP + 3624)
  $ => C :XOR
  $ => A :MLOAD(SP + 3472)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3776)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3464)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3472)
  B :MSTORE(SP + 3448)
  $ => E :MLOAD(SP + 3448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3456)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3448)
  $ => E :SUB
  $ => A :MLOAD(SP + 3472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3456)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3456)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3472)
  B :MSTORE(SP + 3440)
  $ => E :MLOAD(SP + 3440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3448)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3440)
  $ => E :SUB
  $ => A :MLOAD(SP + 3472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3448)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3456)
  $ => A :XOR
  A :MSTORE(SP + 3440)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3472)
  B :MSTORE(SP + 3424)
  $ => E :MLOAD(SP + 3424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3424)
  $ => E :SUB
  $ => A :MLOAD(SP + 3472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3440)
  $ => B :XOR
  $ => A :MLOAD(SP + 3464)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2820302411n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3528)
  $ => A :ADD
  B :MSTORE(SP + 3424)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3416)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3416)
  B :MSTORE(SP + 3400)
  $ => E :MLOAD(SP + 3400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3400)
  $ => E :SUB
  $ => A :MLOAD(SP + 3416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3408)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3416)
  B :MSTORE(SP + 3392)
  $ => E :MLOAD(SP + 3392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3400)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3392)
  $ => E :SUB
  $ => A :MLOAD(SP + 3416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3400)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3408)
  $ => A :XOR
  A :MSTORE(SP + 3392)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3416)
  B :MSTORE(SP + 3376)
  $ => E :MLOAD(SP + 3376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3376)
  $ => E :SUB
  $ => A :MLOAD(SP + 3416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3392)
  $ => A :XOR
  $ => B :MLOAD(SP + 3720)
  A => D
  $ => A :MLOAD(SP + 3568)
  $ => C :XOR
  $ => A :MLOAD(SP + 3416)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3568)
  B => E
  $ => B :MLOAD(SP + 3720)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3376)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5608)
  B :MSTORE(SP + 3360)
  $ => E :MLOAD(SP + 3360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3368)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3360)
  $ => E :SUB
  $ => A :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3368)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3368)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5608)
  B :MSTORE(SP + 3352)
  $ => E :MLOAD(SP + 3352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3352)
  $ => E :SUB
  $ => A :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3368)
  $ => A :XOR
  A :MSTORE(SP + 3352)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5608)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3352)
  $ => A :XOR
  $ => B :MLOAD(SP + 5760)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4392)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3352)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3632)
  B :MSTORE(SP + 3336)
  $ => E :MLOAD(SP + 3336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3336)
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3344)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3632)
  B :MSTORE(SP + 3328)
  $ => E :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3328)
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3344)
  $ => A :XOR
  A :MSTORE(SP + 3328)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3328)
  $ => B :XOR
  $ => A :MLOAD(SP + 3352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3776)
  A :MSTORE(SP + 3328)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4024)
  A => D
  $ => A :MLOAD(SP + 3424)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3320)
  $ => B :MLOAD(SP + 3624)
  $ => A :MLOAD(SP + 3472)
  $ => C :XOR
  $ => A :MLOAD(SP + 3320)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3624)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3312)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3320)
  B :MSTORE(SP + 3296)
  $ => E :MLOAD(SP + 3296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3304)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3296)
  $ => E :SUB
  $ => A :MLOAD(SP + 3320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3304)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3304)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3320)
  B :MSTORE(SP + 3288)
  $ => E :MLOAD(SP + 3288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3288)
  $ => E :SUB
  $ => A :MLOAD(SP + 3320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3304)
  $ => A :XOR
  A :MSTORE(SP + 3288)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3320)
  B :MSTORE(SP + 3272)
  $ => E :MLOAD(SP + 3272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3272)
  $ => E :SUB
  $ => A :MLOAD(SP + 3320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3288)
  $ => B :XOR
  $ => A :MLOAD(SP + 3312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3259730800n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3376)
  $ => A :ADD
  B :MSTORE(SP + 3272)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3264)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3264)
  B :MSTORE(SP + 3248)
  $ => E :MLOAD(SP + 3248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3248)
  $ => E :SUB
  $ => A :MLOAD(SP + 3264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3256)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3264)
  B :MSTORE(SP + 3240)
  $ => E :MLOAD(SP + 3240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3248)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3240)
  $ => E :SUB
  $ => A :MLOAD(SP + 3264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3248)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3256)
  $ => A :XOR
  A :MSTORE(SP + 3240)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3264)
  B :MSTORE(SP + 3224)
  $ => E :MLOAD(SP + 3224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3224)
  $ => E :SUB
  $ => A :MLOAD(SP + 3264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3240)
  $ => A :XOR
  $ => B :MLOAD(SP + 3568)
  A => E
  $ => A :MLOAD(SP + 3416)
  $ => C :XOR
  $ => A :MLOAD(SP + 3264)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3416)
  B => D
  $ => B :MLOAD(SP + 3568)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3224)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5456)
  B :MSTORE(SP + 3208)
  $ => E :MLOAD(SP + 3208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3216)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3208)
  $ => E :SUB
  $ => A :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3216)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3216)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5456)
  B :MSTORE(SP + 3200)
  $ => E :MLOAD(SP + 3200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3208)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3200)
  $ => E :SUB
  $ => A :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3208)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3216)
  $ => A :XOR
  A :MSTORE(SP + 3200)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5456)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3200)
  $ => A :XOR
  $ => B :MLOAD(SP + 5608)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4240)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3200)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3480)
  B :MSTORE(SP + 3184)
  $ => E :MLOAD(SP + 3184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3184)
  $ => E :SUB
  $ => A :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3192)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3480)
  B :MSTORE(SP + 3176)
  $ => E :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3184)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3176)
  $ => E :SUB
  $ => A :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3184)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3192)
  $ => A :XOR
  A :MSTORE(SP + 3176)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3176)
  $ => B :XOR
  $ => A :MLOAD(SP + 3200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3624)
  A :MSTORE(SP + 3176)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3872)
  A => D
  $ => A :MLOAD(SP + 3272)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3168)
  $ => B :MLOAD(SP + 3472)
  $ => A :MLOAD(SP + 3320)
  $ => C :XOR
  $ => A :MLOAD(SP + 3168)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3472)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3160)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3168)
  B :MSTORE(SP + 3144)
  $ => E :MLOAD(SP + 3144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3144)
  $ => E :SUB
  $ => A :MLOAD(SP + 3168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3152)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3168)
  B :MSTORE(SP + 3136)
  $ => E :MLOAD(SP + 3136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3136)
  $ => E :SUB
  $ => A :MLOAD(SP + 3168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3152)
  $ => A :XOR
  A :MSTORE(SP + 3136)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3168)
  B :MSTORE(SP + 3120)
  $ => E :MLOAD(SP + 3120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3120)
  $ => E :SUB
  $ => A :MLOAD(SP + 3168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3136)
  $ => B :XOR
  $ => A :MLOAD(SP + 3160)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3345764771n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3224)
  $ => A :ADD
  B :MSTORE(SP + 3120)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3112)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3112)
  B :MSTORE(SP + 3096)
  $ => E :MLOAD(SP + 3096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3096)
  $ => E :SUB
  $ => A :MLOAD(SP + 3112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3104)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3112)
  B :MSTORE(SP + 3088)
  $ => E :MLOAD(SP + 3088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3096)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3088)
  $ => E :SUB
  $ => A :MLOAD(SP + 3112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3096)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3104)
  $ => A :XOR
  A :MSTORE(SP + 3088)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3112)
  B :MSTORE(SP + 3072)
  $ => E :MLOAD(SP + 3072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3072)
  $ => E :SUB
  $ => A :MLOAD(SP + 3112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3088)
  $ => A :XOR
  $ => B :MLOAD(SP + 3416)
  A => D
  $ => A :MLOAD(SP + 3264)
  $ => C :XOR
  $ => A :MLOAD(SP + 3112)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3264)
  B => E
  $ => B :MLOAD(SP + 3416)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3072)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5304)
  B :MSTORE(SP + 3056)
  $ => E :MLOAD(SP + 3056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3064)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3056)
  $ => E :SUB
  $ => A :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3064)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3064)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5304)
  B :MSTORE(SP + 3048)
  $ => E :MLOAD(SP + 3048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3056)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3048)
  $ => E :SUB
  $ => A :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3056)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3064)
  $ => A :XOR
  A :MSTORE(SP + 3048)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5304)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3048)
  $ => A :XOR
  $ => B :MLOAD(SP + 5456)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 4088)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3048)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3328)
  B :MSTORE(SP + 3032)
  $ => E :MLOAD(SP + 3032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3040)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3032)
  $ => E :SUB
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3040)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3040)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3328)
  B :MSTORE(SP + 3024)
  $ => E :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3032)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 3024)
  $ => E :SUB
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3032)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3040)
  $ => A :XOR
  A :MSTORE(SP + 3024)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3024)
  $ => B :XOR
  $ => A :MLOAD(SP + 3048)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3472)
  A :MSTORE(SP + 3024)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3720)
  A => D
  $ => A :MLOAD(SP + 3120)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3016)
  $ => B :MLOAD(SP + 3320)
  $ => A :MLOAD(SP + 3168)
  $ => C :XOR
  $ => A :MLOAD(SP + 3016)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3320)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3008)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3016)
  B :MSTORE(SP + 2992)
  $ => E :MLOAD(SP + 2992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 3000)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2992)
  $ => E :SUB
  $ => A :MLOAD(SP + 3016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 3000)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 3000)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3016)
  B :MSTORE(SP + 2984)
  $ => E :MLOAD(SP + 2984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2992)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2984)
  $ => E :SUB
  $ => A :MLOAD(SP + 3016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2992)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3000)
  $ => A :XOR
  A :MSTORE(SP + 2984)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3016)
  B :MSTORE(SP + 2968)
  $ => E :MLOAD(SP + 2968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2976)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2968)
  $ => E :SUB
  $ => A :MLOAD(SP + 3016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2976)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2984)
  $ => B :XOR
  $ => A :MLOAD(SP + 3008)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3516065817n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3072)
  $ => A :ADD
  B :MSTORE(SP + 2968)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2960)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2960)
  B :MSTORE(SP + 2944)
  $ => E :MLOAD(SP + 2944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2944)
  $ => E :SUB
  $ => A :MLOAD(SP + 2960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2952)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2960)
  B :MSTORE(SP + 2936)
  $ => E :MLOAD(SP + 2936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2944)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2936)
  $ => E :SUB
  $ => A :MLOAD(SP + 2960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2944)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2952)
  $ => A :XOR
  A :MSTORE(SP + 2936)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2960)
  B :MSTORE(SP + 2920)
  $ => E :MLOAD(SP + 2920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2928)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2920)
  $ => E :SUB
  $ => A :MLOAD(SP + 2960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2928)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2936)
  $ => A :XOR
  $ => B :MLOAD(SP + 3264)
  A => D
  $ => A :MLOAD(SP + 3112)
  $ => C :XOR
  $ => A :MLOAD(SP + 2960)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 3112)
  B => E
  $ => B :MLOAD(SP + 3264)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2920)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5152)
  B :MSTORE(SP + 2904)
  $ => E :MLOAD(SP + 2904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2912)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2904)
  $ => E :SUB
  $ => A :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2912)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2912)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5152)
  B :MSTORE(SP + 2896)
  $ => E :MLOAD(SP + 2896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2904)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2896)
  $ => E :SUB
  $ => A :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2904)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2912)
  $ => A :XOR
  A :MSTORE(SP + 2896)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5152)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2896)
  $ => A :XOR
  $ => B :MLOAD(SP + 5304)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3936)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2896)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3176)
  B :MSTORE(SP + 2880)
  $ => E :MLOAD(SP + 2880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2880)
  $ => E :SUB
  $ => A :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2888)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3176)
  B :MSTORE(SP + 2872)
  $ => E :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2880)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2872)
  $ => E :SUB
  $ => A :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2880)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2888)
  $ => A :XOR
  A :MSTORE(SP + 2872)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2872)
  $ => B :XOR
  $ => A :MLOAD(SP + 2896)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3320)
  A :MSTORE(SP + 2872)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3568)
  A => E
  $ => A :MLOAD(SP + 2968)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2864)
  $ => B :MLOAD(SP + 3168)
  $ => A :MLOAD(SP + 3016)
  $ => C :XOR
  $ => A :MLOAD(SP + 2864)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3168)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2856)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2864)
  B :MSTORE(SP + 2840)
  $ => E :MLOAD(SP + 2840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2848)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2840)
  $ => E :SUB
  $ => A :MLOAD(SP + 2864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2848)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2848)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2864)
  B :MSTORE(SP + 2832)
  $ => E :MLOAD(SP + 2832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2840)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2832)
  $ => E :SUB
  $ => A :MLOAD(SP + 2864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2840)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2848)
  $ => A :XOR
  A :MSTORE(SP + 2832)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2864)
  B :MSTORE(SP + 2816)
  $ => E :MLOAD(SP + 2816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2824)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2816)
  $ => E :SUB
  $ => A :MLOAD(SP + 2864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2824)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2832)
  $ => B :XOR
  $ => A :MLOAD(SP + 2856)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3600352804n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2920)
  $ => A :ADD
  B :MSTORE(SP + 2816)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2808)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2808)
  B :MSTORE(SP + 2792)
  $ => E :MLOAD(SP + 2792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2792)
  $ => E :SUB
  $ => A :MLOAD(SP + 2808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2800)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2808)
  B :MSTORE(SP + 2784)
  $ => E :MLOAD(SP + 2784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2792)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2784)
  $ => E :SUB
  $ => A :MLOAD(SP + 2808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2792)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2800)
  $ => A :XOR
  A :MSTORE(SP + 2784)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2808)
  B :MSTORE(SP + 2768)
  $ => E :MLOAD(SP + 2768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2776)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2768)
  $ => E :SUB
  $ => A :MLOAD(SP + 2808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2776)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2784)
  $ => A :XOR
  $ => B :MLOAD(SP + 3112)
  A => D
  $ => A :MLOAD(SP + 2960)
  $ => C :XOR
  $ => A :MLOAD(SP + 2808)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2960)
  B => E
  $ => B :MLOAD(SP + 3112)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2768)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5000)
  B :MSTORE(SP + 2752)
  $ => E :MLOAD(SP + 2752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2760)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2752)
  $ => E :SUB
  $ => A :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2760)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2760)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 5000)
  B :MSTORE(SP + 2744)
  $ => E :MLOAD(SP + 2744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2752)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2744)
  $ => E :SUB
  $ => A :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2752)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2760)
  $ => A :XOR
  A :MSTORE(SP + 2744)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 5000)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2744)
  $ => A :XOR
  $ => B :MLOAD(SP + 5152)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3784)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2744)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3024)
  B :MSTORE(SP + 2728)
  $ => E :MLOAD(SP + 2728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2728)
  $ => E :SUB
  $ => A :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2736)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3024)
  B :MSTORE(SP + 2720)
  $ => E :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2728)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2720)
  $ => E :SUB
  $ => A :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2728)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2736)
  $ => A :XOR
  A :MSTORE(SP + 2720)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2720)
  $ => B :XOR
  $ => A :MLOAD(SP + 2744)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3168)
  A :MSTORE(SP + 2720)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3416)
  A => D
  $ => A :MLOAD(SP + 2816)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2712)
  $ => B :MLOAD(SP + 3016)
  $ => A :MLOAD(SP + 2864)
  $ => C :XOR
  $ => A :MLOAD(SP + 2712)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 3016)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2704)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2712)
  B :MSTORE(SP + 2688)
  $ => E :MLOAD(SP + 2688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2696)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2688)
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2696)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2696)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2712)
  B :MSTORE(SP + 2680)
  $ => E :MLOAD(SP + 2680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2688)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2680)
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2688)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2696)
  $ => A :XOR
  A :MSTORE(SP + 2680)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2712)
  B :MSTORE(SP + 2664)
  $ => E :MLOAD(SP + 2664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2672)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2664)
  $ => E :SUB
  $ => A :MLOAD(SP + 2712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2672)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2680)
  $ => B :XOR
  $ => A :MLOAD(SP + 2704)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4094571909n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2768)
  $ => A :ADD
  B :MSTORE(SP + 2664)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2656)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2656)
  B :MSTORE(SP + 2640)
  $ => E :MLOAD(SP + 2640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2640)
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2648)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2656)
  B :MSTORE(SP + 2632)
  $ => E :MLOAD(SP + 2632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2640)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2632)
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2640)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2648)
  $ => A :XOR
  A :MSTORE(SP + 2632)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2656)
  B :MSTORE(SP + 2616)
  $ => E :MLOAD(SP + 2616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2624)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2616)
  $ => E :SUB
  $ => A :MLOAD(SP + 2656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2624)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2632)
  $ => A :XOR
  $ => B :MLOAD(SP + 2960)
  A => D
  $ => A :MLOAD(SP + 2808)
  $ => C :XOR
  $ => A :MLOAD(SP + 2656)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2808)
  B => E
  $ => B :MLOAD(SP + 2960)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2616)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4848)
  B :MSTORE(SP + 2600)
  $ => E :MLOAD(SP + 2600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2608)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2600)
  $ => E :SUB
  $ => A :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2608)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2608)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4848)
  B :MSTORE(SP + 2592)
  $ => E :MLOAD(SP + 2592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2600)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2592)
  $ => E :SUB
  $ => A :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2600)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2608)
  $ => A :XOR
  A :MSTORE(SP + 2592)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4848)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2592)
  $ => A :XOR
  $ => B :MLOAD(SP + 5000)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3632)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2592)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2872)
  B :MSTORE(SP + 2576)
  $ => E :MLOAD(SP + 2576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2584)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2576)
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2584)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2584)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2872)
  B :MSTORE(SP + 2568)
  $ => E :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2576)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2568)
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2576)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2584)
  $ => A :XOR
  A :MSTORE(SP + 2568)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2568)
  $ => B :XOR
  $ => A :MLOAD(SP + 2592)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3016)
  A :MSTORE(SP + 2568)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3264)
  A => D
  $ => A :MLOAD(SP + 2664)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2560)
  $ => B :MLOAD(SP + 2864)
  $ => A :MLOAD(SP + 2712)
  $ => C :XOR
  $ => A :MLOAD(SP + 2560)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2864)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2552)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2560)
  B :MSTORE(SP + 2536)
  $ => E :MLOAD(SP + 2536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2544)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2536)
  $ => E :SUB
  $ => A :MLOAD(SP + 2560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2544)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2544)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2560)
  B :MSTORE(SP + 2528)
  $ => E :MLOAD(SP + 2528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2528)
  $ => E :SUB
  $ => A :MLOAD(SP + 2560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2544)
  $ => A :XOR
  A :MSTORE(SP + 2528)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2560)
  B :MSTORE(SP + 2512)
  $ => E :MLOAD(SP + 2512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2520)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2512)
  $ => E :SUB
  $ => A :MLOAD(SP + 2560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2520)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2528)
  $ => B :XOR
  $ => A :MLOAD(SP + 2552)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  275423344n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2616)
  $ => A :ADD
  B :MSTORE(SP + 2512)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2504)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2504)
  B :MSTORE(SP + 2488)
  $ => E :MLOAD(SP + 2488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2488)
  $ => E :SUB
  $ => A :MLOAD(SP + 2504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2496)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2504)
  B :MSTORE(SP + 2480)
  $ => E :MLOAD(SP + 2480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2488)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2480)
  $ => E :SUB
  $ => A :MLOAD(SP + 2504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2488)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2496)
  $ => A :XOR
  A :MSTORE(SP + 2480)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2504)
  B :MSTORE(SP + 2464)
  $ => E :MLOAD(SP + 2464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2472)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2464)
  $ => E :SUB
  $ => A :MLOAD(SP + 2504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2472)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2480)
  $ => A :XOR
  $ => B :MLOAD(SP + 2808)
  A => E
  $ => A :MLOAD(SP + 2656)
  $ => C :XOR
  $ => A :MLOAD(SP + 2504)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2656)
  B => D
  $ => B :MLOAD(SP + 2808)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2464)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4696)
  B :MSTORE(SP + 2448)
  $ => E :MLOAD(SP + 2448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2456)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2448)
  $ => E :SUB
  $ => A :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2456)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2456)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4696)
  B :MSTORE(SP + 2440)
  $ => E :MLOAD(SP + 2440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2448)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2440)
  $ => E :SUB
  $ => A :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2448)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2456)
  $ => A :XOR
  A :MSTORE(SP + 2440)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4696)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2440)
  $ => A :XOR
  $ => B :MLOAD(SP + 4848)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2440)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2720)
  B :MSTORE(SP + 2424)
  $ => E :MLOAD(SP + 2424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2424)
  $ => E :SUB
  $ => A :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2432)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2720)
  B :MSTORE(SP + 2416)
  $ => E :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2424)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2416)
  $ => E :SUB
  $ => A :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2424)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2432)
  $ => A :XOR
  A :MSTORE(SP + 2416)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2416)
  $ => B :XOR
  $ => A :MLOAD(SP + 2440)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2864)
  A :MSTORE(SP + 2416)
  $ => E :ADD
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3112)
  A => D
  $ => A :MLOAD(SP + 2512)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2408)
  $ => B :MLOAD(SP + 2712)
  $ => A :MLOAD(SP + 2560)
  $ => C :XOR
  $ => A :MLOAD(SP + 2408)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2712)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2400)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2408)
  B :MSTORE(SP + 2384)
  $ => E :MLOAD(SP + 2384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2392)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2384)
  $ => E :SUB
  $ => A :MLOAD(SP + 2408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2392)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2392)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2408)
  B :MSTORE(SP + 2376)
  $ => E :MLOAD(SP + 2376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2376)
  $ => E :SUB
  $ => A :MLOAD(SP + 2408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2392)
  $ => A :XOR
  A :MSTORE(SP + 2376)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2408)
  B :MSTORE(SP + 2360)
  $ => E :MLOAD(SP + 2360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2368)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2360)
  $ => E :SUB
  $ => A :MLOAD(SP + 2408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2368)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2376)
  $ => B :XOR
  $ => A :MLOAD(SP + 2400)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  430227734n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2464)
  $ => A :ADD
  B :MSTORE(SP + 2360)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2352)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2352)
  B :MSTORE(SP + 2336)
  $ => E :MLOAD(SP + 2336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2336)
  $ => E :SUB
  $ => A :MLOAD(SP + 2352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2344)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2352)
  B :MSTORE(SP + 2328)
  $ => E :MLOAD(SP + 2328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2336)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2328)
  $ => E :SUB
  $ => A :MLOAD(SP + 2352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2336)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2344)
  $ => A :XOR
  A :MSTORE(SP + 2328)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2352)
  B :MSTORE(SP + 2312)
  $ => E :MLOAD(SP + 2312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2312)
  $ => E :SUB
  $ => A :MLOAD(SP + 2352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2328)
  $ => A :XOR
  $ => B :MLOAD(SP + 2656)
  A => D
  $ => A :MLOAD(SP + 2504)
  $ => C :XOR
  $ => A :MLOAD(SP + 2352)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2504)
  B => E
  $ => B :MLOAD(SP + 2656)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2312)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4544)
  B :MSTORE(SP + 2296)
  $ => E :MLOAD(SP + 2296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2304)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2296)
  $ => E :SUB
  $ => A :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2304)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2304)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4544)
  B :MSTORE(SP + 2288)
  $ => E :MLOAD(SP + 2288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2288)
  $ => E :SUB
  $ => A :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2304)
  $ => A :XOR
  A :MSTORE(SP + 2288)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4544)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2288)
  $ => A :XOR
  $ => B :MLOAD(SP + 4696)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2288)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2568)
  B :MSTORE(SP + 2272)
  $ => E :MLOAD(SP + 2272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2272)
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2280)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2568)
  B :MSTORE(SP + 2264)
  $ => E :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2264)
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2280)
  $ => A :XOR
  A :MSTORE(SP + 2264)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2264)
  $ => B :XOR
  $ => A :MLOAD(SP + 2288)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2712)
  $ => E :ADD
  A :MSTORE(SP + 2264)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2960)
  A => D
  $ => A :MLOAD(SP + 2360)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2256)
  $ => B :MLOAD(SP + 2560)
  $ => A :MLOAD(SP + 2408)
  $ => C :XOR
  $ => A :MLOAD(SP + 2256)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2560)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2248)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2256)
  B :MSTORE(SP + 2232)
  $ => E :MLOAD(SP + 2232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2240)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2232)
  $ => E :SUB
  $ => A :MLOAD(SP + 2256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2240)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2240)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2256)
  B :MSTORE(SP + 2224)
  $ => E :MLOAD(SP + 2224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2224)
  $ => E :SUB
  $ => A :MLOAD(SP + 2256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2240)
  $ => A :XOR
  A :MSTORE(SP + 2224)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2256)
  B :MSTORE(SP + 2208)
  $ => E :MLOAD(SP + 2208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2216)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2208)
  $ => E :SUB
  $ => A :MLOAD(SP + 2256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2216)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2224)
  $ => B :XOR
  $ => A :MLOAD(SP + 2248)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  506948616n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2312)
  $ => A :ADD
  B :MSTORE(SP + 2208)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2200)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2200)
  B :MSTORE(SP + 2184)
  $ => E :MLOAD(SP + 2184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2184)
  $ => E :SUB
  $ => A :MLOAD(SP + 2200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2192)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2200)
  B :MSTORE(SP + 2176)
  $ => E :MLOAD(SP + 2176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2184)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2176)
  $ => E :SUB
  $ => A :MLOAD(SP + 2200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2184)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2192)
  $ => A :XOR
  A :MSTORE(SP + 2176)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2200)
  B :MSTORE(SP + 2160)
  $ => E :MLOAD(SP + 2160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2160)
  $ => E :SUB
  $ => A :MLOAD(SP + 2200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2176)
  $ => A :XOR
  $ => B :MLOAD(SP + 2504)
  A => E
  $ => A :MLOAD(SP + 2352)
  $ => C :XOR
  $ => A :MLOAD(SP + 2200)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2352)
  B => D
  $ => B :MLOAD(SP + 2504)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2160)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4392)
  B :MSTORE(SP + 2144)
  $ => E :MLOAD(SP + 2144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2144)
  $ => E :SUB
  $ => A :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2152)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4392)
  B :MSTORE(SP + 2136)
  $ => E :MLOAD(SP + 2136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2144)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2136)
  $ => E :SUB
  $ => A :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2144)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2152)
  $ => A :XOR
  A :MSTORE(SP + 2136)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4392)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2136)
  $ => A :XOR
  $ => B :MLOAD(SP + 4544)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3176)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2136)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2416)
  B :MSTORE(SP + 2120)
  $ => E :MLOAD(SP + 2120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2120)
  $ => E :SUB
  $ => A :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2128)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2416)
  B :MSTORE(SP + 2112)
  $ => E :MLOAD(SP + 2112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2120)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2112)
  $ => E :SUB
  $ => A :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2120)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2128)
  $ => A :XOR
  A :MSTORE(SP + 2112)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2112)
  $ => B :XOR
  $ => A :MLOAD(SP + 2136)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2560)
  $ => E :ADD
  A :MSTORE(SP + 2112)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2808)
  A => D
  $ => A :MLOAD(SP + 2208)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2104)
  $ => B :MLOAD(SP + 2408)
  $ => A :MLOAD(SP + 2256)
  $ => C :XOR
  $ => A :MLOAD(SP + 2104)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2408)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2096)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2104)
  B :MSTORE(SP + 2080)
  $ => E :MLOAD(SP + 2080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2088)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2080)
  $ => E :SUB
  $ => A :MLOAD(SP + 2104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2088)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2088)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2104)
  B :MSTORE(SP + 2072)
  $ => E :MLOAD(SP + 2072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2072)
  $ => E :SUB
  $ => A :MLOAD(SP + 2104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2088)
  $ => A :XOR
  A :MSTORE(SP + 2072)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2104)
  B :MSTORE(SP + 2056)
  $ => E :MLOAD(SP + 2056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2064)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2056)
  $ => E :SUB
  $ => A :MLOAD(SP + 2104)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2064)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2072)
  $ => B :XOR
  $ => A :MLOAD(SP + 2096)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  659060556n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2160)
  $ => A :ADD
  B :MSTORE(SP + 2056)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2048)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2048)
  B :MSTORE(SP + 2032)
  $ => E :MLOAD(SP + 2032)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2040)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2032)
  $ => E :SUB
  $ => A :MLOAD(SP + 2048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2040)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2040)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2048)
  B :MSTORE(SP + 2024)
  $ => E :MLOAD(SP + 2024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2032)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2024)
  $ => E :SUB
  $ => A :MLOAD(SP + 2048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2032)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2040)
  $ => A :XOR
  A :MSTORE(SP + 2024)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2048)
  B :MSTORE(SP + 2008)
  $ => E :MLOAD(SP + 2008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 2008)
  $ => E :SUB
  $ => A :MLOAD(SP + 2048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2024)
  $ => A :XOR
  $ => B :MLOAD(SP + 2352)
  A => D
  $ => A :MLOAD(SP + 2200)
  $ => C :XOR
  $ => A :MLOAD(SP + 2048)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2200)
  B => E
  $ => B :MLOAD(SP + 2352)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2008)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4240)
  B :MSTORE(SP + 1992)
  $ => E :MLOAD(SP + 1992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 2000)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1992)
  $ => E :SUB
  $ => A :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 2000)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 2000)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4240)
  B :MSTORE(SP + 1984)
  $ => E :MLOAD(SP + 1984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1992)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1984)
  $ => E :SUB
  $ => A :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1992)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2000)
  $ => A :XOR
  A :MSTORE(SP + 1984)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1984)
  $ => A :XOR
  $ => B :MLOAD(SP + 4392)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 3024)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1984)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2264)
  B :MSTORE(SP + 1968)
  $ => E :MLOAD(SP + 1968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1976)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1968)
  $ => E :SUB
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1976)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1976)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2264)
  B :MSTORE(SP + 1960)
  $ => E :MLOAD(SP + 1960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1968)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1960)
  $ => E :SUB
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1968)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1976)
  $ => A :XOR
  A :MSTORE(SP + 1960)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1960)
  $ => B :XOR
  $ => A :MLOAD(SP + 1984)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2408)
  $ => E :ADD
  A :MSTORE(SP + 1960)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2656)
  A => E
  $ => A :MLOAD(SP + 2056)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1952)
  $ => B :MLOAD(SP + 2256)
  $ => A :MLOAD(SP + 2104)
  $ => C :XOR
  $ => A :MLOAD(SP + 1952)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2256)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1944)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1952)
  B :MSTORE(SP + 1928)
  $ => E :MLOAD(SP + 1928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1936)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1928)
  $ => E :SUB
  $ => A :MLOAD(SP + 1952)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1936)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1936)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1952)
  B :MSTORE(SP + 1920)
  $ => E :MLOAD(SP + 1920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1928)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1920)
  $ => E :SUB
  $ => A :MLOAD(SP + 1952)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1928)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1936)
  $ => A :XOR
  A :MSTORE(SP + 1920)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1952)
  B :MSTORE(SP + 1904)
  $ => E :MLOAD(SP + 1904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1912)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1904)
  $ => E :SUB
  $ => A :MLOAD(SP + 1952)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1912)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1920)
  $ => B :XOR
  $ => A :MLOAD(SP + 1944)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  883997877n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2008)
  $ => A :ADD
  B :MSTORE(SP + 1904)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1896)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1896)
  B :MSTORE(SP + 1880)
  $ => E :MLOAD(SP + 1880)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1888)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1880)
  $ => E :SUB
  $ => A :MLOAD(SP + 1896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1888)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1888)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1896)
  B :MSTORE(SP + 1872)
  $ => E :MLOAD(SP + 1872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1880)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1872)
  $ => E :SUB
  $ => A :MLOAD(SP + 1896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1880)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1888)
  $ => A :XOR
  A :MSTORE(SP + 1872)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1896)
  B :MSTORE(SP + 1856)
  $ => E :MLOAD(SP + 1856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1856)
  $ => E :SUB
  $ => A :MLOAD(SP + 1896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1872)
  $ => A :XOR
  $ => B :MLOAD(SP + 2200)
  A => D
  $ => A :MLOAD(SP + 2048)
  $ => C :XOR
  $ => A :MLOAD(SP + 1896)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 2048)
  B => E
  $ => B :MLOAD(SP + 2200)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1856)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4088)
  B :MSTORE(SP + 1840)
  $ => E :MLOAD(SP + 1840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1848)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1840)
  $ => E :SUB
  $ => A :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1848)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1848)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 4088)
  B :MSTORE(SP + 1832)
  $ => E :MLOAD(SP + 1832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1840)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1832)
  $ => E :SUB
  $ => A :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1840)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1848)
  $ => A :XOR
  A :MSTORE(SP + 1832)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 4088)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1832)
  $ => A :XOR
  $ => B :MLOAD(SP + 4240)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1832)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2112)
  B :MSTORE(SP + 1816)
  $ => E :MLOAD(SP + 1816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1824)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1816)
  $ => E :SUB
  $ => A :MLOAD(SP + 2112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1824)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1824)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2112)
  B :MSTORE(SP + 1808)
  $ => E :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1808)
  $ => E :SUB
  $ => A :MLOAD(SP + 2112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1824)
  $ => A :XOR
  A :MSTORE(SP + 1808)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1808)
  $ => B :XOR
  $ => A :MLOAD(SP + 1832)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2256)
  $ => E :ADD
  A :MSTORE(SP + 1808)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2504)
  A => D
  $ => A :MLOAD(SP + 1904)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1800)
  $ => B :MLOAD(SP + 2104)
  $ => A :MLOAD(SP + 1952)
  $ => C :XOR
  $ => A :MLOAD(SP + 1800)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 2104)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1792)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1800)
  B :MSTORE(SP + 1776)
  $ => E :MLOAD(SP + 1776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1784)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1776)
  $ => E :SUB
  $ => A :MLOAD(SP + 1800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1784)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1784)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1800)
  B :MSTORE(SP + 1768)
  $ => E :MLOAD(SP + 1768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1776)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1768)
  $ => E :SUB
  $ => A :MLOAD(SP + 1800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1776)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1784)
  $ => A :XOR
  A :MSTORE(SP + 1768)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1800)
  B :MSTORE(SP + 1752)
  $ => E :MLOAD(SP + 1752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1760)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1752)
  $ => E :SUB
  $ => A :MLOAD(SP + 1800)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1760)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1768)
  $ => B :XOR
  $ => A :MLOAD(SP + 1792)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  958139571n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1856)
  $ => A :ADD
  B :MSTORE(SP + 1752)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1744)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1744)
  B :MSTORE(SP + 1728)
  $ => E :MLOAD(SP + 1728)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1736)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1728)
  $ => E :SUB
  $ => A :MLOAD(SP + 1744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1736)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1736)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1744)
  B :MSTORE(SP + 1720)
  $ => E :MLOAD(SP + 1720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1728)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1720)
  $ => E :SUB
  $ => A :MLOAD(SP + 1744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1728)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1736)
  $ => A :XOR
  A :MSTORE(SP + 1720)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1744)
  B :MSTORE(SP + 1704)
  $ => E :MLOAD(SP + 1704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1712)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1704)
  $ => E :SUB
  $ => A :MLOAD(SP + 1744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1712)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1720)
  $ => A :XOR
  $ => B :MLOAD(SP + 2048)
  A => D
  $ => A :MLOAD(SP + 1896)
  $ => C :XOR
  $ => A :MLOAD(SP + 1744)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1896)
  B => E
  $ => B :MLOAD(SP + 2048)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1704)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3936)
  B :MSTORE(SP + 1688)
  $ => E :MLOAD(SP + 1688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1696)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1688)
  $ => E :SUB
  $ => A :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1696)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1696)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3936)
  B :MSTORE(SP + 1680)
  $ => E :MLOAD(SP + 1680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1688)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1680)
  $ => E :SUB
  $ => A :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1688)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1696)
  $ => A :XOR
  A :MSTORE(SP + 1680)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3936)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1680)
  $ => A :XOR
  $ => B :MLOAD(SP + 4088)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2720)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1680)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1960)
  B :MSTORE(SP + 1664)
  $ => E :MLOAD(SP + 1664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1672)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1664)
  $ => E :SUB
  $ => A :MLOAD(SP + 1960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1672)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1672)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1960)
  B :MSTORE(SP + 1656)
  $ => E :MLOAD(SP + 1656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1656)
  $ => E :SUB
  $ => A :MLOAD(SP + 1960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1672)
  $ => A :XOR
  A :MSTORE(SP + 1656)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1656)
  $ => B :XOR
  $ => A :MLOAD(SP + 1680)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2104)
  $ => E :ADD
  A :MSTORE(SP + 1656)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2352)
  A => D
  $ => A :MLOAD(SP + 1752)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1648)
  $ => B :MLOAD(SP + 1952)
  $ => A :MLOAD(SP + 1800)
  $ => C :XOR
  $ => A :MLOAD(SP + 1648)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1952)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1640)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1648)
  B :MSTORE(SP + 1624)
  $ => E :MLOAD(SP + 1624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1632)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1624)
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1632)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1632)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1648)
  B :MSTORE(SP + 1616)
  $ => E :MLOAD(SP + 1616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1624)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1616)
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1624)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1632)
  $ => A :XOR
  A :MSTORE(SP + 1616)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1648)
  B :MSTORE(SP + 1600)
  $ => E :MLOAD(SP + 1600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1608)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1600)
  $ => E :SUB
  $ => A :MLOAD(SP + 1648)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1608)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1616)
  $ => B :XOR
  $ => A :MLOAD(SP + 1640)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1322822218n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1704)
  $ => A :ADD
  B :MSTORE(SP + 1600)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1592)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1592)
  B :MSTORE(SP + 1576)
  $ => E :MLOAD(SP + 1576)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1584)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1576)
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1584)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1584)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1592)
  B :MSTORE(SP + 1568)
  $ => E :MLOAD(SP + 1568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1576)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1568)
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1576)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1584)
  $ => A :XOR
  A :MSTORE(SP + 1568)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1592)
  B :MSTORE(SP + 1552)
  $ => E :MLOAD(SP + 1552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1552)
  $ => E :SUB
  $ => A :MLOAD(SP + 1592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1568)
  $ => A :XOR
  $ => B :MLOAD(SP + 1896)
  A => D
  $ => A :MLOAD(SP + 1744)
  $ => C :XOR
  $ => A :MLOAD(SP + 1592)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1744)
  B => E
  $ => B :MLOAD(SP + 1896)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1552)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3784)
  B :MSTORE(SP + 1536)
  $ => E :MLOAD(SP + 1536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1544)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1536)
  $ => E :SUB
  $ => A :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1544)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1544)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3784)
  B :MSTORE(SP + 1528)
  $ => E :MLOAD(SP + 1528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1536)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1528)
  $ => E :SUB
  $ => A :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1536)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1544)
  $ => A :XOR
  A :MSTORE(SP + 1528)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3784)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1528)
  $ => A :XOR
  $ => B :MLOAD(SP + 3936)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1528)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1808)
  B :MSTORE(SP + 1512)
  $ => E :MLOAD(SP + 1512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1520)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1512)
  $ => E :SUB
  $ => A :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1520)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1520)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1808)
  B :MSTORE(SP + 1504)
  $ => E :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1504)
  $ => E :SUB
  $ => A :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1520)
  $ => A :XOR
  A :MSTORE(SP + 1504)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1504)
  $ => B :XOR
  $ => A :MLOAD(SP + 1528)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1952)
  $ => E :ADD
  A :MSTORE(SP + 1504)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2200)
  A => D
  $ => A :MLOAD(SP + 1600)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1496)
  $ => B :MLOAD(SP + 1800)
  $ => A :MLOAD(SP + 1648)
  $ => C :XOR
  $ => A :MLOAD(SP + 1496)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1800)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1488)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1496)
  B :MSTORE(SP + 1472)
  $ => E :MLOAD(SP + 1472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1480)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1472)
  $ => E :SUB
  $ => A :MLOAD(SP + 1496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1480)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1480)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1496)
  B :MSTORE(SP + 1464)
  $ => E :MLOAD(SP + 1464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1472)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1464)
  $ => E :SUB
  $ => A :MLOAD(SP + 1496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1472)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1480)
  $ => A :XOR
  A :MSTORE(SP + 1464)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1496)
  B :MSTORE(SP + 1448)
  $ => E :MLOAD(SP + 1448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1456)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1448)
  $ => E :SUB
  $ => A :MLOAD(SP + 1496)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1456)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1464)
  $ => B :XOR
  $ => A :MLOAD(SP + 1488)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1537002063n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1552)
  $ => A :ADD
  B :MSTORE(SP + 1448)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1440)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1440)
  B :MSTORE(SP + 1424)
  $ => E :MLOAD(SP + 1424)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1432)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1424)
  $ => E :SUB
  $ => A :MLOAD(SP + 1440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1432)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1432)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1440)
  B :MSTORE(SP + 1416)
  $ => E :MLOAD(SP + 1416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1424)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1416)
  $ => E :SUB
  $ => A :MLOAD(SP + 1440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1424)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1432)
  $ => A :XOR
  A :MSTORE(SP + 1416)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1440)
  B :MSTORE(SP + 1400)
  $ => E :MLOAD(SP + 1400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1400)
  $ => E :SUB
  $ => A :MLOAD(SP + 1440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1416)
  $ => A :XOR
  $ => B :MLOAD(SP + 1744)
  A => E
  $ => A :MLOAD(SP + 1592)
  $ => C :XOR
  $ => A :MLOAD(SP + 1440)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1592)
  B => D
  $ => B :MLOAD(SP + 1744)
  $ => C :AND
  D => A
  C => B
  $ => B :XOR
  E => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1400)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3632)
  B :MSTORE(SP + 1384)
  $ => E :MLOAD(SP + 1384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1392)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1384)
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1392)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1392)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3632)
  B :MSTORE(SP + 1376)
  $ => E :MLOAD(SP + 1376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1384)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1376)
  $ => E :SUB
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1384)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1392)
  $ => A :XOR
  A :MSTORE(SP + 1376)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3632)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1376)
  $ => A :XOR
  $ => B :MLOAD(SP + 3784)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2416)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1376)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1656)
  B :MSTORE(SP + 1360)
  $ => E :MLOAD(SP + 1360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1368)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1360)
  $ => E :SUB
  $ => A :MLOAD(SP + 1656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1368)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1368)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1656)
  B :MSTORE(SP + 1352)
  $ => E :MLOAD(SP + 1352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1352)
  $ => E :SUB
  $ => A :MLOAD(SP + 1656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1368)
  $ => A :XOR
  A :MSTORE(SP + 1352)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1352)
  $ => B :XOR
  $ => A :MLOAD(SP + 1376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1800)
  $ => E :ADD
  A :MSTORE(SP + 1352)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2048)
  A => D
  $ => A :MLOAD(SP + 1448)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1344)
  $ => B :MLOAD(SP + 1648)
  $ => A :MLOAD(SP + 1496)
  $ => C :XOR
  $ => A :MLOAD(SP + 1344)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1648)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1336)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1344)
  B :MSTORE(SP + 1320)
  $ => E :MLOAD(SP + 1320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1328)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1320)
  $ => E :SUB
  $ => A :MLOAD(SP + 1344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1328)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1328)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1344)
  B :MSTORE(SP + 1312)
  $ => E :MLOAD(SP + 1312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1312)
  $ => E :SUB
  $ => A :MLOAD(SP + 1344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1328)
  $ => A :XOR
  A :MSTORE(SP + 1312)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1344)
  B :MSTORE(SP + 1296)
  $ => E :MLOAD(SP + 1296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1304)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1296)
  $ => E :SUB
  $ => A :MLOAD(SP + 1344)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1304)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1312)
  $ => B :XOR
  $ => A :MLOAD(SP + 1336)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1747873779n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1400)
  $ => A :ADD
  B :MSTORE(SP + 1296)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1288)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1288)
  B :MSTORE(SP + 1272)
  $ => E :MLOAD(SP + 1272)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1280)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1272)
  $ => E :SUB
  $ => A :MLOAD(SP + 1288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1280)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1280)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1288)
  B :MSTORE(SP + 1264)
  $ => E :MLOAD(SP + 1264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1264)
  $ => E :SUB
  $ => A :MLOAD(SP + 1288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1280)
  $ => A :XOR
  A :MSTORE(SP + 1264)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1288)
  B :MSTORE(SP + 1248)
  $ => E :MLOAD(SP + 1248)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1256)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1248)
  $ => E :SUB
  $ => A :MLOAD(SP + 1288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1256)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1264)
  $ => A :XOR
  $ => B :MLOAD(SP + 1592)
  A => D
  $ => A :MLOAD(SP + 1440)
  $ => C :XOR
  $ => A :MLOAD(SP + 1288)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1440)
  B => E
  $ => B :MLOAD(SP + 1592)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1248)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3480)
  B :MSTORE(SP + 1232)
  $ => E :MLOAD(SP + 1232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1240)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1232)
  $ => E :SUB
  $ => A :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1240)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1240)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3480)
  B :MSTORE(SP + 1224)
  $ => E :MLOAD(SP + 1224)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1232)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1224)
  $ => E :SUB
  $ => A :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1232)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1240)
  $ => A :XOR
  A :MSTORE(SP + 1224)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3480)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1224)
  $ => A :XOR
  $ => B :MLOAD(SP + 3632)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2264)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1224)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1504)
  B :MSTORE(SP + 1208)
  $ => E :MLOAD(SP + 1208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1216)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1208)
  $ => E :SUB
  $ => A :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1216)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1216)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1504)
  B :MSTORE(SP + 1200)
  $ => E :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1208)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1200)
  $ => E :SUB
  $ => A :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1208)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1216)
  $ => A :XOR
  A :MSTORE(SP + 1200)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1200)
  $ => B :XOR
  $ => A :MLOAD(SP + 1224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1648)
  $ => E :ADD
  A :MSTORE(SP + 1200)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1896)
  A => E
  $ => A :MLOAD(SP + 1296)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1192)
  $ => B :MLOAD(SP + 1496)
  $ => A :MLOAD(SP + 1344)
  $ => C :XOR
  $ => A :MLOAD(SP + 1192)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1496)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1184)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1192)
  B :MSTORE(SP + 1168)
  $ => E :MLOAD(SP + 1168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1176)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1168)
  $ => E :SUB
  $ => A :MLOAD(SP + 1192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1176)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1176)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1192)
  B :MSTORE(SP + 1160)
  $ => E :MLOAD(SP + 1160)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1168)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1160)
  $ => E :SUB
  $ => A :MLOAD(SP + 1192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1168)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1176)
  $ => A :XOR
  A :MSTORE(SP + 1160)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1192)
  B :MSTORE(SP + 1144)
  $ => E :MLOAD(SP + 1144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1144)
  $ => E :SUB
  $ => A :MLOAD(SP + 1192)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1160)
  $ => B :XOR
  $ => A :MLOAD(SP + 1184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  1955562222n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1248)
  $ => A :ADD
  B :MSTORE(SP + 1144)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1136)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B :MSTORE(SP + 1120)
  $ => E :MLOAD(SP + 1120)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1128)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1120)
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1128)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1128)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B :MSTORE(SP + 1112)
  $ => E :MLOAD(SP + 1112)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1120)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1112)
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1120)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1128)
  $ => A :XOR
  A :MSTORE(SP + 1112)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B :MSTORE(SP + 1096)
  $ => E :MLOAD(SP + 1096)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1104)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1096)
  $ => E :SUB
  $ => A :MLOAD(SP + 1136)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1104)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1112)
  $ => A :XOR
  $ => B :MLOAD(SP + 1440)
  A => D
  $ => A :MLOAD(SP + 1288)
  $ => C :XOR
  $ => A :MLOAD(SP + 1136)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1288)
  B => E
  $ => B :MLOAD(SP + 1440)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1096)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3328)
  B :MSTORE(SP + 1080)
  $ => E :MLOAD(SP + 1080)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1088)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1080)
  $ => E :SUB
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1088)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1088)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3328)
  B :MSTORE(SP + 1072)
  $ => E :MLOAD(SP + 1072)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1080)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1072)
  $ => E :SUB
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1080)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1088)
  $ => A :XOR
  A :MSTORE(SP + 1072)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3328)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1072)
  $ => A :XOR
  $ => B :MLOAD(SP + 3480)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 2112)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1072)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1352)
  B :MSTORE(SP + 1056)
  $ => E :MLOAD(SP + 1056)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1064)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1056)
  $ => E :SUB
  $ => A :MLOAD(SP + 1352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1064)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1064)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1352)
  B :MSTORE(SP + 1048)
  $ => E :MLOAD(SP + 1048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1056)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1048)
  $ => E :SUB
  $ => A :MLOAD(SP + 1352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1056)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1064)
  $ => A :XOR
  A :MSTORE(SP + 1048)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1048)
  $ => B :XOR
  $ => A :MLOAD(SP + 1072)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1496)
  $ => E :ADD
  A :MSTORE(SP + 1048)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1744)
  A => D
  $ => A :MLOAD(SP + 1144)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1040)
  $ => B :MLOAD(SP + 1344)
  $ => A :MLOAD(SP + 1192)
  $ => C :XOR
  $ => A :MLOAD(SP + 1040)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1344)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1032)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1040)
  B :MSTORE(SP + 1016)
  $ => E :MLOAD(SP + 1016)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1024)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1016)
  $ => E :SUB
  $ => A :MLOAD(SP + 1040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1024)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 1024)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1040)
  B :MSTORE(SP + 1008)
  $ => E :MLOAD(SP + 1008)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1016)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 1008)
  $ => E :SUB
  $ => A :MLOAD(SP + 1040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1016)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1024)
  $ => A :XOR
  A :MSTORE(SP + 1008)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1040)
  B :MSTORE(SP + 992)
  $ => E :MLOAD(SP + 992)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 1000)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 992)
  $ => E :SUB
  $ => A :MLOAD(SP + 1040)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 1000)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1008)
  $ => B :XOR
  $ => A :MLOAD(SP + 1032)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2024104815n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1096)
  $ => A :ADD
  B :MSTORE(SP + 992)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 984)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 984)
  B :MSTORE(SP + 968)
  $ => E :MLOAD(SP + 968)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 976)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 968)
  $ => E :SUB
  $ => A :MLOAD(SP + 984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 976)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 976)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 984)
  B :MSTORE(SP + 960)
  $ => E :MLOAD(SP + 960)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 968)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 960)
  $ => E :SUB
  $ => A :MLOAD(SP + 984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 968)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 976)
  $ => A :XOR
  A :MSTORE(SP + 960)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 984)
  B :MSTORE(SP + 944)
  $ => E :MLOAD(SP + 944)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 952)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 944)
  $ => E :SUB
  $ => A :MLOAD(SP + 984)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 952)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 960)
  $ => A :XOR
  $ => B :MLOAD(SP + 1288)
  A => D
  $ => A :MLOAD(SP + 1136)
  $ => C :XOR
  $ => A :MLOAD(SP + 984)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 1136)
  B => E
  $ => B :MLOAD(SP + 1288)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 944)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3176)
  B :MSTORE(SP + 928)
  $ => E :MLOAD(SP + 928)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 936)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 928)
  $ => E :SUB
  $ => A :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 936)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 936)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3176)
  B :MSTORE(SP + 920)
  $ => E :MLOAD(SP + 920)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 928)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 920)
  $ => E :SUB
  $ => A :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 928)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 936)
  $ => A :XOR
  A :MSTORE(SP + 920)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3176)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 920)
  $ => A :XOR
  $ => B :MLOAD(SP + 3328)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1960)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 920)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1200)
  B :MSTORE(SP + 904)
  $ => E :MLOAD(SP + 904)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 912)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 904)
  $ => E :SUB
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 912)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 912)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1200)
  B :MSTORE(SP + 896)
  $ => E :MLOAD(SP + 896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 904)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 896)
  $ => E :SUB
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 904)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 912)
  $ => A :XOR
  A :MSTORE(SP + 896)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 896)
  $ => B :XOR
  $ => A :MLOAD(SP + 920)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1344)
  $ => E :ADD
  A :MSTORE(SP + 896)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1592)
  A => D
  $ => A :MLOAD(SP + 992)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 888)
  $ => B :MLOAD(SP + 1192)
  $ => A :MLOAD(SP + 1040)
  $ => C :XOR
  $ => A :MLOAD(SP + 888)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1192)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 880)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 888)
  B :MSTORE(SP + 864)
  $ => E :MLOAD(SP + 864)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 872)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 864)
  $ => E :SUB
  $ => A :MLOAD(SP + 888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 872)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 872)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 888)
  B :MSTORE(SP + 856)
  $ => E :MLOAD(SP + 856)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 864)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 856)
  $ => E :SUB
  $ => A :MLOAD(SP + 888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 864)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 872)
  $ => A :XOR
  A :MSTORE(SP + 856)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 888)
  B :MSTORE(SP + 840)
  $ => E :MLOAD(SP + 840)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 848)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 840)
  $ => E :SUB
  $ => A :MLOAD(SP + 888)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 848)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 856)
  $ => B :XOR
  $ => A :MLOAD(SP + 880)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2227730452n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 944)
  $ => A :ADD
  B :MSTORE(SP + 840)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 832)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 832)
  B :MSTORE(SP + 816)
  $ => E :MLOAD(SP + 816)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 824)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 816)
  $ => E :SUB
  $ => A :MLOAD(SP + 832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 824)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 824)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 832)
  B :MSTORE(SP + 808)
  $ => E :MLOAD(SP + 808)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 816)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 808)
  $ => E :SUB
  $ => A :MLOAD(SP + 832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 816)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 824)
  $ => A :XOR
  A :MSTORE(SP + 808)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 832)
  B :MSTORE(SP + 792)
  $ => E :MLOAD(SP + 792)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 800)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 792)
  $ => E :SUB
  $ => A :MLOAD(SP + 832)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 800)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 808)
  $ => A :XOR
  $ => B :MLOAD(SP + 1136)
  A => D
  $ => A :MLOAD(SP + 984)
  $ => C :XOR
  $ => A :MLOAD(SP + 832)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 984)
  B => E
  $ => B :MLOAD(SP + 1136)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 792)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3024)
  B :MSTORE(SP + 776)
  $ => E :MLOAD(SP + 776)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 784)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 776)
  $ => E :SUB
  $ => A :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 784)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 784)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 3024)
  B :MSTORE(SP + 768)
  $ => E :MLOAD(SP + 768)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 776)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 768)
  $ => E :SUB
  $ => A :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 776)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 784)
  $ => A :XOR
  A :MSTORE(SP + 768)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 3024)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 768)
  $ => A :XOR
  $ => B :MLOAD(SP + 3176)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1808)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 768)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1048)
  B :MSTORE(SP + 752)
  $ => E :MLOAD(SP + 752)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 760)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 752)
  $ => E :SUB
  $ => A :MLOAD(SP + 1048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 760)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 760)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 1048)
  B :MSTORE(SP + 744)
  $ => E :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 752)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 744)
  $ => E :SUB
  $ => A :MLOAD(SP + 1048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 752)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 760)
  $ => A :XOR
  A :MSTORE(SP + 744)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 1048)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 744)
  $ => B :XOR
  $ => A :MLOAD(SP + 768)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1192)
  $ => E :ADD
  A :MSTORE(SP + 744)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1440)
  A => E
  $ => A :MLOAD(SP + 840)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 736)
  $ => B :MLOAD(SP + 1040)
  $ => A :MLOAD(SP + 888)
  $ => C :XOR
  $ => A :MLOAD(SP + 736)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 1040)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 728)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 736)
  B :MSTORE(SP + 712)
  $ => E :MLOAD(SP + 712)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 720)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 712)
  $ => E :SUB
  $ => A :MLOAD(SP + 736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 720)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 720)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 736)
  B :MSTORE(SP + 704)
  $ => E :MLOAD(SP + 704)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 712)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 704)
  $ => E :SUB
  $ => A :MLOAD(SP + 736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 712)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 720)
  $ => A :XOR
  A :MSTORE(SP + 704)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 736)
  B :MSTORE(SP + 688)
  $ => E :MLOAD(SP + 688)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 696)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 688)
  $ => E :SUB
  $ => A :MLOAD(SP + 736)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 696)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 704)
  $ => B :XOR
  $ => A :MLOAD(SP + 728)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2361852424n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 792)
  $ => A :ADD
  B :MSTORE(SP + 688)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 680)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 680)
  B :MSTORE(SP + 664)
  $ => E :MLOAD(SP + 664)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 672)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 664)
  $ => E :SUB
  $ => A :MLOAD(SP + 680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 672)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 672)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 680)
  B :MSTORE(SP + 656)
  $ => E :MLOAD(SP + 656)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 664)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 656)
  $ => E :SUB
  $ => A :MLOAD(SP + 680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 664)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 672)
  $ => A :XOR
  A :MSTORE(SP + 656)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 680)
  B :MSTORE(SP + 640)
  $ => E :MLOAD(SP + 640)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 648)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 640)
  $ => E :SUB
  $ => A :MLOAD(SP + 680)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 648)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 656)
  $ => A :XOR
  $ => B :MLOAD(SP + 984)
  A => D
  $ => A :MLOAD(SP + 832)
  $ => C :XOR
  $ => A :MLOAD(SP + 680)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 832)
  B => E
  $ => B :MLOAD(SP + 984)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 640)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2872)
  B :MSTORE(SP + 624)
  $ => E :MLOAD(SP + 624)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 632)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 624)
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 632)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 632)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2872)
  B :MSTORE(SP + 616)
  $ => E :MLOAD(SP + 616)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 624)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 616)
  $ => E :SUB
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 624)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 632)
  $ => A :XOR
  A :MSTORE(SP + 616)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2872)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 616)
  $ => A :XOR
  $ => B :MLOAD(SP + 3024)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1656)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 616)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 896)
  B :MSTORE(SP + 600)
  $ => E :MLOAD(SP + 600)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 608)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 600)
  $ => E :SUB
  $ => A :MLOAD(SP + 896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 608)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 608)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 896)
  B :MSTORE(SP + 592)
  $ => E :MLOAD(SP + 592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 600)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 592)
  $ => E :SUB
  $ => A :MLOAD(SP + 896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 600)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 608)
  $ => A :XOR
  A :MSTORE(SP + 592)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 896)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 592)
  $ => B :XOR
  $ => A :MLOAD(SP + 616)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1040)
  $ => E :ADD
  A :MSTORE(SP + 592)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1288)
  A => D
  $ => A :MLOAD(SP + 688)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 584)
  $ => B :MLOAD(SP + 888)
  $ => A :MLOAD(SP + 736)
  $ => C :XOR
  $ => A :MLOAD(SP + 584)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 888)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 576)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 584)
  B :MSTORE(SP + 560)
  $ => E :MLOAD(SP + 560)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 568)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 560)
  $ => E :SUB
  $ => A :MLOAD(SP + 584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 568)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 568)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 584)
  B :MSTORE(SP + 552)
  $ => E :MLOAD(SP + 552)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 560)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 552)
  $ => E :SUB
  $ => A :MLOAD(SP + 584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 560)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 568)
  $ => A :XOR
  A :MSTORE(SP + 552)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 584)
  B :MSTORE(SP + 536)
  $ => E :MLOAD(SP + 536)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 544)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 536)
  $ => E :SUB
  $ => A :MLOAD(SP + 584)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 544)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 552)
  $ => B :XOR
  $ => A :MLOAD(SP + 576)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2428436474n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 640)
  $ => A :ADD
  B :MSTORE(SP + 536)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 528)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 528)
  B :MSTORE(SP + 512)
  $ => E :MLOAD(SP + 512)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 520)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 512)
  $ => E :SUB
  $ => A :MLOAD(SP + 528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 520)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 520)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 528)
  B :MSTORE(SP + 504)
  $ => E :MLOAD(SP + 504)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 512)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 504)
  $ => E :SUB
  $ => A :MLOAD(SP + 528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 512)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 520)
  $ => A :XOR
  A :MSTORE(SP + 504)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 528)
  B :MSTORE(SP + 488)
  $ => E :MLOAD(SP + 488)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 496)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 488)
  $ => E :SUB
  $ => A :MLOAD(SP + 528)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 496)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 504)
  $ => A :XOR
  $ => B :MLOAD(SP + 832)
  A => D
  $ => A :MLOAD(SP + 680)
  $ => C :XOR
  $ => A :MLOAD(SP + 528)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 680)
  B => E
  $ => B :MLOAD(SP + 832)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 488)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2720)
  B :MSTORE(SP + 472)
  $ => E :MLOAD(SP + 472)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 480)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 472)
  $ => E :SUB
  $ => A :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 480)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 480)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2720)
  B :MSTORE(SP + 464)
  $ => E :MLOAD(SP + 464)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 472)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 464)
  $ => E :SUB
  $ => A :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 472)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 480)
  $ => A :XOR
  A :MSTORE(SP + 464)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2720)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 464)
  $ => A :XOR
  $ => B :MLOAD(SP + 2872)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1504)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 464)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 744)
  B :MSTORE(SP + 448)
  $ => E :MLOAD(SP + 448)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 456)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 448)
  $ => E :SUB
  $ => A :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 456)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 456)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 744)
  B :MSTORE(SP + 440)
  $ => E :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 448)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 440)
  $ => E :SUB
  $ => A :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 448)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 456)
  $ => A :XOR
  A :MSTORE(SP + 440)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 744)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 440)
  $ => B :XOR
  $ => A :MLOAD(SP + 464)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 888)
  $ => E :ADD
  A :MSTORE(SP + 440)
  E => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1136)
  A => D
  $ => A :MLOAD(SP + 536)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 432)
  $ => B :MLOAD(SP + 736)
  $ => A :MLOAD(SP + 584)
  $ => C :XOR
  $ => A :MLOAD(SP + 432)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 736)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 424)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 432)
  B :MSTORE(SP + 408)
  $ => E :MLOAD(SP + 408)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 416)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 408)
  $ => E :SUB
  $ => A :MLOAD(SP + 432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 416)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 416)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 432)
  B :MSTORE(SP + 400)
  $ => E :MLOAD(SP + 400)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 408)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 400)
  $ => E :SUB
  $ => A :MLOAD(SP + 432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 408)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 416)
  $ => A :XOR
  A :MSTORE(SP + 400)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 432)
  B :MSTORE(SP + 384)
  $ => E :MLOAD(SP + 384)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 392)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 384)
  $ => E :SUB
  $ => A :MLOAD(SP + 432)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 392)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 400)
  $ => B :XOR
  $ => A :MLOAD(SP + 424)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  2756734187n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 488)
  $ => A :ADD
  B :MSTORE(SP + 384)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 376)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 376)
  B :MSTORE(SP + 360)
  $ => E :MLOAD(SP + 360)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 368)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 360)
  $ => E :SUB
  $ => A :MLOAD(SP + 376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 368)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 368)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 376)
  B :MSTORE(SP + 352)
  $ => E :MLOAD(SP + 352)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 360)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 352)
  $ => E :SUB
  $ => A :MLOAD(SP + 376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 360)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 368)
  $ => A :XOR
  A :MSTORE(SP + 352)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 376)
  B :MSTORE(SP + 336)
  $ => E :MLOAD(SP + 336)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 344)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 336)
  $ => E :SUB
  $ => A :MLOAD(SP + 376)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 344)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 352)
  $ => A :XOR
  $ => B :MLOAD(SP + 680)
  A => D
  $ => A :MLOAD(SP + 528)
  $ => C :XOR
  $ => A :MLOAD(SP + 376)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 528)
  B => E
  $ => B :MLOAD(SP + 680)
  $ => C :AND
  E => A
  C => B
  $ => B :XOR
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 336)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2568)
  B :MSTORE(SP + 320)
  $ => E :MLOAD(SP + 320)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 328)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 320)
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 328)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 328)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2568)
  B :MSTORE(SP + 312)
  $ => E :MLOAD(SP + 312)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 320)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 312)
  $ => E :SUB
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 320)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 328)
  $ => A :XOR
  A :MSTORE(SP + 312)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2568)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 312)
  $ => B :XOR
  $ => A :MLOAD(SP + 2720)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1352)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 312)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 592)
  B :MSTORE(SP + 296)
  $ => E :MLOAD(SP + 296)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 304)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 296)
  $ => E :SUB
  $ => A :MLOAD(SP + 592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 304)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 304)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 592)
  B :MSTORE(SP + 288)
  $ => E :MLOAD(SP + 288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 296)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 288)
  $ => E :SUB
  $ => A :MLOAD(SP + 592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 296)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 304)
  $ => A :XOR
  A :MSTORE(SP + 288)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 592)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 288)
  $ => B :XOR
  $ => A :MLOAD(SP + 312)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 736)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 984)
  A => D
  $ => A :MLOAD(SP + 384)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 288)
  $ => B :MLOAD(SP + 584)
  $ => A :MLOAD(SP + 432)
  $ => C :XOR
  $ => A :MLOAD(SP + 288)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 584)
  $ => C :XOR
  D => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 280)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 288)
  B :MSTORE(SP + 264)
  $ => E :MLOAD(SP + 264)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 272)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 264)
  $ => E :SUB
  $ => A :MLOAD(SP + 288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 272)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 272)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 288)
  B :MSTORE(SP + 256)
  $ => E :MLOAD(SP + 256)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 264)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 256)
  $ => E :SUB
  $ => A :MLOAD(SP + 288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 264)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 272)
  $ => A :XOR
  A :MSTORE(SP + 256)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 288)
  B :MSTORE(SP + 240)
  $ => E :MLOAD(SP + 240)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 248)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 240)
  $ => E :SUB
  $ => A :MLOAD(SP + 288)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 248)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 256)
  $ => B :XOR
  $ => A :MLOAD(SP + 280)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3204031479n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 336)
  $ => A :ADD
  B :MSTORE(SP + 240)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 232)
  $ => B :MLOAD(SP + 528)
  $ => A :MLOAD(SP + 376)
  $ => C :XOR
  $ => A :MLOAD(SP + 232)
  C => B
  $ => B :AND
  $ => A :MLOAD(SP + 376)
  B => D
  $ => B :MLOAD(SP + 528)
  $ => C :AND
  D => A
  C => B
  $ => A :XOR
  $ => B :MLOAD(SP + 24)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 224)
  30n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 232)
  B :MSTORE(SP + 24)
  $ => E :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 216)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 24)
  $ => E :SUB
  $ => A :MLOAD(SP + 232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 216)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 216)
  19n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 232)
  B :MSTORE(SP + 208)
  $ => E :MLOAD(SP + 208)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 208)
  $ => E :SUB
  $ => A :MLOAD(SP + 232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 216)
  $ => A :XOR
  A :MSTORE(SP + 208)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 232)
  B :MSTORE(SP + 200)
  $ => E :MLOAD(SP + 200)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 200)
  $ => E :SUB
  $ => A :MLOAD(SP + 232)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 208)
  $ => B :XOR
  $ => A :MLOAD(SP + 224)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 200)
  25n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2416)
  B :MSTORE(SP + 24)
  $ => E :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 192)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 24)
  $ => E :SUB
  $ => A :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 192)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 192)
  14n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 2416)
  B :MSTORE(SP + 184)
  $ => E :MLOAD(SP + 184)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 184)
  $ => E :SUB
  $ => A :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 192)
  $ => A :XOR
  A :MSTORE(SP + 184)
  3n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 2416)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 184)
  $ => B :XOR
  $ => A :MLOAD(SP + 2568)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 1200)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 184)
  15n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 440)
  B :MSTORE(SP + 24)
  $ => E :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 176)
  A :MSTORE(SP + 440)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 24)
  $ => E :SUB
  $ => A :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 176)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 176)
  13n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 440)
  B :MSTORE(SP + 168)
  $ => E :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 168)
  $ => E :SUB
  $ => A :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 176)
  $ => A :XOR
  A :MSTORE(SP + 168)
  10n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => E :AND
  $ => A :MLOAD(SP + 440)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  $ => B :XOR
  $ => A :MLOAD(SP + 184)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 584)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  $ => B :MLOAD(SP + 832)
  A => E
  $ => A :MLOAD(SP + 240)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 168)
  $ => B :MLOAD(SP + 432)
  $ => A :MLOAD(SP + 288)
  $ => C :XOR
  $ => A :MLOAD(SP + 168)
  C => B
  $ => B :AND
  B => A
  $ => B :MLOAD(SP + 432)
  $ => C :XOR
  E => A
  C => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 160)
  26n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  B :MSTORE(SP + 24)
  $ => E :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 152)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 24)
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 152)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 152)
  21n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  B :MSTORE(SP + 144)
  $ => E :MLOAD(SP + 144)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 24)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 144)
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 24)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 152)
  $ => A :XOR
  A :MSTORE(SP + 144)
  7n => A  ;; LoadConst32
  31n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 168)
  B :MSTORE(SP + 24)
  $ => E :MLOAD(SP + 24)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  0 => C
  $${var _mul = A * B}
  ${_mul >> 64} => D
  ${_mul} => E :ARITH
  E :MSTORE(SP + 136)
  32n => A  ;; LoadConst32
  $ => B :MLOAD(SP + 24)
  $ => E :SUB
  $ => A :MLOAD(SP + 168)
;;NEED_INCLUDE: 2-exp
  zkPC + 2 => RR
    :JMP(@two_power + E)
  A => E
  0 => D
  ${E / B} => A
  ${E % B} => C
  E :ARITH
  A => B
  $ => A :MLOAD(SP + 136)
  $ => A :OR
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 144)
  $ => B :XOR
  $ => A :MLOAD(SP + 160)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3329325298n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  $ => A :MLOAD(SP + 200)
  $ => A :ADD
  B => E
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  $ => A :MLOAD(SP + 232)
  $ => B :MLOAD(SP + 8)
  C :MSTORE(SP + 128)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  $ => A :MLOAD(SP + 680)
  $ => B :MLOAD(SP + 40)
  C :MSTORE(SP + 120)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  E => B
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 96)
  $ => B :MLOAD(SP + 16)
  $ => A :MLOAD(SP + 376)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => D :AND
  $ => A :MLOAD(SP + 168)
  $ => B :MLOAD(SP + 56)
  D :MSTORE(SP + 112)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  $ => A :MLOAD(SP + 528)
  $ => B :MLOAD(SP + 104)
  C :MSTORE(SP + 88)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 104)
  $ => B :MLOAD(SP + 48)
  $ => A :MLOAD(SP + 288)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 80)
  $ => B :MLOAD(SP + 32)
  $ => A :MLOAD(SP + 432)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => B :AND
  B :MSTORE(SP + 72)
  64n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 64)
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 9416)
  $ => A :EQ
  1 - A => A
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_3_4)
  :JMP(label_3_5)
label_3_4:
  $ => A :MLOAD(SP + 112)
  $ => B :MLOAD(SP + 120)
  $ => C :MLOAD(SP + 120)
  C :MSTORE(SP + 8)
  $ => C :MLOAD(SP + 112)
  C :MSTORE(SP + 16)
  $ => C :MLOAD(SP + 128)
  C :MSTORE(SP + 24)
  $ => C :MLOAD(SP + 72)
  C :MSTORE(SP + 32)
  $ => C :MLOAD(SP + 96)
  C :MSTORE(SP + 40)
  $ => C :MLOAD(SP + 80)
  C :MSTORE(SP + 48)
  $ => C :MLOAD(SP + 88)
  C :MSTORE(SP + 56)
  E :MSTORE(SP + 64)
  :JMP(label_3_3)
label_3_5:
  :JMP(label_3_7)
label_3_7:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => B :MLOAD(SP)
  $ => E :ADD
  $ => A :MLOAD(SP + 72)
  A :MSTORE(MEM:E + 28)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(SP + 80)
  C :MSTORE(MEM:E + 24)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(SP + 88)
  C :MSTORE(MEM:E + 20)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => A :MLOAD(SP + 96)
  A :MSTORE(MEM:E + 16)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(SP + 104)
  D :MSTORE(MEM:E + 12)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => D :MLOAD(SP + 112)
  D :MSTORE(MEM:E + 8)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => C :MLOAD(SP + 120)
  C :MSTORE(MEM:E + 4)
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  $ => B :MLOAD(SP + 128)
  B :MSTORE(MEM:E)
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  SP - 1182 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_4:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 2 => SP
  C :MSTORE(SP - 1)
  $ => C :MLOAD(fp + 16)
  SP + 1 => SP
  C :MSTORE(SP)
  zkPC + 2 => RR
  :JMP(function_5)
  SP - 1 => SP
  $ => C :MLOAD(SP - 1)
  SP - 2 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
function_5:
  SP + 1 => SP
  RR :MSTORE(SP - 1)
  SP + 10 => SP
  C :MSTORE(SP - 1)
  D :MSTORE(SP - 2)
  E :MSTORE(SP - 3)
  B :MSTORE(SP - 4)
  A :MSTORE(SP)
  B :MSTORE(SP + 8)
  $ => A :MLOAD(fp + 16)
  A :MSTORE(SP + 16)
  15n => B  ;; LoadConst32
  A => C
  B => A
  C => B
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_2)
  $ => E :MLOAD(SP + 16)
  $ => C :MLOAD(SP)
  C :MSTORE(SP + 16)
  :JMP(label_5_17)
label_5_2:
  0n => A  ;; LoadConst32
  $ => B :MLOAD(SP)
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  3n => B  ;; LoadConst32
  $ => B :AND
  $ => A :MLOAD(SP)
  $ => C :ADD
  C => A
  B :MSTORE(SP + 24)
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 40)
  0n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 24)
  $ => A :EQ
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_3)
  :JMP(label_5_4)
label_5_3:
  $ => A :MLOAD(SP + 16)
  $ => B :MLOAD(SP + 24)
  :JMP(label_5_9)
label_5_4:
  $ => B :MLOAD(SP)
  :JMP(label_5_5)
label_5_5:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B => A
  $ => B :MLOAD(SP + 8)
  B :MSTORE(MEM:E)
  1n => B  ;; LoadConst32
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 40)
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_6)
  :JMP(label_5_7)
label_5_6:
  E => B
  :JMP(label_5_5)
label_5_7:
  $ => A :MLOAD(SP + 16)
  $ => B :MLOAD(SP + 24)
  :JMP(label_5_9)
label_5_9:
  $ => A :SUB
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  4294967292n => B  ;; LoadConst32
  $ => B :AND
  A :MSTORE(SP + 32)
  $ => A :MLOAD(SP + 40)
  $ => D :ADD
  B => C
  D => A
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 16)
  1n => B  ;; LoadConst32
  C => A
  B => C  ;; Extend A.
  A => B
  B => A
  0x80000000n => B
  $ => A: XOR
  $ => A: SUB
  C => B  ;; Extend B.
  A => C
  B => A
  0x80000000n => B
  $ => A: XOR
  $ => A: SUB
  A => B
  C => A
  $ => A :SLT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_10)
  :JMP(label_5_11)
label_5_10:
  :JMP(label_5_16)
label_5_11:
  255n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 8)
  $ => C :AND
  C => A
  16843009n => B  ;; LoadConst32
  0 => C
  $${var _mulArith = A * B}
  ${_mulArith >> 64} => D
  ${_mulArith} => A :ARITH
  4294967295n => B  ;; LoadConst64
  $ => A :AND
  A :MSTORE(SP + 24)
  $ => B :MLOAD(SP + 40)
  :JMP(label_5_12)
label_5_12:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B => D
  $ => A :MLOAD(SP + 24)
  A :MSTORE(MEM:E)
  4n => B  ;; LoadConst32
  D => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 16)
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_13)
  :JMP(label_5_14)
label_5_13:
  E => B
  :JMP(label_5_12)
label_5_14:
  :JMP(label_5_16)
label_5_16:
  3n => B  ;; LoadConst32
  $ => A :MLOAD(SP + 32)
  $ => E :AND
  :JMP(label_5_17)
label_5_17:
  0n => B  ;; LoadConst32
  E => A
  $ => A :EQ
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_18)
  :JMP(label_5_19)
label_5_18:
  :JMP(label_5_24)
label_5_19:
  $ => A :MLOAD(SP + 16)
  E => B
  $ => D :ADD
  D => A
  4294967295n => B  ;; LoadConst64
  $ => C :AND
  C :MSTORE(SP + 24)
  $ => B :MLOAD(SP + 16)
  :JMP(label_5_20)
label_5_20:
  0 => A  ;; LoadExtName(User(userextname0))
  $ => E :ADD
  B => C
  $ => A :MLOAD(SP + 8)
  A :MSTORE(MEM:E)
  1n => B  ;; LoadConst32
  C => A
  $ => A :ADD
  4294967295n => B  ;; LoadConst64
  $ => E :AND
  E => A
  $ => B :MLOAD(SP + 24)
  $ => A :LT
  A => B
  0 => A
  $ => A :EQ
  A :JMPZ(label_5_21)
  :JMP(label_5_22)
label_5_21:
  E => B
  :JMP(label_5_20)
label_5_22:
  :JMP(label_5_24)
label_5_24:
  $ => A :MLOAD(SP)
  $ => C :MLOAD(SP - 1)
  $ => D :MLOAD(SP - 2)
  $ => E :MLOAD(SP - 3)
  $ => B :MLOAD(SP - 4)
  SP - 10 => SP
  $ => RR :MLOAD(SP - 1)
  SP - 1 => SP
  :JMP(RR)
finalizeExecution:
  ${beforeLast()}  :JMPN(finalizeExecution)
                   :JMP(start)
INCLUDE "helpers/2-exp.zkasm"