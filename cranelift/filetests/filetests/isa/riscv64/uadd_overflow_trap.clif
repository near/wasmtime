test compile precise-output
target riscv64

function %f0(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 127
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   li a2,127
;   slli a3,a0,32
;   srli a5,a3,32
;   slli a1,a2,32
;   srli a3,a1,32
;   add a0,a5,a3
;   srli a1,a0,32
;   trap_if user0##(a1 ne zero)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x7f
;   slli a3, a0, 0x20
;   srli a5, a3, 0x20
;   slli a1, a2, 0x20
;   srli a3, a1, 0x20
;   add a0, a5, a3
;   srli a1, a0, 0x20
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: user0
;   ret

function %f1(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 127
    v2 = uadd_overflow_trap v1, v0, user0
    return v2
}

; VCode:
; block0:
;   li a2,127
;   slli a3,a2,32
;   srli a5,a3,32
;   slli a1,a0,32
;   srli a3,a1,32
;   add a0,a5,a3
;   srli a1,a0,32
;   trap_if user0##(a1 ne zero)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x7f
;   slli a3, a2, 0x20
;   srli a5, a3, 0x20
;   slli a1, a0, 0x20
;   srli a3, a1, 0x20
;   add a0, a5, a3
;   srli a1, a0, 0x20
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: user0
;   ret

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   slli a3,a0,32
;   srli a5,a3,32
;   slli a1,a1,32
;   srli a3,a1,32
;   add a0,a5,a3
;   srli a1,a0,32
;   trap_if user0##(a1 ne zero)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x20
;   srli a5, a3, 0x20
;   slli a1, a1, 0x20
;   srli a3, a1, 0x20
;   add a0, a5, a3
;   srli a1, a0, 0x20
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: user0
;   ret

function %f3(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 127
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   mv a1,a0
;   li a4,127
;   add a0,a1,a4
;   ult a5,a0,a1##ty=i64
;   trap_if user0##(a5 ne zero)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a1, a0
;   addi a4, zero, 0x7f
;   add a0, a1, a4
;   bgeu a0, a1, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   beqz a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: user0
;   ret

function %f3(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 127
    v2 = uadd_overflow_trap v1, v0, user0
    return v2
}

; VCode:
; block0:
;   li a4,127
;   add a0,a4,a0
;   ult a5,a0,a4##ty=i64
;   trap_if user0##(a5 ne zero)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x7f
;   add a0, a4, a0
;   bgeu a0, a4, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   beqz a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: user0
;   ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = uadd_overflow_trap v0, v1, user0
    return v2
}

; VCode:
; block0:
;   add a3,a0,a1
;   mv a1,a3
;   ult a5,a1,a0##ty=i64
;   mv a0,a1
;   trap_if user0##(a5 ne zero)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   add a3, a0, a1
;   mv a1, a3
;   bgeu a1, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   mv a0, a1
;   beqz a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: user0
;   ret

