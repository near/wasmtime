test compile precise-output
set unwind_info=false
target riscv64

function %f1(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iadd.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   add a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   add a0, a0, a1
;   ret

function %f2(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = isub.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   sub a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sub a0, a0, a1
;   ret

function %f3(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = imul.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   mul a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mul a0, a0, a1
;   ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = umulhi.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   mulhu a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mulhu a0, a0, a1
;   ret

function %f5(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = smulhi.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   mulh a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mulh a0, a0, a1
;   ret

function %f6(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sdiv.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,-1
;   li a5,1
;   slli a2,a5,63
;   eq a3,a3,a1##ty=i64
;   eq a5,a2,a0##ty=i64
;   and a2,a3,a5
;   trap_if int_ovf##(a2 ne zero)
;   trap_if int_divz##(a1 eq zero)
;   div a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, -1
;   addi a5, zero, 1
;   slli a2, a5, 0x3f
;   bne a3, a1, 0xc
;   addi a3, zero, 1
;   j 8
;   mv a3, zero
;   bne a2, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   and a2, a3, a5
;   beqz a2, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_ovf
;   bnez a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   div a0, a0, a1
;   ret

function %f7(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 2
  v2 = sdiv.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,2
;   li a4,-1
;   li a5,1
;   slli a1,a5,63
;   eq a4,a4,a3##ty=i64
;   eq a5,a1,a0##ty=i64
;   and a1,a4,a5
;   trap_if int_ovf##(a1 ne zero)
;   trap_if int_divz##(a3 eq zero)
;   div a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 2
;   addi a4, zero, -1
;   addi a5, zero, 1
;   slli a1, a5, 0x3f
;   bne a4, a3, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   bne a1, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   and a1, a4, a5
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_ovf
;   bnez a3, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   div a0, a0, a3
;   ret

function %f8(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = udiv.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   trap_if int_divz##(a1 eq zero)
;   divu a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   bnez a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   divu a0, a0, a1
;   ret

function %f9(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 2
  v2 = udiv.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,2
;   trap_if int_divz##(a3 eq zero)
;   divu a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 2
;   bnez a3, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   divu a0, a0, a3
;   ret

function %f10(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = srem.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   trap_if int_divz##(a1 eq zero)
;   rem a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   bnez a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   rem a0, a0, a1
;   ret

function %f11(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = urem.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   trap_if int_divz##(a1 eq zero)
;   remu a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   bnez a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   remu a0, a0, a1
;   ret

function %f12(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sdiv.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   sext.w a3,a0
;   sext.w a5,a1
;   li a1,-1
;   li a4,1
;   slli a0,a4,63
;   slli a2,a3,32
;   eq a4,a1,a5##ty=i32
;   eq a0,a0,a2##ty=i32
;   and a1,a4,a0
;   trap_if int_ovf##(a1 ne zero)
;   trap_if int_divz##(a5 eq zero)
;   divw a0,a3,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   sext.w a5, a1
;   addi a1, zero, -1
;   addi a4, zero, 1
;   slli a0, a4, 0x3f
;   slli a2, a3, 0x20
;   bne a1, a5, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   bne a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   and a1, a4, a0
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_ovf
;   bnez a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   divw a0, a3, a5
;   ret

function %f13(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 2
  v2 = sdiv.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   mv a2,a0
;   li a0,2
;   sext.w a3,a2
;   sext.w a5,a0
;   li a1,-1
;   li a4,1
;   slli a0,a4,63
;   slli a2,a3,32
;   eq a4,a1,a5##ty=i32
;   eq a0,a0,a2##ty=i32
;   and a1,a4,a0
;   trap_if int_ovf##(a1 ne zero)
;   trap_if int_divz##(a5 eq zero)
;   divw a0,a3,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a2, a0
;   addi a0, zero, 2
;   sext.w a3, a2
;   sext.w a5, a0
;   addi a1, zero, -1
;   addi a4, zero, 1
;   slli a0, a4, 0x3f
;   slli a2, a3, 0x20
;   bne a1, a5, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   bne a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   and a1, a4, a0
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_ovf
;   bnez a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   divw a0, a3, a5
;   ret

function %f14(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = udiv.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   slli a3,a1,32
;   srli a5,a3,32
;   trap_if int_divz##(a5 eq zero)
;   slli a2,a0,32
;   srli a4,a2,32
;   divuw a0,a4,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a1, 0x20
;   srli a5, a3, 0x20
;   bnez a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   slli a2, a0, 0x20
;   srli a4, a2, 0x20
;   divuw a0, a4, a5
;   ret

function %f15(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 2
  v2 = udiv.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   li a1,2
;   slli a3,a1,32
;   srli a5,a3,32
;   trap_if int_divz##(a5 eq zero)
;   slli a2,a0,32
;   srli a4,a2,32
;   divuw a0,a4,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a1, zero, 2
;   slli a3, a1, 0x20
;   srli a5, a3, 0x20
;   bnez a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   slli a2, a0, 0x20
;   srli a4, a2, 0x20
;   divuw a0, a4, a5
;   ret

function %f16(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = srem.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   sext.w a3,a1
;   trap_if int_divz##(a3 eq zero)
;   remw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a1
;   bnez a3, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   remw a0, a0, a3
;   ret

function %f17(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = urem.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   slli a3,a1,32
;   srli a5,a3,32
;   trap_if int_divz##(a5 eq zero)
;   remuw a0,a0,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a1, 0x20
;   srli a5, a3, 0x20
;   bnez a5, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   remuw a0, a0, a5
;   ret

function %f18(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = band.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   and a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   and a0, a0, a1
;   ret

function %f19(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   or a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   or a0, a0, a1
;   ret

function %f20(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bxor.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   xor a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   xor a0, a0, a1
;   ret

function %f21(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = band_not.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   not a4,a1
;   and a0,a0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   not a4, a1
;   and a0, a0, a4
;   ret

function %f22(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bor_not.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   not a4,a1
;   or a0,a0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   not a4, a1
;   or a0, a0, a4
;   ret

function %f23(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bxor_not.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   not a4,a1
;   xor a0,a0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   not a4, a1
;   xor a0, a0, a4
;   ret

function %f24(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = bnot.i64 v0
  return v2
}

; VCode:
; block0:
;   not a0,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   not a0, a0
;   ret

function %f25(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iconst.i32 53
  v3 = ishl.i32 v0, v2
  v4 = isub.i32 v1, v3
  return v4
}

; VCode:
; block0:
;   slliw a4,a0,21
;   subw a0,a1,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slliw a4, a0, 0x15
;   subw a0, a1, a4
;   ret

function %f26(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 -1
  v2 = iadd.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   addiw a0,a0,-1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addiw a0, a0, -1
;   ret

function %f27(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 -1
  v2 = isub.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,-1
;   subw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, -1
;   subw a0, a0, a3
;   ret

function %f28(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 -1
  v2 = isub.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,-1
;   sub a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, -1
;   sub a0, a0, a3
;   ret

function %f29(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 1
  v2 = ineg v1
  return v2
}

; VCode:
; block0:
;   li a3,1
;   sub a0,zero,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 1
;   neg a0, a3
;   ret

function %add_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = iadd v0, v1
    return v2
}

; VCode:
; block0:
;   add a0,a0,a2
;   sltu a2,a0,a2
;   add a3,a1,a3
;   add a1,a3,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   add a0, a0, a2
;   sltu a2, a0, a2
;   add a3, a1, a3
;   add a1, a3, a2
;   ret

function %sub_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = isub v0, v1
    return v2
}

; VCode:
; block0:
;   sub a5,a0,a2
;   mv a4,a5
;   sltu a2,a0,a4
;   mv a0,a4
;   sub a3,a1,a3
;   sub a1,a3,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sub a5, a0, a2
;   mv a4, a5
;   sltu a2, a0, a4
;   mv a0, a4
;   sub a3, a1, a3
;   sub a1, a3, a2
;   ret

function %add_mul_2(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
    v3 = imul v1, v2
    v4 = iadd v3, v0
    return v4
}

; VCode:
; block0:
;   mulw a5,a1,a2
;   add a0,a5,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mulw a5, a1, a2
;   add a0, a5, a0
;   ret

function %msub_i32(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
    v3 = imul v1, v2
    v4 = isub v0, v3
    return v4
}

; VCode:
; block0:
;   mulw a5,a1,a2
;   subw a0,a0,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mulw a5, a1, a2
;   subw a0, a0, a5
;   ret

function %msub_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
    v3 = imul v1, v2
    v4 = isub v0, v3
    return v4
}

; VCode:
; block0:
;   mul a5,a1,a2
;   sub a0,a0,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mul a5, a1, a2
;   sub a0, a0, a5
;   ret

function %imul_sub_i32(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
    v3 = imul v1, v2
    v4 = isub v3, v0
    return v4
}

; VCode:
; block0:
;   mulw a5,a1,a2
;   subw a0,a5,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mulw a5, a1, a2
;   subw a0, a5, a0
;   ret

function %imul_sub_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
    v3 = imul v1, v2
    v4 = isub v3, v0
    return v4
}

; VCode:
; block0:
;   mul a5,a1,a2
;   sub a0,a5,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mul a5, a1, a2
;   sub a0, a5, a0
;   ret

function %srem_const (i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 2
  v2 = srem.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,2
;   trap_if int_divz##(a3 eq zero)
;   rem a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 2
;   bnez a3, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   rem a0, a0, a3
;   ret

function %urem_const (i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 2
  v2 = urem.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,2
;   trap_if int_divz##(a3 eq zero)
;   remu a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 2
;   bnez a3, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   remu a0, a0, a3
;   ret

function %sdiv_minus_one(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 -1
  v2 = sdiv.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   li a3,-1
;   li a4,-1
;   li a5,1
;   slli a1,a5,63
;   eq a4,a4,a3##ty=i64
;   eq a5,a1,a0##ty=i64
;   and a1,a4,a5
;   trap_if int_ovf##(a1 ne zero)
;   trap_if int_divz##(a3 eq zero)
;   div a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, -1
;   addi a4, zero, -1
;   addi a5, zero, 1
;   slli a1, a5, 0x3f
;   bne a4, a3, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   bne a1, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   and a1, a4, a5
;   beqz a1, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_ovf
;   bnez a3, 8
;   .byte 0x00, 0x00, 0x00, 0x00 ; trap: int_divz
;   div a0, a0, a3
;   ret

function %i8_iadd_const_neg1(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i8 -1
  v2 = iadd.i8 v0, v1
  return v2
}

; VCode:
; block0:
;   addiw a0,a0,-1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addiw a0, a0, -1
;   ret

function %i8_iadd_const_ff(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i8 0xFF
  v2 = iadd.i8 v0, v1
  return v2
}

; VCode:
; block0:
;   addiw a0,a0,-1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addiw a0, a0, -1
;   ret
