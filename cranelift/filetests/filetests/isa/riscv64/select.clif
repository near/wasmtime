test compile precise-output
set unwind_info=false
target riscv64

function %select_icmp_i8_i8(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   andi a5,a0,255
;   andi a3,a3,255
;   select_reg a0,a1,a2##condition=(a5 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   andi a5, a0, 0xff
;   andi a3, a3, 0xff
;   beq a5, a3, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i8_i16(i8, i16, i16) -> i16 {
block0(v0: i8, v1: i16, v2: i16):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   andi a5,a0,255
;   andi a3,a3,255
;   select_reg a0,a1,a2##condition=(a5 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   andi a5, a0, 0xff
;   andi a3, a3, 0xff
;   beq a5, a3, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i8_i32(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   andi a5,a0,255
;   andi a3,a3,255
;   select_reg a0,a1,a2##condition=(a5 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   andi a5, a0, 0xff
;   andi a3, a3, 0xff
;   beq a5, a3, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i8_i64(i8, i64, i64) -> i64 {
block0(v0: i8, v1: i64, v2: i64):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   andi a5,a0,255
;   andi a3,a3,255
;   select_reg a0,a1,a2##condition=(a5 eq a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   andi a5, a0, 0xff
;   andi a3, a3, 0xff
;   beq a5, a3, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i8_i128(i8, i128, i128) -> i128 {
block0(v0: i8, v1: i128, v2: i128):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv a5,a0
;   mv t2,a1
;   li a0,42
;   andi a5,a5,255
;   andi a0,a0,255
;   eq a5,a5,a0##ty=i8
;   andi a5,a5,255
;   select_i128 [a0,a1],[t2,a2],[a3,a4]##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a5, a0
;   mv t2, a1
;   addi a0, zero, 0x2a
;   andi a5, a5, 0xff
;   andi a0, a0, 0xff
;   bne a5, a0, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   andi a5, a5, 0xff
;   beqz a5, 0x10
;   mv a0, t2
;   mv a1, a2
;   j 0xc
;   mv a0, a3
;   mv a1, a4
;   ret

function %select_icmp_i16_i8(i16, i8, i8) -> i8 {
block0(v0: i16, v1: i8, v2: i8):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,48
;   srli a4,a5,48
;   slli a3,a3,48
;   srli a5,a3,48
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x30
;   srli a4, a5, 0x30
;   slli a3, a3, 0x30
;   srli a5, a3, 0x30
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i16_i16(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,48
;   srli a4,a5,48
;   slli a3,a3,48
;   srli a5,a3,48
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x30
;   srli a4, a5, 0x30
;   slli a3, a3, 0x30
;   srli a5, a3, 0x30
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i16_i32(i16, i32, i32) -> i32 {
block0(v0: i16, v1: i32, v2: i32):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,48
;   srli a4,a5,48
;   slli a3,a3,48
;   srli a5,a3,48
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x30
;   srli a4, a5, 0x30
;   slli a3, a3, 0x30
;   srli a5, a3, 0x30
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i16_i64(i16, i64, i64) -> i64 {
block0(v0: i16, v1: i64, v2: i64):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,48
;   srli a4,a5,48
;   slli a3,a3,48
;   srli a5,a3,48
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x30
;   srli a4, a5, 0x30
;   slli a3, a3, 0x30
;   srli a5, a3, 0x30
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i16_i128(i16, i128, i128) -> i128 {
block0(v0: i16, v1: i128, v2: i128):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv a7,a1
;   li a5,42
;   slli a0,a0,48
;   srli a0,a0,48
;   slli a5,a5,48
;   srli a5,a5,48
;   eq a0,a0,a5##ty=i16
;   andi a5,a0,255
;   select_i128 [a0,a1],[a7,a2],[a3,a4]##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a7, a1
;   addi a5, zero, 0x2a
;   slli a0, a0, 0x30
;   srli a0, a0, 0x30
;   slli a5, a5, 0x30
;   srli a5, a5, 0x30
;   bne a0, a5, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   andi a5, a0, 0xff
;   beqz a5, 0x10
;   mv a0, a7
;   mv a1, a2
;   j 0xc
;   mv a0, a3
;   mv a1, a4
;   ret

function %select_icmp_i32_i8(i32, i8, i8) -> i8 {
block0(v0: i32, v1: i8, v2: i8):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,32
;   srli a4,a5,32
;   slli a3,a3,32
;   srli a5,a3,32
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x20
;   srli a4, a5, 0x20
;   slli a3, a3, 0x20
;   srli a5, a3, 0x20
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i32_i16(i32, i16, i16) -> i16 {
block0(v0: i32, v1: i16, v2: i16):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,32
;   srli a4,a5,32
;   slli a3,a3,32
;   srli a5,a3,32
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x20
;   srli a4, a5, 0x20
;   slli a3, a3, 0x20
;   srli a5, a3, 0x20
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i32_i32(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,32
;   srli a4,a5,32
;   slli a3,a3,32
;   srli a5,a3,32
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x20
;   srli a4, a5, 0x20
;   slli a3, a3, 0x20
;   srli a5, a3, 0x20
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i32_i64(i32, i64, i64) -> i64 {
block0(v0: i32, v1: i64, v2: i64):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a3,42
;   slli a5,a0,32
;   srli a4,a5,32
;   slli a3,a3,32
;   srli a5,a3,32
;   select_reg a0,a1,a2##condition=(a4 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 0x2a
;   slli a5, a0, 0x20
;   srli a4, a5, 0x20
;   slli a3, a3, 0x20
;   srli a5, a3, 0x20
;   beq a4, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i32_i128(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   mv a7,a1
;   li a5,42
;   slli a0,a0,32
;   srli a0,a0,32
;   slli a5,a5,32
;   srli a5,a5,32
;   eq a0,a0,a5##ty=i32
;   andi a5,a0,255
;   select_i128 [a0,a1],[a7,a2],[a3,a4]##condition=a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a7, a1
;   addi a5, zero, 0x2a
;   slli a0, a0, 0x20
;   srli a0, a0, 0x20
;   slli a5, a5, 0x20
;   srli a5, a5, 0x20
;   bne a0, a5, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   andi a5, a0, 0xff
;   beqz a5, 0x10
;   mv a0, a7
;   mv a1, a2
;   j 0xc
;   mv a0, a3
;   mv a1, a4
;   ret

function %select_icmp_i64_i8(i64, i8, i8) -> i8 {
block0(v0: i64, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a5,42
;   select_reg a0,a1,a2##condition=(a0 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a5, zero, 0x2a
;   beq a0, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i64_i16(i64, i16, i16) -> i16 {
block0(v0: i64, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a5,42
;   select_reg a0,a1,a2##condition=(a0 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a5, zero, 0x2a
;   beq a0, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i64_i32(i64, i32, i32) -> i32 {
block0(v0: i64, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a5,42
;   select_reg a0,a1,a2##condition=(a0 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a5, zero, 0x2a
;   beq a0, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i64_i64(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   li a5,42
;   select_reg a0,a1,a2##condition=(a0 eq a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a5, zero, 0x2a
;   beq a0, a5, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a1
;   ret

function %select_icmp_i64_i128(i64, i128, i128) -> i128 {
block0(v0: i64, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.i128 v4, v1, v2
  return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   sd s8,-8(sp)
;   add sp,-16
; block0:
;   mv s8,a1
;   li a5,42
;   eq a5,a0,a5##ty=i64
;   andi a5,a5,255
;   select_i128 [a0,a1],[s8,a2],[a3,a4]##condition=a5
;   add sp,+16
;   ld s8,-8(sp)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   sd s8, -8(sp)
;   addi sp, sp, -0x10
; block1: ; offset 0x18
;   mv s8, a1
;   addi a5, zero, 0x2a
;   bne a0, a5, 0xc
;   addi a5, zero, 1
;   j 8
;   mv a5, zero
;   andi a5, a5, 0xff
;   beqz a5, 0x10
;   mv a0, s8
;   mv a1, a2
;   j 0xc
;   mv a0, a3
;   mv a1, a4
;   addi sp, sp, 0x10
;   ld s8, -8(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %select_icmp_i128_i8(i128, i8, i8) -> i8 {
block0(v0: i128, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i8 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   eq a4,[a0,a1],[a4,a5]##ty=i128
;   andi a4,a4,255
;   select_i8 a0,a2,a3##condition=a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   bne a1, a5, 0x10
;   bne a0, a4, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   andi a4, a4, 0xff
;   beqz a4, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a3
;   ret

function %select_icmp_i128_i16(i128, i16, i16) -> i16 {
block0(v0: i128, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i16 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   eq a4,[a0,a1],[a4,a5]##ty=i128
;   andi a4,a4,255
;   select_i16 a0,a2,a3##condition=a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   bne a1, a5, 0x10
;   bne a0, a4, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   andi a4, a4, 0xff
;   beqz a4, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a3
;   ret

function %select_icmp_i128_i32(i128, i32, i32) -> i32 {
block0(v0: i128, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i32 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   eq a4,[a0,a1],[a4,a5]##ty=i128
;   andi a4,a4,255
;   select_i32 a0,a2,a3##condition=a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   bne a1, a5, 0x10
;   bne a0, a4, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   andi a4, a4, 0xff
;   beqz a4, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a3
;   ret

function %select_icmp_i128_i64(i128, i64, i64) -> i64 {
block0(v0: i128, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i64 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   eq a4,[a0,a1],[a4,a5]##ty=i128
;   andi a4,a4,255
;   select_i64 a0,a2,a3##condition=a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   bne a1, a5, 0x10
;   bne a0, a4, 0xc
;   addi a4, zero, 1
;   j 8
;   mv a4, zero
;   andi a4, a4, 0xff
;   beqz a4, 0xc
;   mv a0, a2
;   j 8
;   mv a0, a3
;   ret

function %select_icmp_i128_i128(i128, i128, i128) -> i128 {
block0(v0: i128, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.i128 v5, v1, v2
  return v6
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   sd s4,-8(sp)
;   sd s6,-16(sp)
;   sd s7,-24(sp)
;   add sp,-32
; block0:
;   li s6,42
;   li s7,0
;   eq a0,[a0,a1],[s6,s7]##ty=i128
;   andi s4,a0,255
;   select_i128 [a0,a1],[a2,a3],[a4,a5]##condition=s4
;   add sp,+32
;   ld s4,-8(sp)
;   ld s6,-16(sp)
;   ld s7,-24(sp)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   sd s4, -8(sp)
;   sd s6, -0x10(sp)
;   sd s7, -0x18(sp)
;   addi sp, sp, -0x20
; block1: ; offset 0x20
;   addi s6, zero, 0x2a
;   mv s7, zero
;   bne a1, s7, 0x10
;   bne a0, s6, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   andi s4, a0, 0xff
;   beqz s4, 0x10
;   mv a0, a2
;   mv a1, a3
;   j 0xc
;   mv a0, a4
;   mv a1, a5
;   addi sp, sp, 0x20
;   ld s4, -8(sp)
;   ld s6, -0x10(sp)
;   ld s7, -0x18(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

